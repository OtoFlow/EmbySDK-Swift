// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Gets all artists from a given item, folder, or the entire library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Artists`.
    /// - Remark: Generated from `#/paths//Artists/get(getArtists)`.
    func getArtists(_ input: Operations.getArtists.Input) async throws -> Operations.getArtists.Output
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Items`.
    /// - Remark: Generated from `#/paths//Items/get(getItems)`.
    func getItems(_ input: Operations.getItems.Input) async throws -> Operations.getItems.Output
    /// Gets all music genres from a given item, folder, or the entire library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /MusicGenres`.
    /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)`.
    func getMusicgenres(_ input: Operations.getMusicgenres.Input) async throws -> Operations.getMusicgenres.Output
    /// Gets an artist, by name
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Artists/{Name}`.
    /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)`.
    func getArtistsByName(_ input: Operations.getArtistsByName.Input) async throws -> Operations.getArtistsByName.Output
    /// Gets all user media folders.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Library/MediaFolders`.
    /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)`.
    func getLibraryMediafolders(_ input: Operations.getLibraryMediafolders.Input) async throws -> Operations.getLibraryMediafolders.Output
    /// Authenticates a user
    ///
    /// Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure
    /// ---
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `POST /Users/AuthenticateByName`.
    /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)`.
    func postUsersAuthenticatebyname(_ input: Operations.postUsersAuthenticatebyname.Input) async throws -> Operations.postUsersAuthenticatebyname.Output
    /// Gets public information about the server
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /System/Info/Public`.
    /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)`.
    func getSystemInfoPublic(_ input: Operations.getSystemInfoPublic.Input) async throws -> Operations.getSystemInfoPublic.Output
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)`.
    func getUsersByUseridItems(_ input: Operations.getUsersByUseridItems.Input) async throws -> Operations.getUsersByUseridItems.Output
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items/Resume`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)`.
    func getUsersByUseridItemsResume(_ input: Operations.getUsersByUseridItemsResume.Input) async throws -> Operations.getUsersByUseridItemsResume.Output
    /// Gets an item from a user's library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)`.
    func getUsersByUseridItemsById(_ input: Operations.getUsersByUseridItemsById.Input) async throws -> Operations.getUsersByUseridItemsById.Output
    /// Marks an item as a favorite
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `POST /Users/{UserId}/FavoriteItems/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)`.
    func postUsersByUseridFavoriteitemsById(_ input: Operations.postUsersByUseridFavoriteitemsById.Input) async throws -> Operations.postUsersByUseridFavoriteitemsById.Output
    /// Unmarks an item as a favorite
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `DELETE /Users/{UserId}/FavoriteItems/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)`.
    func deleteUsersByUseridFavoriteitemsById(_ input: Operations.deleteUsersByUseridFavoriteitemsById.Input) async throws -> Operations.deleteUsersByUseridFavoriteitemsById.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Gets all artists from a given item, folder, or the entire library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Artists`.
    /// - Remark: Generated from `#/paths//Artists/get(getArtists)`.
    internal func getArtists(
        query: Operations.getArtists.Input.Query = .init(),
        headers: Operations.getArtists.Input.Headers = .init()
    ) async throws -> Operations.getArtists.Output {
        try await getArtists(Operations.getArtists.Input(
            query: query,
            headers: headers
        ))
    }
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Items`.
    /// - Remark: Generated from `#/paths//Items/get(getItems)`.
    internal func getItems(
        query: Operations.getItems.Input.Query = .init(),
        headers: Operations.getItems.Input.Headers = .init()
    ) async throws -> Operations.getItems.Output {
        try await getItems(Operations.getItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Gets all music genres from a given item, folder, or the entire library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /MusicGenres`.
    /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)`.
    internal func getMusicgenres(
        query: Operations.getMusicgenres.Input.Query = .init(),
        headers: Operations.getMusicgenres.Input.Headers = .init()
    ) async throws -> Operations.getMusicgenres.Output {
        try await getMusicgenres(Operations.getMusicgenres.Input(
            query: query,
            headers: headers
        ))
    }
    /// Gets an artist, by name
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Artists/{Name}`.
    /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)`.
    internal func getArtistsByName(
        path: Operations.getArtistsByName.Input.Path,
        query: Operations.getArtistsByName.Input.Query = .init(),
        headers: Operations.getArtistsByName.Input.Headers = .init()
    ) async throws -> Operations.getArtistsByName.Output {
        try await getArtistsByName(Operations.getArtistsByName.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets all user media folders.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Library/MediaFolders`.
    /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)`.
    internal func getLibraryMediafolders(
        query: Operations.getLibraryMediafolders.Input.Query = .init(),
        headers: Operations.getLibraryMediafolders.Input.Headers = .init()
    ) async throws -> Operations.getLibraryMediafolders.Output {
        try await getLibraryMediafolders(Operations.getLibraryMediafolders.Input(
            query: query,
            headers: headers
        ))
    }
    /// Authenticates a user
    ///
    /// Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure
    /// ---
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `POST /Users/AuthenticateByName`.
    /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)`.
    internal func postUsersAuthenticatebyname(
        headers: Operations.postUsersAuthenticatebyname.Input.Headers,
        body: Operations.postUsersAuthenticatebyname.Input.Body
    ) async throws -> Operations.postUsersAuthenticatebyname.Output {
        try await postUsersAuthenticatebyname(Operations.postUsersAuthenticatebyname.Input(
            headers: headers,
            body: body
        ))
    }
    /// Gets public information about the server
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /System/Info/Public`.
    /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)`.
    internal func getSystemInfoPublic(headers: Operations.getSystemInfoPublic.Input.Headers = .init()) async throws -> Operations.getSystemInfoPublic.Output {
        try await getSystemInfoPublic(Operations.getSystemInfoPublic.Input(headers: headers))
    }
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)`.
    internal func getUsersByUseridItems(
        path: Operations.getUsersByUseridItems.Input.Path,
        query: Operations.getUsersByUseridItems.Input.Query = .init(),
        headers: Operations.getUsersByUseridItems.Input.Headers = .init()
    ) async throws -> Operations.getUsersByUseridItems.Output {
        try await getUsersByUseridItems(Operations.getUsersByUseridItems.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items/Resume`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)`.
    internal func getUsersByUseridItemsResume(
        path: Operations.getUsersByUseridItemsResume.Input.Path,
        query: Operations.getUsersByUseridItemsResume.Input.Query = .init(),
        headers: Operations.getUsersByUseridItemsResume.Input.Headers = .init()
    ) async throws -> Operations.getUsersByUseridItemsResume.Output {
        try await getUsersByUseridItemsResume(Operations.getUsersByUseridItemsResume.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Gets an item from a user's library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)`.
    internal func getUsersByUseridItemsById(
        path: Operations.getUsersByUseridItemsById.Input.Path,
        headers: Operations.getUsersByUseridItemsById.Input.Headers = .init()
    ) async throws -> Operations.getUsersByUseridItemsById.Output {
        try await getUsersByUseridItemsById(Operations.getUsersByUseridItemsById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Marks an item as a favorite
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `POST /Users/{UserId}/FavoriteItems/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)`.
    internal func postUsersByUseridFavoriteitemsById(
        path: Operations.postUsersByUseridFavoriteitemsById.Input.Path,
        headers: Operations.postUsersByUseridFavoriteitemsById.Input.Headers = .init()
    ) async throws -> Operations.postUsersByUseridFavoriteitemsById.Output {
        try await postUsersByUseridFavoriteitemsById(Operations.postUsersByUseridFavoriteitemsById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Unmarks an item as a favorite
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `DELETE /Users/{UserId}/FavoriteItems/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)`.
    internal func deleteUsersByUseridFavoriteitemsById(
        path: Operations.deleteUsersByUseridFavoriteitemsById.Input.Path,
        headers: Operations.deleteUsersByUseridFavoriteitemsById.Input.Headers = .init()
    ) async throws -> Operations.deleteUsersByUseridFavoriteitemsById.Output {
        try await deleteUsersByUseridFavoriteitemsById(Operations.deleteUsersByUseridFavoriteitemsById.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal enum Server1 {
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "http://emby.media/emby",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://emby.media/emby",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/QueryResult_BaseItemDto`.
        internal struct QueryResult_BaseItemDto: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/QueryResult_BaseItemDto/Items`.
            internal var Items: [Components.Schemas.BaseItemDto]?
            /// - Remark: Generated from `#/components/schemas/QueryResult_BaseItemDto/TotalRecordCount`.
            internal var TotalRecordCount: Swift.Int32?
            /// Creates a new `QueryResult_BaseItemDto`.
            ///
            /// - Parameters:
            ///   - Items:
            ///   - TotalRecordCount:
            internal init(
                Items: [Components.Schemas.BaseItemDto]? = nil,
                TotalRecordCount: Swift.Int32? = nil
            ) {
                self.Items = Items
                self.TotalRecordCount = TotalRecordCount
            }
            internal enum CodingKeys: String, CodingKey {
                case Items
                case TotalRecordCount
            }
        }
        /// This is strictly used as a data transfer object from the api layer. This holds information about a BaseItem in a format that is convenient for the client.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/BaseItemDto`.
        internal struct BaseItemDto: Codable, Hashable, Sendable {
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Name`.
            internal var Name: Swift.String? {
                get  {
                    storage.value.Name
                }
                _modify {
                    yield &storage.value.Name
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/OriginalTitle`.
            internal var OriginalTitle: Swift.String? {
                get  {
                    storage.value.OriginalTitle
                }
                _modify {
                    yield &storage.value.OriginalTitle
                }
            }
            /// The server identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ServerId`.
            internal var ServerId: Swift.String? {
                get  {
                    storage.value.ServerId
                }
                _modify {
                    yield &storage.value.ServerId
                }
            }
            /// The id.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Id`.
            internal var Id: Swift.String? {
                get  {
                    storage.value.Id
                }
                _modify {
                    yield &storage.value.Id
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Guid`.
            internal var Guid: Swift.String? {
                get  {
                    storage.value.Guid
                }
                _modify {
                    yield &storage.value.Guid
                }
            }
            /// The etag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Etag`.
            internal var Etag: Swift.String? {
                get  {
                    storage.value.Etag
                }
                _modify {
                    yield &storage.value.Etag
                }
            }
            /// The Prefix.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Prefix`.
            internal var Prefix: Swift.String? {
                get  {
                    storage.value.Prefix
                }
                _modify {
                    yield &storage.value.Prefix
                }
            }
            /// The playlist item identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PlaylistItemId`.
            internal var PlaylistItemId: Swift.String? {
                get  {
                    storage.value.PlaylistItemId
                }
                _modify {
                    yield &storage.value.PlaylistItemId
                }
            }
            /// The date created.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/DateCreated`.
            internal var DateCreated: Foundation.Date? {
                get  {
                    storage.value.DateCreated
                }
                _modify {
                    yield &storage.value.DateCreated
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ExtraType`.
            internal var ExtraType: Swift.String? {
                get  {
                    storage.value.ExtraType
                }
                _modify {
                    yield &storage.value.ExtraType
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SortIndexNumber`.
            internal var SortIndexNumber: Swift.Int32? {
                get  {
                    storage.value.SortIndexNumber
                }
                _modify {
                    yield &storage.value.SortIndexNumber
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SortParentIndexNumber`.
            internal var SortParentIndexNumber: Swift.Int32? {
                get  {
                    storage.value.SortParentIndexNumber
                }
                _modify {
                    yield &storage.value.SortParentIndexNumber
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanDelete`.
            internal var CanDelete: Swift.Bool? {
                get  {
                    storage.value.CanDelete
                }
                _modify {
                    yield &storage.value.CanDelete
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanDownload`.
            internal var CanDownload: Swift.Bool? {
                get  {
                    storage.value.CanDownload
                }
                _modify {
                    yield &storage.value.CanDownload
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanEditItems`.
            internal var CanEditItems: Swift.Bool? {
                get  {
                    storage.value.CanEditItems
                }
                _modify {
                    yield &storage.value.CanEditItems
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SupportsResume`.
            internal var SupportsResume: Swift.Bool? {
                get  {
                    storage.value.SupportsResume
                }
                _modify {
                    yield &storage.value.SupportsResume
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PresentationUniqueKey`.
            internal var PresentationUniqueKey: Swift.String? {
                get  {
                    storage.value.PresentationUniqueKey
                }
                _modify {
                    yield &storage.value.PresentationUniqueKey
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PreferredMetadataLanguage`.
            internal var PreferredMetadataLanguage: Swift.String? {
                get  {
                    storage.value.PreferredMetadataLanguage
                }
                _modify {
                    yield &storage.value.PreferredMetadataLanguage
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PreferredMetadataCountryCode`.
            internal var PreferredMetadataCountryCode: Swift.String? {
                get  {
                    storage.value.PreferredMetadataCountryCode
                }
                _modify {
                    yield &storage.value.PreferredMetadataCountryCode
                }
            }
            /// A value indicating whether \[supports synchronize\].
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SupportsSync`.
            internal var SupportsSync: Swift.Bool? {
                get  {
                    storage.value.SupportsSync
                }
                _modify {
                    yield &storage.value.SupportsSync
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SyncStatus`.
            internal var SyncStatus: Components.Schemas.SyncJobItemStatus? {
                get  {
                    storage.value.SyncStatus
                }
                _modify {
                    yield &storage.value.SyncStatus
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanManageAccess`.
            internal var CanManageAccess: Swift.Bool? {
                get  {
                    storage.value.CanManageAccess
                }
                _modify {
                    yield &storage.value.CanManageAccess
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanLeaveContent`.
            internal var CanLeaveContent: Swift.Bool? {
                get  {
                    storage.value.CanLeaveContent
                }
                _modify {
                    yield &storage.value.CanLeaveContent
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanMakePublic`.
            internal var CanMakePublic: Swift.Bool? {
                get  {
                    storage.value.CanMakePublic
                }
                _modify {
                    yield &storage.value.CanMakePublic
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Container`.
            internal var Container: Swift.String? {
                get  {
                    storage.value.Container
                }
                _modify {
                    yield &storage.value.Container
                }
            }
            /// The name of the sort.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SortName`.
            internal var SortName: Swift.String? {
                get  {
                    storage.value.SortName
                }
                _modify {
                    yield &storage.value.SortName
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ForcedSortName`.
            internal var ForcedSortName: Swift.String? {
                get  {
                    storage.value.ForcedSortName
                }
                _modify {
                    yield &storage.value.ForcedSortName
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Video3DFormat`.
            internal var Video3DFormat: Components.Schemas.Video3DFormat? {
                get  {
                    storage.value.Video3DFormat
                }
                _modify {
                    yield &storage.value.Video3DFormat
                }
            }
            /// The premiere date.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PremiereDate`.
            internal var PremiereDate: Foundation.Date? {
                get  {
                    storage.value.PremiereDate
                }
                _modify {
                    yield &storage.value.PremiereDate
                }
            }
            /// The external urls.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ExternalUrls`.
            internal var ExternalUrls: [Components.Schemas.ExternalUrl]? {
                get  {
                    storage.value.ExternalUrls
                }
                _modify {
                    yield &storage.value.ExternalUrls
                }
            }
            /// The media versions.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/MediaSources`.
            internal var MediaSources: [Components.Schemas.MediaSourceInfo]? {
                get  {
                    storage.value.MediaSources
                }
                _modify {
                    yield &storage.value.MediaSources
                }
            }
            /// The critic rating.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CriticRating`.
            internal var CriticRating: Swift.Float? {
                get  {
                    storage.value.CriticRating
                }
                _modify {
                    yield &storage.value.CriticRating
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/GameSystemId`.
            internal var GameSystemId: Swift.Int64? {
                get  {
                    storage.value.GameSystemId
                }
                _modify {
                    yield &storage.value.GameSystemId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AsSeries`.
            internal var AsSeries: Swift.Bool? {
                get  {
                    storage.value.AsSeries
                }
                _modify {
                    yield &storage.value.AsSeries
                }
            }
            /// The game system.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/GameSystem`.
            internal var GameSystem: Swift.String? {
                get  {
                    storage.value.GameSystem
                }
                _modify {
                    yield &storage.value.GameSystem
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ProductionLocations`.
            internal var ProductionLocations: [Swift.String]? {
                get  {
                    storage.value.ProductionLocations
                }
                _modify {
                    yield &storage.value.ProductionLocations
                }
            }
            /// The path.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Path`.
            internal var Path: Swift.String? {
                get  {
                    storage.value.Path
                }
                _modify {
                    yield &storage.value.Path
                }
            }
            /// The official rating.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/OfficialRating`.
            internal var OfficialRating: Swift.String? {
                get  {
                    storage.value.OfficialRating
                }
                _modify {
                    yield &storage.value.OfficialRating
                }
            }
            /// The custom rating.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CustomRating`.
            internal var CustomRating: Swift.String? {
                get  {
                    storage.value.CustomRating
                }
                _modify {
                    yield &storage.value.CustomRating
                }
            }
            /// The channel identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelId`.
            internal var ChannelId: Swift.String? {
                get  {
                    storage.value.ChannelId
                }
                _modify {
                    yield &storage.value.ChannelId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelName`.
            internal var ChannelName: Swift.String? {
                get  {
                    storage.value.ChannelName
                }
                _modify {
                    yield &storage.value.ChannelName
                }
            }
            /// The overview.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Overview`.
            internal var Overview: Swift.String? {
                get  {
                    storage.value.Overview
                }
                _modify {
                    yield &storage.value.Overview
                }
            }
            /// The taglines.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Taglines`.
            internal var Taglines: [Swift.String]? {
                get  {
                    storage.value.Taglines
                }
                _modify {
                    yield &storage.value.Taglines
                }
            }
            /// The genres.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Genres`.
            internal var Genres: [Swift.String]? {
                get  {
                    storage.value.Genres
                }
                _modify {
                    yield &storage.value.Genres
                }
            }
            /// The community rating.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CommunityRating`.
            internal var CommunityRating: Swift.Float? {
                get  {
                    storage.value.CommunityRating
                }
                _modify {
                    yield &storage.value.CommunityRating
                }
            }
            /// The run time ticks.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/RunTimeTicks`.
            internal var RunTimeTicks: Swift.Int64? {
                get  {
                    storage.value.RunTimeTicks
                }
                _modify {
                    yield &storage.value.RunTimeTicks
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Size`.
            internal var Size: Swift.Int64? {
                get  {
                    storage.value.Size
                }
                _modify {
                    yield &storage.value.Size
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/FileName`.
            internal var FileName: Swift.String? {
                get  {
                    storage.value.FileName
                }
                _modify {
                    yield &storage.value.FileName
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Bitrate`.
            internal var Bitrate: Swift.Int32? {
                get  {
                    storage.value.Bitrate
                }
                _modify {
                    yield &storage.value.Bitrate
                }
            }
            /// The production year.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ProductionYear`.
            internal var ProductionYear: Swift.Int32? {
                get  {
                    storage.value.ProductionYear
                }
                _modify {
                    yield &storage.value.ProductionYear
                }
            }
            /// The number.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Number`.
            internal var Number: Swift.String? {
                get  {
                    storage.value.Number
                }
                _modify {
                    yield &storage.value.Number
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelNumber`.
            internal var ChannelNumber: Swift.String? {
                get  {
                    storage.value.ChannelNumber
                }
                _modify {
                    yield &storage.value.ChannelNumber
                }
            }
            /// The index number.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IndexNumber`.
            internal var IndexNumber: Swift.Int32? {
                get  {
                    storage.value.IndexNumber
                }
                _modify {
                    yield &storage.value.IndexNumber
                }
            }
            /// The index number end.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IndexNumberEnd`.
            internal var IndexNumberEnd: Swift.Int32? {
                get  {
                    storage.value.IndexNumberEnd
                }
                _modify {
                    yield &storage.value.IndexNumberEnd
                }
            }
            /// The parent index number.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentIndexNumber`.
            internal var ParentIndexNumber: Swift.Int32? {
                get  {
                    storage.value.ParentIndexNumber
                }
                _modify {
                    yield &storage.value.ParentIndexNumber
                }
            }
            /// The trailer urls.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/RemoteTrailers`.
            internal var RemoteTrailers: [Components.Schemas.MediaUrl]? {
                get  {
                    storage.value.RemoteTrailers
                }
                _modify {
                    yield &storage.value.RemoteTrailers
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ProviderIds`.
            internal var ProviderIds: Components.Schemas.ProviderIdDictionary? {
                get  {
                    storage.value.ProviderIds
                }
                _modify {
                    yield &storage.value.ProviderIds
                }
            }
            /// A value indicating whether this instance is folder.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsFolder`.
            internal var IsFolder: Swift.Bool? {
                get  {
                    storage.value.IsFolder
                }
                _modify {
                    yield &storage.value.IsFolder
                }
            }
            /// The parent id.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentId`.
            internal var ParentId: Swift.String? {
                get  {
                    storage.value.ParentId
                }
                _modify {
                    yield &storage.value.ParentId
                }
            }
            /// The type.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Type`.
            internal var _Type: Swift.String? {
                get  {
                    storage.value._Type
                }
                _modify {
                    yield &storage.value._Type
                }
            }
            /// The people.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/People`.
            internal var People: [Components.Schemas.BaseItemPerson]? {
                get  {
                    storage.value.People
                }
                _modify {
                    yield &storage.value.People
                }
            }
            /// The studios.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Studios`.
            internal var Studios: [Components.Schemas.NameLongIdPair]? {
                get  {
                    storage.value.Studios
                }
                _modify {
                    yield &storage.value.Studios
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/GenreItems`.
            internal var GenreItems: [Components.Schemas.NameLongIdPair]? {
                get  {
                    storage.value.GenreItems
                }
                _modify {
                    yield &storage.value.GenreItems
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/TagItems`.
            internal var TagItems: [Components.Schemas.NameLongIdPair]? {
                get  {
                    storage.value.TagItems
                }
                _modify {
                    yield &storage.value.TagItems
                }
            }
            /// If the item does not have a logo, this will hold the Id of the Parent that has one.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentLogoItemId`.
            internal var ParentLogoItemId: Swift.String? {
                get  {
                    storage.value.ParentLogoItemId
                }
                _modify {
                    yield &storage.value.ParentLogoItemId
                }
            }
            /// If the item does not have any backdrops, this will hold the Id of the Parent that has one.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentBackdropItemId`.
            internal var ParentBackdropItemId: Swift.String? {
                get  {
                    storage.value.ParentBackdropItemId
                }
                _modify {
                    yield &storage.value.ParentBackdropItemId
                }
            }
            /// The parent backdrop image tags.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentBackdropImageTags`.
            internal var ParentBackdropImageTags: [Swift.String]? {
                get  {
                    storage.value.ParentBackdropImageTags
                }
                _modify {
                    yield &storage.value.ParentBackdropImageTags
                }
            }
            /// The local trailer count.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/LocalTrailerCount`.
            internal var LocalTrailerCount: Swift.Int32? {
                get  {
                    storage.value.LocalTrailerCount
                }
                _modify {
                    yield &storage.value.LocalTrailerCount
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/UserData`.
            internal var UserData: Components.Schemas.UserItemDataDto? {
                get  {
                    storage.value.UserData
                }
                _modify {
                    yield &storage.value.UserData
                }
            }
            /// The recursive item count.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/RecursiveItemCount`.
            internal var RecursiveItemCount: Swift.Int32? {
                get  {
                    storage.value.RecursiveItemCount
                }
                _modify {
                    yield &storage.value.RecursiveItemCount
                }
            }
            /// The child count.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChildCount`.
            internal var ChildCount: Swift.Int32? {
                get  {
                    storage.value.ChildCount
                }
                _modify {
                    yield &storage.value.ChildCount
                }
            }
            /// The name of the series.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesName`.
            internal var SeriesName: Swift.String? {
                get  {
                    storage.value.SeriesName
                }
                _modify {
                    yield &storage.value.SeriesName
                }
            }
            /// The series id.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesId`.
            internal var SeriesId: Swift.String? {
                get  {
                    storage.value.SeriesId
                }
                _modify {
                    yield &storage.value.SeriesId
                }
            }
            /// The season identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeasonId`.
            internal var SeasonId: Swift.String? {
                get  {
                    storage.value.SeasonId
                }
                _modify {
                    yield &storage.value.SeasonId
                }
            }
            /// The special feature count.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SpecialFeatureCount`.
            internal var SpecialFeatureCount: Swift.Int32? {
                get  {
                    storage.value.SpecialFeatureCount
                }
                _modify {
                    yield &storage.value.SpecialFeatureCount
                }
            }
            /// The display preferences id.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/DisplayPreferencesId`.
            internal var DisplayPreferencesId: Swift.String? {
                get  {
                    storage.value.DisplayPreferencesId
                }
                _modify {
                    yield &storage.value.DisplayPreferencesId
                }
            }
            /// The status.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Status`.
            internal var Status: Swift.String? {
                get  {
                    storage.value.Status
                }
                _modify {
                    yield &storage.value.Status
                }
            }
            /// The air days.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AirDays`.
            internal var AirDays: [Components.Schemas.DayOfWeek]? {
                get  {
                    storage.value.AirDays
                }
                _modify {
                    yield &storage.value.AirDays
                }
            }
            /// The tags.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Tags`.
            internal var Tags: [Swift.String]? {
                get  {
                    storage.value.Tags
                }
                _modify {
                    yield &storage.value.Tags
                }
            }
            /// The primary image aspect ratio, after image enhancements.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PrimaryImageAspectRatio`.
            internal var PrimaryImageAspectRatio: Swift.Double? {
                get  {
                    storage.value.PrimaryImageAspectRatio
                }
                _modify {
                    yield &storage.value.PrimaryImageAspectRatio
                }
            }
            /// The artists.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Artists`.
            internal var Artists: [Swift.String]? {
                get  {
                    storage.value.Artists
                }
                _modify {
                    yield &storage.value.Artists
                }
            }
            /// The artist items.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ArtistItems`.
            internal var ArtistItems: [Components.Schemas.NameIdPair]? {
                get  {
                    storage.value.ArtistItems
                }
                _modify {
                    yield &storage.value.ArtistItems
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Composers`.
            internal var Composers: [Components.Schemas.NameIdPair]? {
                get  {
                    storage.value.Composers
                }
                _modify {
                    yield &storage.value.Composers
                }
            }
            /// The album.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Album`.
            internal var Album: Swift.String? {
                get  {
                    storage.value.Album
                }
                _modify {
                    yield &storage.value.Album
                }
            }
            /// The type of the collection.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CollectionType`.
            internal var CollectionType: Swift.String? {
                get  {
                    storage.value.CollectionType
                }
                _modify {
                    yield &storage.value.CollectionType
                }
            }
            /// The display order.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/DisplayOrder`.
            internal var DisplayOrder: Swift.String? {
                get  {
                    storage.value.DisplayOrder
                }
                _modify {
                    yield &storage.value.DisplayOrder
                }
            }
            /// The album id.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumId`.
            internal var AlbumId: Swift.String? {
                get  {
                    storage.value.AlbumId
                }
                _modify {
                    yield &storage.value.AlbumId
                }
            }
            /// The album image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumPrimaryImageTag`.
            internal var AlbumPrimaryImageTag: Swift.String? {
                get  {
                    storage.value.AlbumPrimaryImageTag
                }
                _modify {
                    yield &storage.value.AlbumPrimaryImageTag
                }
            }
            /// The series primary image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesPrimaryImageTag`.
            internal var SeriesPrimaryImageTag: Swift.String? {
                get  {
                    storage.value.SeriesPrimaryImageTag
                }
                _modify {
                    yield &storage.value.SeriesPrimaryImageTag
                }
            }
            /// The album artist.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumArtist`.
            internal var AlbumArtist: Swift.String? {
                get  {
                    storage.value.AlbumArtist
                }
                _modify {
                    yield &storage.value.AlbumArtist
                }
            }
            /// The album artists.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumArtists`.
            internal var AlbumArtists: [Components.Schemas.NameIdPair]? {
                get  {
                    storage.value.AlbumArtists
                }
                _modify {
                    yield &storage.value.AlbumArtists
                }
            }
            /// The name of the season.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeasonName`.
            internal var SeasonName: Swift.String? {
                get  {
                    storage.value.SeasonName
                }
                _modify {
                    yield &storage.value.SeasonName
                }
            }
            /// The media streams.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/MediaStreams`.
            internal var MediaStreams: [Components.Schemas.MediaStream]? {
                get  {
                    storage.value.MediaStreams
                }
                _modify {
                    yield &storage.value.MediaStreams
                }
            }
            /// The part count.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PartCount`.
            internal var PartCount: Swift.Int32? {
                get  {
                    storage.value.PartCount
                }
                _modify {
                    yield &storage.value.PartCount
                }
            }
            /// The image tags.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ImageTags`.
            internal struct ImageTagsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `ImageTagsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The image tags.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ImageTags`.
            internal var ImageTags: Components.Schemas.BaseItemDto.ImageTagsPayload? {
                get  {
                    storage.value.ImageTags
                }
                _modify {
                    yield &storage.value.ImageTags
                }
            }
            /// The backdrop image tags.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/BackdropImageTags`.
            internal var BackdropImageTags: [Swift.String]? {
                get  {
                    storage.value.BackdropImageTags
                }
                _modify {
                    yield &storage.value.BackdropImageTags
                }
            }
            /// The parent logo image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentLogoImageTag`.
            internal var ParentLogoImageTag: Swift.String? {
                get  {
                    storage.value.ParentLogoImageTag
                }
                _modify {
                    yield &storage.value.ParentLogoImageTag
                }
            }
            /// The series studio.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesStudio`.
            internal var SeriesStudio: Swift.String? {
                get  {
                    storage.value.SeriesStudio
                }
                _modify {
                    yield &storage.value.SeriesStudio
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PrimaryImageItemId`.
            internal var PrimaryImageItemId: Swift.String? {
                get  {
                    storage.value.PrimaryImageItemId
                }
                _modify {
                    yield &storage.value.PrimaryImageItemId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/PrimaryImageTag`.
            internal var PrimaryImageTag: Swift.String? {
                get  {
                    storage.value.PrimaryImageTag
                }
                _modify {
                    yield &storage.value.PrimaryImageTag
                }
            }
            /// The parent thumb item id.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentThumbItemId`.
            internal var ParentThumbItemId: Swift.String? {
                get  {
                    storage.value.ParentThumbItemId
                }
                _modify {
                    yield &storage.value.ParentThumbItemId
                }
            }
            /// The parent thumb image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentThumbImageTag`.
            internal var ParentThumbImageTag: Swift.String? {
                get  {
                    storage.value.ParentThumbImageTag
                }
                _modify {
                    yield &storage.value.ParentThumbImageTag
                }
            }
            /// The chapters.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Chapters`.
            internal var Chapters: [Components.Schemas.ChapterInfo]? {
                get  {
                    storage.value.Chapters
                }
                _modify {
                    yield &storage.value.Chapters
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/LocationType`.
            internal var LocationType: Components.Schemas.LocationType? {
                get  {
                    storage.value.LocationType
                }
                _modify {
                    yield &storage.value.LocationType
                }
            }
            /// The type of the media.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/MediaType`.
            internal var MediaType: Swift.String? {
                get  {
                    storage.value.MediaType
                }
                _modify {
                    yield &storage.value.MediaType
                }
            }
            /// The end date.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/EndDate`.
            internal var EndDate: Foundation.Date? {
                get  {
                    storage.value.EndDate
                }
                _modify {
                    yield &storage.value.EndDate
                }
            }
            /// The locked fields.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/LockedFields`.
            internal var LockedFields: [Components.Schemas.MetadataFields]? {
                get  {
                    storage.value.LockedFields
                }
                _modify {
                    yield &storage.value.LockedFields
                }
            }
            /// A value indicating whether \[enable internet providers\].
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/LockData`.
            internal var LockData: Swift.Bool? {
                get  {
                    storage.value.LockData
                }
                _modify {
                    yield &storage.value.LockData
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Width`.
            internal var Width: Swift.Int32? {
                get  {
                    storage.value.Width
                }
                _modify {
                    yield &storage.value.Width
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Height`.
            internal var Height: Swift.Int32? {
                get  {
                    storage.value.Height
                }
                _modify {
                    yield &storage.value.Height
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CameraMake`.
            internal var CameraMake: Swift.String? {
                get  {
                    storage.value.CameraMake
                }
                _modify {
                    yield &storage.value.CameraMake
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CameraModel`.
            internal var CameraModel: Swift.String? {
                get  {
                    storage.value.CameraModel
                }
                _modify {
                    yield &storage.value.CameraModel
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Software`.
            internal var Software: Swift.String? {
                get  {
                    storage.value.Software
                }
                _modify {
                    yield &storage.value.Software
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ExposureTime`.
            internal var ExposureTime: Swift.Double? {
                get  {
                    storage.value.ExposureTime
                }
                _modify {
                    yield &storage.value.ExposureTime
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/FocalLength`.
            internal var FocalLength: Swift.Double? {
                get  {
                    storage.value.FocalLength
                }
                _modify {
                    yield &storage.value.FocalLength
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ImageOrientation`.
            internal var ImageOrientation: Components.Schemas.Drawing_period_ImageOrientation? {
                get  {
                    storage.value.ImageOrientation
                }
                _modify {
                    yield &storage.value.ImageOrientation
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Aperture`.
            internal var Aperture: Swift.Double? {
                get  {
                    storage.value.Aperture
                }
                _modify {
                    yield &storage.value.Aperture
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ShutterSpeed`.
            internal var ShutterSpeed: Swift.Double? {
                get  {
                    storage.value.ShutterSpeed
                }
                _modify {
                    yield &storage.value.ShutterSpeed
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Latitude`.
            internal var Latitude: Swift.Double? {
                get  {
                    storage.value.Latitude
                }
                _modify {
                    yield &storage.value.Latitude
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Longitude`.
            internal var Longitude: Swift.Double? {
                get  {
                    storage.value.Longitude
                }
                _modify {
                    yield &storage.value.Longitude
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Altitude`.
            internal var Altitude: Swift.Double? {
                get  {
                    storage.value.Altitude
                }
                _modify {
                    yield &storage.value.Altitude
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsoSpeedRating`.
            internal var IsoSpeedRating: Swift.Int32? {
                get  {
                    storage.value.IsoSpeedRating
                }
                _modify {
                    yield &storage.value.IsoSpeedRating
                }
            }
            /// The series timer identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesTimerId`.
            internal var SeriesTimerId: Swift.String? {
                get  {
                    storage.value.SeriesTimerId
                }
                _modify {
                    yield &storage.value.SeriesTimerId
                }
            }
            /// The channel primary image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelPrimaryImageTag`.
            internal var ChannelPrimaryImageTag: Swift.String? {
                get  {
                    storage.value.ChannelPrimaryImageTag
                }
                _modify {
                    yield &storage.value.ChannelPrimaryImageTag
                }
            }
            /// The start date of the recording, in UTC.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/StartDate`.
            internal var StartDate: Foundation.Date? {
                get  {
                    storage.value.StartDate
                }
                _modify {
                    yield &storage.value.StartDate
                }
            }
            /// The completion percentage.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CompletionPercentage`.
            internal var CompletionPercentage: Swift.Double? {
                get  {
                    storage.value.CompletionPercentage
                }
                _modify {
                    yield &storage.value.CompletionPercentage
                }
            }
            /// A value indicating whether this instance is repeat.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsRepeat`.
            internal var IsRepeat: Swift.Bool? {
                get  {
                    storage.value.IsRepeat
                }
                _modify {
                    yield &storage.value.IsRepeat
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsNew`.
            internal var IsNew: Swift.Bool? {
                get  {
                    storage.value.IsNew
                }
                _modify {
                    yield &storage.value.IsNew
                }
            }
            /// The episode title.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/EpisodeTitle`.
            internal var EpisodeTitle: Swift.String? {
                get  {
                    storage.value.EpisodeTitle
                }
                _modify {
                    yield &storage.value.EpisodeTitle
                }
            }
            /// A value indicating whether this instance is movie.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsMovie`.
            internal var IsMovie: Swift.Bool? {
                get  {
                    storage.value.IsMovie
                }
                _modify {
                    yield &storage.value.IsMovie
                }
            }
            /// A value indicating whether this instance is sports.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsSports`.
            internal var IsSports: Swift.Bool? {
                get  {
                    storage.value.IsSports
                }
                _modify {
                    yield &storage.value.IsSports
                }
            }
            /// A value indicating whether this instance is series.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsSeries`.
            internal var IsSeries: Swift.Bool? {
                get  {
                    storage.value.IsSeries
                }
                _modify {
                    yield &storage.value.IsSeries
                }
            }
            /// A value indicating whether this instance is live.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsLive`.
            internal var IsLive: Swift.Bool? {
                get  {
                    storage.value.IsLive
                }
                _modify {
                    yield &storage.value.IsLive
                }
            }
            /// A value indicating whether this instance is news.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsNews`.
            internal var IsNews: Swift.Bool? {
                get  {
                    storage.value.IsNews
                }
                _modify {
                    yield &storage.value.IsNews
                }
            }
            /// A value indicating whether this instance is kids.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsKids`.
            internal var IsKids: Swift.Bool? {
                get  {
                    storage.value.IsKids
                }
                _modify {
                    yield &storage.value.IsKids
                }
            }
            /// A value indicating whether this instance is premiere.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsPremiere`.
            internal var IsPremiere: Swift.Bool? {
                get  {
                    storage.value.IsPremiere
                }
                _modify {
                    yield &storage.value.IsPremiere
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/TimerType`.
            internal var TimerType: Components.Schemas.LiveTv_period_TimerType? {
                get  {
                    storage.value.TimerType
                }
                _modify {
                    yield &storage.value.TimerType
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Disabled`.
            internal var Disabled: Swift.Bool? {
                get  {
                    storage.value.Disabled
                }
                _modify {
                    yield &storage.value.Disabled
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ManagementId`.
            internal var ManagementId: Swift.String? {
                get  {
                    storage.value.ManagementId
                }
                _modify {
                    yield &storage.value.ManagementId
                }
            }
            /// The timer identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/TimerId`.
            internal var TimerId: Swift.String? {
                get  {
                    storage.value.TimerId
                }
                _modify {
                    yield &storage.value.TimerId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/CurrentProgram`.
            internal var CurrentProgram: Components.Schemas.BaseItemDto? {
                get  {
                    storage.value.CurrentProgram
                }
                _modify {
                    yield &storage.value.CurrentProgram
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/MovieCount`.
            internal var MovieCount: Swift.Int32? {
                get  {
                    storage.value.MovieCount
                }
                _modify {
                    yield &storage.value.MovieCount
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesCount`.
            internal var SeriesCount: Swift.Int32? {
                get  {
                    storage.value.SeriesCount
                }
                _modify {
                    yield &storage.value.SeriesCount
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumCount`.
            internal var AlbumCount: Swift.Int32? {
                get  {
                    storage.value.AlbumCount
                }
                _modify {
                    yield &storage.value.AlbumCount
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/SongCount`.
            internal var SongCount: Swift.Int32? {
                get  {
                    storage.value.SongCount
                }
                _modify {
                    yield &storage.value.SongCount
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/MusicVideoCount`.
            internal var MusicVideoCount: Swift.Int32? {
                get  {
                    storage.value.MusicVideoCount
                }
                _modify {
                    yield &storage.value.MusicVideoCount
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/Subviews`.
            internal var Subviews: [Swift.String]? {
                get  {
                    storage.value.Subviews
                }
                _modify {
                    yield &storage.value.Subviews
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsProviderId`.
            internal var ListingsProviderId: Swift.String? {
                get  {
                    storage.value.ListingsProviderId
                }
                _modify {
                    yield &storage.value.ListingsProviderId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsChannelId`.
            internal var ListingsChannelId: Swift.String? {
                get  {
                    storage.value.ListingsChannelId
                }
                _modify {
                    yield &storage.value.ListingsChannelId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsPath`.
            internal var ListingsPath: Swift.String? {
                get  {
                    storage.value.ListingsPath
                }
                _modify {
                    yield &storage.value.ListingsPath
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsId`.
            internal var ListingsId: Swift.String? {
                get  {
                    storage.value.ListingsId
                }
                _modify {
                    yield &storage.value.ListingsId
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsChannelName`.
            internal var ListingsChannelName: Swift.String? {
                get  {
                    storage.value.ListingsChannelName
                }
                _modify {
                    yield &storage.value.ListingsChannelName
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsChannelNumber`.
            internal var ListingsChannelNumber: Swift.String? {
                get  {
                    storage.value.ListingsChannelNumber
                }
                _modify {
                    yield &storage.value.ListingsChannelNumber
                }
            }
            /// - Remark: Generated from `#/components/schemas/BaseItemDto/AffiliateCallSign`.
            internal var AffiliateCallSign: Swift.String? {
                get  {
                    storage.value.AffiliateCallSign
                }
                _modify {
                    yield &storage.value.AffiliateCallSign
                }
            }
            /// Creates a new `BaseItemDto`.
            ///
            /// - Parameters:
            ///   - Name: The name.
            ///   - OriginalTitle:
            ///   - ServerId: The server identifier.
            ///   - Id: The id.
            ///   - Guid:
            ///   - Etag: The etag.
            ///   - Prefix: The Prefix.
            ///   - PlaylistItemId: The playlist item identifier.
            ///   - DateCreated: The date created.
            ///   - ExtraType:
            ///   - SortIndexNumber:
            ///   - SortParentIndexNumber:
            ///   - CanDelete:
            ///   - CanDownload:
            ///   - CanEditItems:
            ///   - SupportsResume:
            ///   - PresentationUniqueKey:
            ///   - PreferredMetadataLanguage:
            ///   - PreferredMetadataCountryCode:
            ///   - SupportsSync: A value indicating whether \[supports synchronize\].
            ///   - SyncStatus:
            ///   - CanManageAccess:
            ///   - CanLeaveContent:
            ///   - CanMakePublic:
            ///   - Container:
            ///   - SortName: The name of the sort.
            ///   - ForcedSortName:
            ///   - Video3DFormat:
            ///   - PremiereDate: The premiere date.
            ///   - ExternalUrls: The external urls.
            ///   - MediaSources: The media versions.
            ///   - CriticRating: The critic rating.
            ///   - GameSystemId:
            ///   - AsSeries:
            ///   - GameSystem: The game system.
            ///   - ProductionLocations:
            ///   - Path: The path.
            ///   - OfficialRating: The official rating.
            ///   - CustomRating: The custom rating.
            ///   - ChannelId: The channel identifier.
            ///   - ChannelName:
            ///   - Overview: The overview.
            ///   - Taglines: The taglines.
            ///   - Genres: The genres.
            ///   - CommunityRating: The community rating.
            ///   - RunTimeTicks: The run time ticks.
            ///   - Size:
            ///   - FileName:
            ///   - Bitrate:
            ///   - ProductionYear: The production year.
            ///   - Number: The number.
            ///   - ChannelNumber:
            ///   - IndexNumber: The index number.
            ///   - IndexNumberEnd: The index number end.
            ///   - ParentIndexNumber: The parent index number.
            ///   - RemoteTrailers: The trailer urls.
            ///   - ProviderIds:
            ///   - IsFolder: A value indicating whether this instance is folder.
            ///   - ParentId: The parent id.
            ///   - _Type: The type.
            ///   - People: The people.
            ///   - Studios: The studios.
            ///   - GenreItems:
            ///   - TagItems:
            ///   - ParentLogoItemId: If the item does not have a logo, this will hold the Id of the Parent that has one.
            ///   - ParentBackdropItemId: If the item does not have any backdrops, this will hold the Id of the Parent that has one.
            ///   - ParentBackdropImageTags: The parent backdrop image tags.
            ///   - LocalTrailerCount: The local trailer count.
            ///   - UserData:
            ///   - RecursiveItemCount: The recursive item count.
            ///   - ChildCount: The child count.
            ///   - SeriesName: The name of the series.
            ///   - SeriesId: The series id.
            ///   - SeasonId: The season identifier.
            ///   - SpecialFeatureCount: The special feature count.
            ///   - DisplayPreferencesId: The display preferences id.
            ///   - Status: The status.
            ///   - AirDays: The air days.
            ///   - Tags: The tags.
            ///   - PrimaryImageAspectRatio: The primary image aspect ratio, after image enhancements.
            ///   - Artists: The artists.
            ///   - ArtistItems: The artist items.
            ///   - Composers:
            ///   - Album: The album.
            ///   - CollectionType: The type of the collection.
            ///   - DisplayOrder: The display order.
            ///   - AlbumId: The album id.
            ///   - AlbumPrimaryImageTag: The album image tag.
            ///   - SeriesPrimaryImageTag: The series primary image tag.
            ///   - AlbumArtist: The album artist.
            ///   - AlbumArtists: The album artists.
            ///   - SeasonName: The name of the season.
            ///   - MediaStreams: The media streams.
            ///   - PartCount: The part count.
            ///   - ImageTags: The image tags.
            ///   - BackdropImageTags: The backdrop image tags.
            ///   - ParentLogoImageTag: The parent logo image tag.
            ///   - SeriesStudio: The series studio.
            ///   - PrimaryImageItemId:
            ///   - PrimaryImageTag:
            ///   - ParentThumbItemId: The parent thumb item id.
            ///   - ParentThumbImageTag: The parent thumb image tag.
            ///   - Chapters: The chapters.
            ///   - LocationType:
            ///   - MediaType: The type of the media.
            ///   - EndDate: The end date.
            ///   - LockedFields: The locked fields.
            ///   - LockData: A value indicating whether \[enable internet providers\].
            ///   - Width:
            ///   - Height:
            ///   - CameraMake:
            ///   - CameraModel:
            ///   - Software:
            ///   - ExposureTime:
            ///   - FocalLength:
            ///   - ImageOrientation:
            ///   - Aperture:
            ///   - ShutterSpeed:
            ///   - Latitude:
            ///   - Longitude:
            ///   - Altitude:
            ///   - IsoSpeedRating:
            ///   - SeriesTimerId: The series timer identifier.
            ///   - ChannelPrimaryImageTag: The channel primary image tag.
            ///   - StartDate: The start date of the recording, in UTC.
            ///   - CompletionPercentage: The completion percentage.
            ///   - IsRepeat: A value indicating whether this instance is repeat.
            ///   - IsNew:
            ///   - EpisodeTitle: The episode title.
            ///   - IsMovie: A value indicating whether this instance is movie.
            ///   - IsSports: A value indicating whether this instance is sports.
            ///   - IsSeries: A value indicating whether this instance is series.
            ///   - IsLive: A value indicating whether this instance is live.
            ///   - IsNews: A value indicating whether this instance is news.
            ///   - IsKids: A value indicating whether this instance is kids.
            ///   - IsPremiere: A value indicating whether this instance is premiere.
            ///   - TimerType:
            ///   - Disabled:
            ///   - ManagementId:
            ///   - TimerId: The timer identifier.
            ///   - CurrentProgram:
            ///   - MovieCount:
            ///   - SeriesCount:
            ///   - AlbumCount:
            ///   - SongCount:
            ///   - MusicVideoCount:
            ///   - Subviews:
            ///   - ListingsProviderId:
            ///   - ListingsChannelId:
            ///   - ListingsPath:
            ///   - ListingsId:
            ///   - ListingsChannelName:
            ///   - ListingsChannelNumber:
            ///   - AffiliateCallSign:
            internal init(
                Name: Swift.String? = nil,
                OriginalTitle: Swift.String? = nil,
                ServerId: Swift.String? = nil,
                Id: Swift.String? = nil,
                Guid: Swift.String? = nil,
                Etag: Swift.String? = nil,
                Prefix: Swift.String? = nil,
                PlaylistItemId: Swift.String? = nil,
                DateCreated: Foundation.Date? = nil,
                ExtraType: Swift.String? = nil,
                SortIndexNumber: Swift.Int32? = nil,
                SortParentIndexNumber: Swift.Int32? = nil,
                CanDelete: Swift.Bool? = nil,
                CanDownload: Swift.Bool? = nil,
                CanEditItems: Swift.Bool? = nil,
                SupportsResume: Swift.Bool? = nil,
                PresentationUniqueKey: Swift.String? = nil,
                PreferredMetadataLanguage: Swift.String? = nil,
                PreferredMetadataCountryCode: Swift.String? = nil,
                SupportsSync: Swift.Bool? = nil,
                SyncStatus: Components.Schemas.SyncJobItemStatus? = nil,
                CanManageAccess: Swift.Bool? = nil,
                CanLeaveContent: Swift.Bool? = nil,
                CanMakePublic: Swift.Bool? = nil,
                Container: Swift.String? = nil,
                SortName: Swift.String? = nil,
                ForcedSortName: Swift.String? = nil,
                Video3DFormat: Components.Schemas.Video3DFormat? = nil,
                PremiereDate: Foundation.Date? = nil,
                ExternalUrls: [Components.Schemas.ExternalUrl]? = nil,
                MediaSources: [Components.Schemas.MediaSourceInfo]? = nil,
                CriticRating: Swift.Float? = nil,
                GameSystemId: Swift.Int64? = nil,
                AsSeries: Swift.Bool? = nil,
                GameSystem: Swift.String? = nil,
                ProductionLocations: [Swift.String]? = nil,
                Path: Swift.String? = nil,
                OfficialRating: Swift.String? = nil,
                CustomRating: Swift.String? = nil,
                ChannelId: Swift.String? = nil,
                ChannelName: Swift.String? = nil,
                Overview: Swift.String? = nil,
                Taglines: [Swift.String]? = nil,
                Genres: [Swift.String]? = nil,
                CommunityRating: Swift.Float? = nil,
                RunTimeTicks: Swift.Int64? = nil,
                Size: Swift.Int64? = nil,
                FileName: Swift.String? = nil,
                Bitrate: Swift.Int32? = nil,
                ProductionYear: Swift.Int32? = nil,
                Number: Swift.String? = nil,
                ChannelNumber: Swift.String? = nil,
                IndexNumber: Swift.Int32? = nil,
                IndexNumberEnd: Swift.Int32? = nil,
                ParentIndexNumber: Swift.Int32? = nil,
                RemoteTrailers: [Components.Schemas.MediaUrl]? = nil,
                ProviderIds: Components.Schemas.ProviderIdDictionary? = nil,
                IsFolder: Swift.Bool? = nil,
                ParentId: Swift.String? = nil,
                _Type: Swift.String? = nil,
                People: [Components.Schemas.BaseItemPerson]? = nil,
                Studios: [Components.Schemas.NameLongIdPair]? = nil,
                GenreItems: [Components.Schemas.NameLongIdPair]? = nil,
                TagItems: [Components.Schemas.NameLongIdPair]? = nil,
                ParentLogoItemId: Swift.String? = nil,
                ParentBackdropItemId: Swift.String? = nil,
                ParentBackdropImageTags: [Swift.String]? = nil,
                LocalTrailerCount: Swift.Int32? = nil,
                UserData: Components.Schemas.UserItemDataDto? = nil,
                RecursiveItemCount: Swift.Int32? = nil,
                ChildCount: Swift.Int32? = nil,
                SeriesName: Swift.String? = nil,
                SeriesId: Swift.String? = nil,
                SeasonId: Swift.String? = nil,
                SpecialFeatureCount: Swift.Int32? = nil,
                DisplayPreferencesId: Swift.String? = nil,
                Status: Swift.String? = nil,
                AirDays: [Components.Schemas.DayOfWeek]? = nil,
                Tags: [Swift.String]? = nil,
                PrimaryImageAspectRatio: Swift.Double? = nil,
                Artists: [Swift.String]? = nil,
                ArtistItems: [Components.Schemas.NameIdPair]? = nil,
                Composers: [Components.Schemas.NameIdPair]? = nil,
                Album: Swift.String? = nil,
                CollectionType: Swift.String? = nil,
                DisplayOrder: Swift.String? = nil,
                AlbumId: Swift.String? = nil,
                AlbumPrimaryImageTag: Swift.String? = nil,
                SeriesPrimaryImageTag: Swift.String? = nil,
                AlbumArtist: Swift.String? = nil,
                AlbumArtists: [Components.Schemas.NameIdPair]? = nil,
                SeasonName: Swift.String? = nil,
                MediaStreams: [Components.Schemas.MediaStream]? = nil,
                PartCount: Swift.Int32? = nil,
                ImageTags: Components.Schemas.BaseItemDto.ImageTagsPayload? = nil,
                BackdropImageTags: [Swift.String]? = nil,
                ParentLogoImageTag: Swift.String? = nil,
                SeriesStudio: Swift.String? = nil,
                PrimaryImageItemId: Swift.String? = nil,
                PrimaryImageTag: Swift.String? = nil,
                ParentThumbItemId: Swift.String? = nil,
                ParentThumbImageTag: Swift.String? = nil,
                Chapters: [Components.Schemas.ChapterInfo]? = nil,
                LocationType: Components.Schemas.LocationType? = nil,
                MediaType: Swift.String? = nil,
                EndDate: Foundation.Date? = nil,
                LockedFields: [Components.Schemas.MetadataFields]? = nil,
                LockData: Swift.Bool? = nil,
                Width: Swift.Int32? = nil,
                Height: Swift.Int32? = nil,
                CameraMake: Swift.String? = nil,
                CameraModel: Swift.String? = nil,
                Software: Swift.String? = nil,
                ExposureTime: Swift.Double? = nil,
                FocalLength: Swift.Double? = nil,
                ImageOrientation: Components.Schemas.Drawing_period_ImageOrientation? = nil,
                Aperture: Swift.Double? = nil,
                ShutterSpeed: Swift.Double? = nil,
                Latitude: Swift.Double? = nil,
                Longitude: Swift.Double? = nil,
                Altitude: Swift.Double? = nil,
                IsoSpeedRating: Swift.Int32? = nil,
                SeriesTimerId: Swift.String? = nil,
                ChannelPrimaryImageTag: Swift.String? = nil,
                StartDate: Foundation.Date? = nil,
                CompletionPercentage: Swift.Double? = nil,
                IsRepeat: Swift.Bool? = nil,
                IsNew: Swift.Bool? = nil,
                EpisodeTitle: Swift.String? = nil,
                IsMovie: Swift.Bool? = nil,
                IsSports: Swift.Bool? = nil,
                IsSeries: Swift.Bool? = nil,
                IsLive: Swift.Bool? = nil,
                IsNews: Swift.Bool? = nil,
                IsKids: Swift.Bool? = nil,
                IsPremiere: Swift.Bool? = nil,
                TimerType: Components.Schemas.LiveTv_period_TimerType? = nil,
                Disabled: Swift.Bool? = nil,
                ManagementId: Swift.String? = nil,
                TimerId: Swift.String? = nil,
                CurrentProgram: Components.Schemas.BaseItemDto? = nil,
                MovieCount: Swift.Int32? = nil,
                SeriesCount: Swift.Int32? = nil,
                AlbumCount: Swift.Int32? = nil,
                SongCount: Swift.Int32? = nil,
                MusicVideoCount: Swift.Int32? = nil,
                Subviews: [Swift.String]? = nil,
                ListingsProviderId: Swift.String? = nil,
                ListingsChannelId: Swift.String? = nil,
                ListingsPath: Swift.String? = nil,
                ListingsId: Swift.String? = nil,
                ListingsChannelName: Swift.String? = nil,
                ListingsChannelNumber: Swift.String? = nil,
                AffiliateCallSign: Swift.String? = nil
            ) {
                storage = .init(value: .init(
                    Name: Name,
                    OriginalTitle: OriginalTitle,
                    ServerId: ServerId,
                    Id: Id,
                    Guid: Guid,
                    Etag: Etag,
                    Prefix: Prefix,
                    PlaylistItemId: PlaylistItemId,
                    DateCreated: DateCreated,
                    ExtraType: ExtraType,
                    SortIndexNumber: SortIndexNumber,
                    SortParentIndexNumber: SortParentIndexNumber,
                    CanDelete: CanDelete,
                    CanDownload: CanDownload,
                    CanEditItems: CanEditItems,
                    SupportsResume: SupportsResume,
                    PresentationUniqueKey: PresentationUniqueKey,
                    PreferredMetadataLanguage: PreferredMetadataLanguage,
                    PreferredMetadataCountryCode: PreferredMetadataCountryCode,
                    SupportsSync: SupportsSync,
                    SyncStatus: SyncStatus,
                    CanManageAccess: CanManageAccess,
                    CanLeaveContent: CanLeaveContent,
                    CanMakePublic: CanMakePublic,
                    Container: Container,
                    SortName: SortName,
                    ForcedSortName: ForcedSortName,
                    Video3DFormat: Video3DFormat,
                    PremiereDate: PremiereDate,
                    ExternalUrls: ExternalUrls,
                    MediaSources: MediaSources,
                    CriticRating: CriticRating,
                    GameSystemId: GameSystemId,
                    AsSeries: AsSeries,
                    GameSystem: GameSystem,
                    ProductionLocations: ProductionLocations,
                    Path: Path,
                    OfficialRating: OfficialRating,
                    CustomRating: CustomRating,
                    ChannelId: ChannelId,
                    ChannelName: ChannelName,
                    Overview: Overview,
                    Taglines: Taglines,
                    Genres: Genres,
                    CommunityRating: CommunityRating,
                    RunTimeTicks: RunTimeTicks,
                    Size: Size,
                    FileName: FileName,
                    Bitrate: Bitrate,
                    ProductionYear: ProductionYear,
                    Number: Number,
                    ChannelNumber: ChannelNumber,
                    IndexNumber: IndexNumber,
                    IndexNumberEnd: IndexNumberEnd,
                    ParentIndexNumber: ParentIndexNumber,
                    RemoteTrailers: RemoteTrailers,
                    ProviderIds: ProviderIds,
                    IsFolder: IsFolder,
                    ParentId: ParentId,
                    _Type: _Type,
                    People: People,
                    Studios: Studios,
                    GenreItems: GenreItems,
                    TagItems: TagItems,
                    ParentLogoItemId: ParentLogoItemId,
                    ParentBackdropItemId: ParentBackdropItemId,
                    ParentBackdropImageTags: ParentBackdropImageTags,
                    LocalTrailerCount: LocalTrailerCount,
                    UserData: UserData,
                    RecursiveItemCount: RecursiveItemCount,
                    ChildCount: ChildCount,
                    SeriesName: SeriesName,
                    SeriesId: SeriesId,
                    SeasonId: SeasonId,
                    SpecialFeatureCount: SpecialFeatureCount,
                    DisplayPreferencesId: DisplayPreferencesId,
                    Status: Status,
                    AirDays: AirDays,
                    Tags: Tags,
                    PrimaryImageAspectRatio: PrimaryImageAspectRatio,
                    Artists: Artists,
                    ArtistItems: ArtistItems,
                    Composers: Composers,
                    Album: Album,
                    CollectionType: CollectionType,
                    DisplayOrder: DisplayOrder,
                    AlbumId: AlbumId,
                    AlbumPrimaryImageTag: AlbumPrimaryImageTag,
                    SeriesPrimaryImageTag: SeriesPrimaryImageTag,
                    AlbumArtist: AlbumArtist,
                    AlbumArtists: AlbumArtists,
                    SeasonName: SeasonName,
                    MediaStreams: MediaStreams,
                    PartCount: PartCount,
                    ImageTags: ImageTags,
                    BackdropImageTags: BackdropImageTags,
                    ParentLogoImageTag: ParentLogoImageTag,
                    SeriesStudio: SeriesStudio,
                    PrimaryImageItemId: PrimaryImageItemId,
                    PrimaryImageTag: PrimaryImageTag,
                    ParentThumbItemId: ParentThumbItemId,
                    ParentThumbImageTag: ParentThumbImageTag,
                    Chapters: Chapters,
                    LocationType: LocationType,
                    MediaType: MediaType,
                    EndDate: EndDate,
                    LockedFields: LockedFields,
                    LockData: LockData,
                    Width: Width,
                    Height: Height,
                    CameraMake: CameraMake,
                    CameraModel: CameraModel,
                    Software: Software,
                    ExposureTime: ExposureTime,
                    FocalLength: FocalLength,
                    ImageOrientation: ImageOrientation,
                    Aperture: Aperture,
                    ShutterSpeed: ShutterSpeed,
                    Latitude: Latitude,
                    Longitude: Longitude,
                    Altitude: Altitude,
                    IsoSpeedRating: IsoSpeedRating,
                    SeriesTimerId: SeriesTimerId,
                    ChannelPrimaryImageTag: ChannelPrimaryImageTag,
                    StartDate: StartDate,
                    CompletionPercentage: CompletionPercentage,
                    IsRepeat: IsRepeat,
                    IsNew: IsNew,
                    EpisodeTitle: EpisodeTitle,
                    IsMovie: IsMovie,
                    IsSports: IsSports,
                    IsSeries: IsSeries,
                    IsLive: IsLive,
                    IsNews: IsNews,
                    IsKids: IsKids,
                    IsPremiere: IsPremiere,
                    TimerType: TimerType,
                    Disabled: Disabled,
                    ManagementId: ManagementId,
                    TimerId: TimerId,
                    CurrentProgram: CurrentProgram,
                    MovieCount: MovieCount,
                    SeriesCount: SeriesCount,
                    AlbumCount: AlbumCount,
                    SongCount: SongCount,
                    MusicVideoCount: MusicVideoCount,
                    Subviews: Subviews,
                    ListingsProviderId: ListingsProviderId,
                    ListingsChannelId: ListingsChannelId,
                    ListingsPath: ListingsPath,
                    ListingsId: ListingsId,
                    ListingsChannelName: ListingsChannelName,
                    ListingsChannelNumber: ListingsChannelNumber,
                    AffiliateCallSign: AffiliateCallSign
                ))
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case OriginalTitle
                case ServerId
                case Id
                case Guid
                case Etag
                case Prefix
                case PlaylistItemId
                case DateCreated
                case ExtraType
                case SortIndexNumber
                case SortParentIndexNumber
                case CanDelete
                case CanDownload
                case CanEditItems
                case SupportsResume
                case PresentationUniqueKey
                case PreferredMetadataLanguage
                case PreferredMetadataCountryCode
                case SupportsSync
                case SyncStatus
                case CanManageAccess
                case CanLeaveContent
                case CanMakePublic
                case Container
                case SortName
                case ForcedSortName
                case Video3DFormat
                case PremiereDate
                case ExternalUrls
                case MediaSources
                case CriticRating
                case GameSystemId
                case AsSeries
                case GameSystem
                case ProductionLocations
                case Path
                case OfficialRating
                case CustomRating
                case ChannelId
                case ChannelName
                case Overview
                case Taglines
                case Genres
                case CommunityRating
                case RunTimeTicks
                case Size
                case FileName
                case Bitrate
                case ProductionYear
                case Number
                case ChannelNumber
                case IndexNumber
                case IndexNumberEnd
                case ParentIndexNumber
                case RemoteTrailers
                case ProviderIds
                case IsFolder
                case ParentId
                case _Type = "Type"
                case People
                case Studios
                case GenreItems
                case TagItems
                case ParentLogoItemId
                case ParentBackdropItemId
                case ParentBackdropImageTags
                case LocalTrailerCount
                case UserData
                case RecursiveItemCount
                case ChildCount
                case SeriesName
                case SeriesId
                case SeasonId
                case SpecialFeatureCount
                case DisplayPreferencesId
                case Status
                case AirDays
                case Tags
                case PrimaryImageAspectRatio
                case Artists
                case ArtistItems
                case Composers
                case Album
                case CollectionType
                case DisplayOrder
                case AlbumId
                case AlbumPrimaryImageTag
                case SeriesPrimaryImageTag
                case AlbumArtist
                case AlbumArtists
                case SeasonName
                case MediaStreams
                case PartCount
                case ImageTags
                case BackdropImageTags
                case ParentLogoImageTag
                case SeriesStudio
                case PrimaryImageItemId
                case PrimaryImageTag
                case ParentThumbItemId
                case ParentThumbImageTag
                case Chapters
                case LocationType
                case MediaType
                case EndDate
                case LockedFields
                case LockData
                case Width
                case Height
                case CameraMake
                case CameraModel
                case Software
                case ExposureTime
                case FocalLength
                case ImageOrientation
                case Aperture
                case ShutterSpeed
                case Latitude
                case Longitude
                case Altitude
                case IsoSpeedRating
                case SeriesTimerId
                case ChannelPrimaryImageTag
                case StartDate
                case CompletionPercentage
                case IsRepeat
                case IsNew
                case EpisodeTitle
                case IsMovie
                case IsSports
                case IsSeries
                case IsLive
                case IsNews
                case IsKids
                case IsPremiere
                case TimerType
                case Disabled
                case ManagementId
                case TimerId
                case CurrentProgram
                case MovieCount
                case SeriesCount
                case AlbumCount
                case SongCount
                case MusicVideoCount
                case Subviews
                case ListingsProviderId
                case ListingsChannelId
                case ListingsPath
                case ListingsId
                case ListingsChannelName
                case ListingsChannelNumber
                case AffiliateCallSign
            }
            internal init(from decoder: any Decoder) throws {
                storage = try .init(from: decoder)
            }
            internal func encode(to encoder: any Encoder) throws {
                try storage.encode(to: encoder)
            }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// The name.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Name`.
                var Name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/OriginalTitle`.
                var OriginalTitle: Swift.String?
                /// The server identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ServerId`.
                var ServerId: Swift.String?
                /// The id.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Id`.
                var Id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Guid`.
                var Guid: Swift.String?
                /// The etag.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Etag`.
                var Etag: Swift.String?
                /// The Prefix.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Prefix`.
                var Prefix: Swift.String?
                /// The playlist item identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PlaylistItemId`.
                var PlaylistItemId: Swift.String?
                /// The date created.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/DateCreated`.
                var DateCreated: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ExtraType`.
                var ExtraType: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SortIndexNumber`.
                var SortIndexNumber: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SortParentIndexNumber`.
                var SortParentIndexNumber: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanDelete`.
                var CanDelete: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanDownload`.
                var CanDownload: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanEditItems`.
                var CanEditItems: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SupportsResume`.
                var SupportsResume: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PresentationUniqueKey`.
                var PresentationUniqueKey: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PreferredMetadataLanguage`.
                var PreferredMetadataLanguage: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PreferredMetadataCountryCode`.
                var PreferredMetadataCountryCode: Swift.String?
                /// A value indicating whether \[supports synchronize\].
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SupportsSync`.
                var SupportsSync: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SyncStatus`.
                var SyncStatus: Components.Schemas.SyncJobItemStatus?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanManageAccess`.
                var CanManageAccess: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanLeaveContent`.
                var CanLeaveContent: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CanMakePublic`.
                var CanMakePublic: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Container`.
                var Container: Swift.String?
                /// The name of the sort.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SortName`.
                var SortName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ForcedSortName`.
                var ForcedSortName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Video3DFormat`.
                var Video3DFormat: Components.Schemas.Video3DFormat?
                /// The premiere date.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PremiereDate`.
                var PremiereDate: Foundation.Date?
                /// The external urls.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ExternalUrls`.
                var ExternalUrls: [Components.Schemas.ExternalUrl]?
                /// The media versions.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/MediaSources`.
                var MediaSources: [Components.Schemas.MediaSourceInfo]?
                /// The critic rating.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CriticRating`.
                var CriticRating: Swift.Float?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/GameSystemId`.
                var GameSystemId: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AsSeries`.
                var AsSeries: Swift.Bool?
                /// The game system.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/GameSystem`.
                var GameSystem: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ProductionLocations`.
                var ProductionLocations: [Swift.String]?
                /// The path.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Path`.
                var Path: Swift.String?
                /// The official rating.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/OfficialRating`.
                var OfficialRating: Swift.String?
                /// The custom rating.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CustomRating`.
                var CustomRating: Swift.String?
                /// The channel identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelId`.
                var ChannelId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelName`.
                var ChannelName: Swift.String?
                /// The overview.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Overview`.
                var Overview: Swift.String?
                /// The taglines.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Taglines`.
                var Taglines: [Swift.String]?
                /// The genres.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Genres`.
                var Genres: [Swift.String]?
                /// The community rating.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CommunityRating`.
                var CommunityRating: Swift.Float?
                /// The run time ticks.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/RunTimeTicks`.
                var RunTimeTicks: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Size`.
                var Size: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/FileName`.
                var FileName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Bitrate`.
                var Bitrate: Swift.Int32?
                /// The production year.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ProductionYear`.
                var ProductionYear: Swift.Int32?
                /// The number.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Number`.
                var Number: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelNumber`.
                var ChannelNumber: Swift.String?
                /// The index number.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IndexNumber`.
                var IndexNumber: Swift.Int32?
                /// The index number end.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IndexNumberEnd`.
                var IndexNumberEnd: Swift.Int32?
                /// The parent index number.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentIndexNumber`.
                var ParentIndexNumber: Swift.Int32?
                /// The trailer urls.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/RemoteTrailers`.
                var RemoteTrailers: [Components.Schemas.MediaUrl]?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ProviderIds`.
                var ProviderIds: Components.Schemas.ProviderIdDictionary?
                /// A value indicating whether this instance is folder.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsFolder`.
                var IsFolder: Swift.Bool?
                /// The parent id.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentId`.
                var ParentId: Swift.String?
                /// The type.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Type`.
                var _Type: Swift.String?
                /// The people.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/People`.
                var People: [Components.Schemas.BaseItemPerson]?
                /// The studios.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Studios`.
                var Studios: [Components.Schemas.NameLongIdPair]?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/GenreItems`.
                var GenreItems: [Components.Schemas.NameLongIdPair]?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/TagItems`.
                var TagItems: [Components.Schemas.NameLongIdPair]?
                /// If the item does not have a logo, this will hold the Id of the Parent that has one.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentLogoItemId`.
                var ParentLogoItemId: Swift.String?
                /// If the item does not have any backdrops, this will hold the Id of the Parent that has one.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentBackdropItemId`.
                var ParentBackdropItemId: Swift.String?
                /// The parent backdrop image tags.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentBackdropImageTags`.
                var ParentBackdropImageTags: [Swift.String]?
                /// The local trailer count.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/LocalTrailerCount`.
                var LocalTrailerCount: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/UserData`.
                var UserData: Components.Schemas.UserItemDataDto?
                /// The recursive item count.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/RecursiveItemCount`.
                var RecursiveItemCount: Swift.Int32?
                /// The child count.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChildCount`.
                var ChildCount: Swift.Int32?
                /// The name of the series.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesName`.
                var SeriesName: Swift.String?
                /// The series id.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesId`.
                var SeriesId: Swift.String?
                /// The season identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeasonId`.
                var SeasonId: Swift.String?
                /// The special feature count.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SpecialFeatureCount`.
                var SpecialFeatureCount: Swift.Int32?
                /// The display preferences id.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/DisplayPreferencesId`.
                var DisplayPreferencesId: Swift.String?
                /// The status.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Status`.
                var Status: Swift.String?
                /// The air days.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AirDays`.
                var AirDays: [Components.Schemas.DayOfWeek]?
                /// The tags.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Tags`.
                var Tags: [Swift.String]?
                /// The primary image aspect ratio, after image enhancements.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PrimaryImageAspectRatio`.
                var PrimaryImageAspectRatio: Swift.Double?
                /// The artists.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Artists`.
                var Artists: [Swift.String]?
                /// The artist items.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ArtistItems`.
                var ArtistItems: [Components.Schemas.NameIdPair]?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Composers`.
                var Composers: [Components.Schemas.NameIdPair]?
                /// The album.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Album`.
                var Album: Swift.String?
                /// The type of the collection.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CollectionType`.
                var CollectionType: Swift.String?
                /// The display order.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/DisplayOrder`.
                var DisplayOrder: Swift.String?
                /// The album id.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumId`.
                var AlbumId: Swift.String?
                /// The album image tag.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumPrimaryImageTag`.
                var AlbumPrimaryImageTag: Swift.String?
                /// The series primary image tag.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesPrimaryImageTag`.
                var SeriesPrimaryImageTag: Swift.String?
                /// The album artist.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumArtist`.
                var AlbumArtist: Swift.String?
                /// The album artists.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumArtists`.
                var AlbumArtists: [Components.Schemas.NameIdPair]?
                /// The name of the season.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeasonName`.
                var SeasonName: Swift.String?
                /// The media streams.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/MediaStreams`.
                var MediaStreams: [Components.Schemas.MediaStream]?
                /// The part count.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PartCount`.
                var PartCount: Swift.Int32?
                /// The image tags.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ImageTags`.
                struct ImageTagsPayload: Codable, Hashable, Sendable {
                    /// A container of undocumented properties.
                    internal var additionalProperties: [String: Swift.String]
                    /// Creates a new `ImageTagsPayload`.
                    ///
                    /// - Parameters:
                    ///   - additionalProperties: A container of undocumented properties.
                    internal init(additionalProperties: [String: Swift.String] = .init()) {
                        self.additionalProperties = additionalProperties
                    }
                    internal init(from decoder: any Decoder) throws {
                        additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                    }
                    internal func encode(to encoder: any Encoder) throws {
                        try encoder.encodeAdditionalProperties(additionalProperties)
                    }
                }
                /// The image tags.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ImageTags`.
                var ImageTags: Components.Schemas.BaseItemDto.ImageTagsPayload?
                /// The backdrop image tags.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/BackdropImageTags`.
                var BackdropImageTags: [Swift.String]?
                /// The parent logo image tag.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentLogoImageTag`.
                var ParentLogoImageTag: Swift.String?
                /// The series studio.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesStudio`.
                var SeriesStudio: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PrimaryImageItemId`.
                var PrimaryImageItemId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/PrimaryImageTag`.
                var PrimaryImageTag: Swift.String?
                /// The parent thumb item id.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentThumbItemId`.
                var ParentThumbItemId: Swift.String?
                /// The parent thumb image tag.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ParentThumbImageTag`.
                var ParentThumbImageTag: Swift.String?
                /// The chapters.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Chapters`.
                var Chapters: [Components.Schemas.ChapterInfo]?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/LocationType`.
                var LocationType: Components.Schemas.LocationType?
                /// The type of the media.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/MediaType`.
                var MediaType: Swift.String?
                /// The end date.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/EndDate`.
                var EndDate: Foundation.Date?
                /// The locked fields.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/LockedFields`.
                var LockedFields: [Components.Schemas.MetadataFields]?
                /// A value indicating whether \[enable internet providers\].
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/LockData`.
                var LockData: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Width`.
                var Width: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Height`.
                var Height: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CameraMake`.
                var CameraMake: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CameraModel`.
                var CameraModel: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Software`.
                var Software: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ExposureTime`.
                var ExposureTime: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/FocalLength`.
                var FocalLength: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ImageOrientation`.
                var ImageOrientation: Components.Schemas.Drawing_period_ImageOrientation?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Aperture`.
                var Aperture: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ShutterSpeed`.
                var ShutterSpeed: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Latitude`.
                var Latitude: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Longitude`.
                var Longitude: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Altitude`.
                var Altitude: Swift.Double?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsoSpeedRating`.
                var IsoSpeedRating: Swift.Int32?
                /// The series timer identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesTimerId`.
                var SeriesTimerId: Swift.String?
                /// The channel primary image tag.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ChannelPrimaryImageTag`.
                var ChannelPrimaryImageTag: Swift.String?
                /// The start date of the recording, in UTC.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/StartDate`.
                var StartDate: Foundation.Date?
                /// The completion percentage.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CompletionPercentage`.
                var CompletionPercentage: Swift.Double?
                /// A value indicating whether this instance is repeat.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsRepeat`.
                var IsRepeat: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsNew`.
                var IsNew: Swift.Bool?
                /// The episode title.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/EpisodeTitle`.
                var EpisodeTitle: Swift.String?
                /// A value indicating whether this instance is movie.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsMovie`.
                var IsMovie: Swift.Bool?
                /// A value indicating whether this instance is sports.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsSports`.
                var IsSports: Swift.Bool?
                /// A value indicating whether this instance is series.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsSeries`.
                var IsSeries: Swift.Bool?
                /// A value indicating whether this instance is live.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsLive`.
                var IsLive: Swift.Bool?
                /// A value indicating whether this instance is news.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsNews`.
                var IsNews: Swift.Bool?
                /// A value indicating whether this instance is kids.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsKids`.
                var IsKids: Swift.Bool?
                /// A value indicating whether this instance is premiere.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/IsPremiere`.
                var IsPremiere: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/TimerType`.
                var TimerType: Components.Schemas.LiveTv_period_TimerType?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Disabled`.
                var Disabled: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ManagementId`.
                var ManagementId: Swift.String?
                /// The timer identifier.
                ///
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/TimerId`.
                var TimerId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/CurrentProgram`.
                var CurrentProgram: Components.Schemas.BaseItemDto?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/MovieCount`.
                var MovieCount: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SeriesCount`.
                var SeriesCount: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AlbumCount`.
                var AlbumCount: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/SongCount`.
                var SongCount: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/MusicVideoCount`.
                var MusicVideoCount: Swift.Int32?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/Subviews`.
                var Subviews: [Swift.String]?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsProviderId`.
                var ListingsProviderId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsChannelId`.
                var ListingsChannelId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsPath`.
                var ListingsPath: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsId`.
                var ListingsId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsChannelName`.
                var ListingsChannelName: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/ListingsChannelNumber`.
                var ListingsChannelNumber: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BaseItemDto/AffiliateCallSign`.
                var AffiliateCallSign: Swift.String?
                init(
                    Name: Swift.String? = nil,
                    OriginalTitle: Swift.String? = nil,
                    ServerId: Swift.String? = nil,
                    Id: Swift.String? = nil,
                    Guid: Swift.String? = nil,
                    Etag: Swift.String? = nil,
                    Prefix: Swift.String? = nil,
                    PlaylistItemId: Swift.String? = nil,
                    DateCreated: Foundation.Date? = nil,
                    ExtraType: Swift.String? = nil,
                    SortIndexNumber: Swift.Int32? = nil,
                    SortParentIndexNumber: Swift.Int32? = nil,
                    CanDelete: Swift.Bool? = nil,
                    CanDownload: Swift.Bool? = nil,
                    CanEditItems: Swift.Bool? = nil,
                    SupportsResume: Swift.Bool? = nil,
                    PresentationUniqueKey: Swift.String? = nil,
                    PreferredMetadataLanguage: Swift.String? = nil,
                    PreferredMetadataCountryCode: Swift.String? = nil,
                    SupportsSync: Swift.Bool? = nil,
                    SyncStatus: Components.Schemas.SyncJobItemStatus? = nil,
                    CanManageAccess: Swift.Bool? = nil,
                    CanLeaveContent: Swift.Bool? = nil,
                    CanMakePublic: Swift.Bool? = nil,
                    Container: Swift.String? = nil,
                    SortName: Swift.String? = nil,
                    ForcedSortName: Swift.String? = nil,
                    Video3DFormat: Components.Schemas.Video3DFormat? = nil,
                    PremiereDate: Foundation.Date? = nil,
                    ExternalUrls: [Components.Schemas.ExternalUrl]? = nil,
                    MediaSources: [Components.Schemas.MediaSourceInfo]? = nil,
                    CriticRating: Swift.Float? = nil,
                    GameSystemId: Swift.Int64? = nil,
                    AsSeries: Swift.Bool? = nil,
                    GameSystem: Swift.String? = nil,
                    ProductionLocations: [Swift.String]? = nil,
                    Path: Swift.String? = nil,
                    OfficialRating: Swift.String? = nil,
                    CustomRating: Swift.String? = nil,
                    ChannelId: Swift.String? = nil,
                    ChannelName: Swift.String? = nil,
                    Overview: Swift.String? = nil,
                    Taglines: [Swift.String]? = nil,
                    Genres: [Swift.String]? = nil,
                    CommunityRating: Swift.Float? = nil,
                    RunTimeTicks: Swift.Int64? = nil,
                    Size: Swift.Int64? = nil,
                    FileName: Swift.String? = nil,
                    Bitrate: Swift.Int32? = nil,
                    ProductionYear: Swift.Int32? = nil,
                    Number: Swift.String? = nil,
                    ChannelNumber: Swift.String? = nil,
                    IndexNumber: Swift.Int32? = nil,
                    IndexNumberEnd: Swift.Int32? = nil,
                    ParentIndexNumber: Swift.Int32? = nil,
                    RemoteTrailers: [Components.Schemas.MediaUrl]? = nil,
                    ProviderIds: Components.Schemas.ProviderIdDictionary? = nil,
                    IsFolder: Swift.Bool? = nil,
                    ParentId: Swift.String? = nil,
                    _Type: Swift.String? = nil,
                    People: [Components.Schemas.BaseItemPerson]? = nil,
                    Studios: [Components.Schemas.NameLongIdPair]? = nil,
                    GenreItems: [Components.Schemas.NameLongIdPair]? = nil,
                    TagItems: [Components.Schemas.NameLongIdPair]? = nil,
                    ParentLogoItemId: Swift.String? = nil,
                    ParentBackdropItemId: Swift.String? = nil,
                    ParentBackdropImageTags: [Swift.String]? = nil,
                    LocalTrailerCount: Swift.Int32? = nil,
                    UserData: Components.Schemas.UserItemDataDto? = nil,
                    RecursiveItemCount: Swift.Int32? = nil,
                    ChildCount: Swift.Int32? = nil,
                    SeriesName: Swift.String? = nil,
                    SeriesId: Swift.String? = nil,
                    SeasonId: Swift.String? = nil,
                    SpecialFeatureCount: Swift.Int32? = nil,
                    DisplayPreferencesId: Swift.String? = nil,
                    Status: Swift.String? = nil,
                    AirDays: [Components.Schemas.DayOfWeek]? = nil,
                    Tags: [Swift.String]? = nil,
                    PrimaryImageAspectRatio: Swift.Double? = nil,
                    Artists: [Swift.String]? = nil,
                    ArtistItems: [Components.Schemas.NameIdPair]? = nil,
                    Composers: [Components.Schemas.NameIdPair]? = nil,
                    Album: Swift.String? = nil,
                    CollectionType: Swift.String? = nil,
                    DisplayOrder: Swift.String? = nil,
                    AlbumId: Swift.String? = nil,
                    AlbumPrimaryImageTag: Swift.String? = nil,
                    SeriesPrimaryImageTag: Swift.String? = nil,
                    AlbumArtist: Swift.String? = nil,
                    AlbumArtists: [Components.Schemas.NameIdPair]? = nil,
                    SeasonName: Swift.String? = nil,
                    MediaStreams: [Components.Schemas.MediaStream]? = nil,
                    PartCount: Swift.Int32? = nil,
                    ImageTags: Components.Schemas.BaseItemDto.ImageTagsPayload? = nil,
                    BackdropImageTags: [Swift.String]? = nil,
                    ParentLogoImageTag: Swift.String? = nil,
                    SeriesStudio: Swift.String? = nil,
                    PrimaryImageItemId: Swift.String? = nil,
                    PrimaryImageTag: Swift.String? = nil,
                    ParentThumbItemId: Swift.String? = nil,
                    ParentThumbImageTag: Swift.String? = nil,
                    Chapters: [Components.Schemas.ChapterInfo]? = nil,
                    LocationType: Components.Schemas.LocationType? = nil,
                    MediaType: Swift.String? = nil,
                    EndDate: Foundation.Date? = nil,
                    LockedFields: [Components.Schemas.MetadataFields]? = nil,
                    LockData: Swift.Bool? = nil,
                    Width: Swift.Int32? = nil,
                    Height: Swift.Int32? = nil,
                    CameraMake: Swift.String? = nil,
                    CameraModel: Swift.String? = nil,
                    Software: Swift.String? = nil,
                    ExposureTime: Swift.Double? = nil,
                    FocalLength: Swift.Double? = nil,
                    ImageOrientation: Components.Schemas.Drawing_period_ImageOrientation? = nil,
                    Aperture: Swift.Double? = nil,
                    ShutterSpeed: Swift.Double? = nil,
                    Latitude: Swift.Double? = nil,
                    Longitude: Swift.Double? = nil,
                    Altitude: Swift.Double? = nil,
                    IsoSpeedRating: Swift.Int32? = nil,
                    SeriesTimerId: Swift.String? = nil,
                    ChannelPrimaryImageTag: Swift.String? = nil,
                    StartDate: Foundation.Date? = nil,
                    CompletionPercentage: Swift.Double? = nil,
                    IsRepeat: Swift.Bool? = nil,
                    IsNew: Swift.Bool? = nil,
                    EpisodeTitle: Swift.String? = nil,
                    IsMovie: Swift.Bool? = nil,
                    IsSports: Swift.Bool? = nil,
                    IsSeries: Swift.Bool? = nil,
                    IsLive: Swift.Bool? = nil,
                    IsNews: Swift.Bool? = nil,
                    IsKids: Swift.Bool? = nil,
                    IsPremiere: Swift.Bool? = nil,
                    TimerType: Components.Schemas.LiveTv_period_TimerType? = nil,
                    Disabled: Swift.Bool? = nil,
                    ManagementId: Swift.String? = nil,
                    TimerId: Swift.String? = nil,
                    CurrentProgram: Components.Schemas.BaseItemDto? = nil,
                    MovieCount: Swift.Int32? = nil,
                    SeriesCount: Swift.Int32? = nil,
                    AlbumCount: Swift.Int32? = nil,
                    SongCount: Swift.Int32? = nil,
                    MusicVideoCount: Swift.Int32? = nil,
                    Subviews: [Swift.String]? = nil,
                    ListingsProviderId: Swift.String? = nil,
                    ListingsChannelId: Swift.String? = nil,
                    ListingsPath: Swift.String? = nil,
                    ListingsId: Swift.String? = nil,
                    ListingsChannelName: Swift.String? = nil,
                    ListingsChannelNumber: Swift.String? = nil,
                    AffiliateCallSign: Swift.String? = nil
                ) {
                    self.Name = Name
                    self.OriginalTitle = OriginalTitle
                    self.ServerId = ServerId
                    self.Id = Id
                    self.Guid = Guid
                    self.Etag = Etag
                    self.Prefix = Prefix
                    self.PlaylistItemId = PlaylistItemId
                    self.DateCreated = DateCreated
                    self.ExtraType = ExtraType
                    self.SortIndexNumber = SortIndexNumber
                    self.SortParentIndexNumber = SortParentIndexNumber
                    self.CanDelete = CanDelete
                    self.CanDownload = CanDownload
                    self.CanEditItems = CanEditItems
                    self.SupportsResume = SupportsResume
                    self.PresentationUniqueKey = PresentationUniqueKey
                    self.PreferredMetadataLanguage = PreferredMetadataLanguage
                    self.PreferredMetadataCountryCode = PreferredMetadataCountryCode
                    self.SupportsSync = SupportsSync
                    self.SyncStatus = SyncStatus
                    self.CanManageAccess = CanManageAccess
                    self.CanLeaveContent = CanLeaveContent
                    self.CanMakePublic = CanMakePublic
                    self.Container = Container
                    self.SortName = SortName
                    self.ForcedSortName = ForcedSortName
                    self.Video3DFormat = Video3DFormat
                    self.PremiereDate = PremiereDate
                    self.ExternalUrls = ExternalUrls
                    self.MediaSources = MediaSources
                    self.CriticRating = CriticRating
                    self.GameSystemId = GameSystemId
                    self.AsSeries = AsSeries
                    self.GameSystem = GameSystem
                    self.ProductionLocations = ProductionLocations
                    self.Path = Path
                    self.OfficialRating = OfficialRating
                    self.CustomRating = CustomRating
                    self.ChannelId = ChannelId
                    self.ChannelName = ChannelName
                    self.Overview = Overview
                    self.Taglines = Taglines
                    self.Genres = Genres
                    self.CommunityRating = CommunityRating
                    self.RunTimeTicks = RunTimeTicks
                    self.Size = Size
                    self.FileName = FileName
                    self.Bitrate = Bitrate
                    self.ProductionYear = ProductionYear
                    self.Number = Number
                    self.ChannelNumber = ChannelNumber
                    self.IndexNumber = IndexNumber
                    self.IndexNumberEnd = IndexNumberEnd
                    self.ParentIndexNumber = ParentIndexNumber
                    self.RemoteTrailers = RemoteTrailers
                    self.ProviderIds = ProviderIds
                    self.IsFolder = IsFolder
                    self.ParentId = ParentId
                    self._Type = _Type
                    self.People = People
                    self.Studios = Studios
                    self.GenreItems = GenreItems
                    self.TagItems = TagItems
                    self.ParentLogoItemId = ParentLogoItemId
                    self.ParentBackdropItemId = ParentBackdropItemId
                    self.ParentBackdropImageTags = ParentBackdropImageTags
                    self.LocalTrailerCount = LocalTrailerCount
                    self.UserData = UserData
                    self.RecursiveItemCount = RecursiveItemCount
                    self.ChildCount = ChildCount
                    self.SeriesName = SeriesName
                    self.SeriesId = SeriesId
                    self.SeasonId = SeasonId
                    self.SpecialFeatureCount = SpecialFeatureCount
                    self.DisplayPreferencesId = DisplayPreferencesId
                    self.Status = Status
                    self.AirDays = AirDays
                    self.Tags = Tags
                    self.PrimaryImageAspectRatio = PrimaryImageAspectRatio
                    self.Artists = Artists
                    self.ArtistItems = ArtistItems
                    self.Composers = Composers
                    self.Album = Album
                    self.CollectionType = CollectionType
                    self.DisplayOrder = DisplayOrder
                    self.AlbumId = AlbumId
                    self.AlbumPrimaryImageTag = AlbumPrimaryImageTag
                    self.SeriesPrimaryImageTag = SeriesPrimaryImageTag
                    self.AlbumArtist = AlbumArtist
                    self.AlbumArtists = AlbumArtists
                    self.SeasonName = SeasonName
                    self.MediaStreams = MediaStreams
                    self.PartCount = PartCount
                    self.ImageTags = ImageTags
                    self.BackdropImageTags = BackdropImageTags
                    self.ParentLogoImageTag = ParentLogoImageTag
                    self.SeriesStudio = SeriesStudio
                    self.PrimaryImageItemId = PrimaryImageItemId
                    self.PrimaryImageTag = PrimaryImageTag
                    self.ParentThumbItemId = ParentThumbItemId
                    self.ParentThumbImageTag = ParentThumbImageTag
                    self.Chapters = Chapters
                    self.LocationType = LocationType
                    self.MediaType = MediaType
                    self.EndDate = EndDate
                    self.LockedFields = LockedFields
                    self.LockData = LockData
                    self.Width = Width
                    self.Height = Height
                    self.CameraMake = CameraMake
                    self.CameraModel = CameraModel
                    self.Software = Software
                    self.ExposureTime = ExposureTime
                    self.FocalLength = FocalLength
                    self.ImageOrientation = ImageOrientation
                    self.Aperture = Aperture
                    self.ShutterSpeed = ShutterSpeed
                    self.Latitude = Latitude
                    self.Longitude = Longitude
                    self.Altitude = Altitude
                    self.IsoSpeedRating = IsoSpeedRating
                    self.SeriesTimerId = SeriesTimerId
                    self.ChannelPrimaryImageTag = ChannelPrimaryImageTag
                    self.StartDate = StartDate
                    self.CompletionPercentage = CompletionPercentage
                    self.IsRepeat = IsRepeat
                    self.IsNew = IsNew
                    self.EpisodeTitle = EpisodeTitle
                    self.IsMovie = IsMovie
                    self.IsSports = IsSports
                    self.IsSeries = IsSeries
                    self.IsLive = IsLive
                    self.IsNews = IsNews
                    self.IsKids = IsKids
                    self.IsPremiere = IsPremiere
                    self.TimerType = TimerType
                    self.Disabled = Disabled
                    self.ManagementId = ManagementId
                    self.TimerId = TimerId
                    self.CurrentProgram = CurrentProgram
                    self.MovieCount = MovieCount
                    self.SeriesCount = SeriesCount
                    self.AlbumCount = AlbumCount
                    self.SongCount = SongCount
                    self.MusicVideoCount = MusicVideoCount
                    self.Subviews = Subviews
                    self.ListingsProviderId = ListingsProviderId
                    self.ListingsChannelId = ListingsChannelId
                    self.ListingsPath = ListingsPath
                    self.ListingsId = ListingsId
                    self.ListingsChannelName = ListingsChannelName
                    self.ListingsChannelNumber = ListingsChannelNumber
                    self.AffiliateCallSign = AffiliateCallSign
                }
                typealias CodingKeys = Components.Schemas.BaseItemDto.CodingKeys
            }
        }
        /// - Remark: Generated from `#/components/schemas/SyncJobItemStatus`.
        internal enum SyncJobItemStatus: String, Codable, Hashable, Sendable, CaseIterable {
            case Queued = "Queued"
            case Converting = "Converting"
            case ReadyToTransfer = "ReadyToTransfer"
            case Transferring = "Transferring"
            case Synced = "Synced"
            case Failed = "Failed"
        }
        /// - Remark: Generated from `#/components/schemas/Video3DFormat`.
        internal enum Video3DFormat: String, Codable, Hashable, Sendable, CaseIterable {
            case HalfSideBySide = "HalfSideBySide"
            case FullSideBySide = "FullSideBySide"
            case FullTopAndBottom = "FullTopAndBottom"
            case HalfTopAndBottom = "HalfTopAndBottom"
            case MVC = "MVC"
        }
        /// - Remark: Generated from `#/components/schemas/ExternalUrl`.
        internal struct ExternalUrl: Codable, Hashable, Sendable {
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalUrl/Name`.
            internal var Name: Swift.String?
            /// The type of the item.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalUrl/Url`.
            internal var Url: Swift.String?
            /// Creates a new `ExternalUrl`.
            ///
            /// - Parameters:
            ///   - Name: The name.
            ///   - Url: The type of the item.
            internal init(
                Name: Swift.String? = nil,
                Url: Swift.String? = nil
            ) {
                self.Name = Name
                self.Url = Url
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case Url
            }
        }
        /// - Remark: Generated from `#/components/schemas/MediaSourceInfo`.
        internal struct MediaSourceInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Protocol`.
            internal var _Protocol: Components.Schemas.MediaProtocol?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Path`.
            internal var Path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/EncoderPath`.
            internal var EncoderPath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/EncoderProtocol`.
            internal var EncoderProtocol: Components.Schemas.MediaProtocol?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Type`.
            internal var _Type: Components.Schemas.MediaSourceType?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/ProbePath`.
            internal var ProbePath: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/ProbeProtocol`.
            internal var ProbeProtocol: Components.Schemas.MediaProtocol?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Container`.
            internal var Container: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Size`.
            internal var Size: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/SortName`.
            internal var SortName: Swift.String?
            /// Differentiate internet url vs local network
            ///
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/IsRemote`.
            internal var IsRemote: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/HasMixedProtocols`.
            internal var HasMixedProtocols: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/RunTimeTicks`.
            internal var RunTimeTicks: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/ContainerStartTimeTicks`.
            internal var ContainerStartTimeTicks: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/SupportsTranscoding`.
            internal var SupportsTranscoding: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/TrancodeLiveStartIndex`.
            internal var TrancodeLiveStartIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/WallClockStart`.
            internal var WallClockStart: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/SupportsDirectStream`.
            internal var SupportsDirectStream: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/SupportsDirectPlay`.
            internal var SupportsDirectPlay: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/IsInfiniteStream`.
            internal var IsInfiniteStream: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/RequiresOpening`.
            internal var RequiresOpening: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/OpenToken`.
            internal var OpenToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/RequiresClosing`.
            internal var RequiresClosing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/LiveStreamId`.
            internal var LiveStreamId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/BufferMs`.
            @available(*, deprecated)
            internal var BufferMs: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/RequiresLooping`.
            internal var RequiresLooping: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/SupportsProbing`.
            @available(*, deprecated)
            internal var SupportsProbing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Video3DFormat`.
            internal var Video3DFormat: Components.Schemas.Video3DFormat?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/MediaStreams`.
            internal var MediaStreams: [Components.Schemas.MediaStream]?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Formats`.
            internal var Formats: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Bitrate`.
            internal var Bitrate: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/Timestamp`.
            internal var Timestamp: Components.Schemas.TransportStreamTimestamp?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/RequiredHttpHeaders`.
            internal struct RequiredHttpHeadersPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `RequiredHttpHeadersPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/RequiredHttpHeaders`.
            internal var RequiredHttpHeaders: Components.Schemas.MediaSourceInfo.RequiredHttpHeadersPayload?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/DirectStreamUrl`.
            internal var DirectStreamUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/AddApiKeyToDirectStreamUrl`.
            internal var AddApiKeyToDirectStreamUrl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/TranscodingUrl`.
            internal var TranscodingUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/TranscodingSubProtocol`.
            internal var TranscodingSubProtocol: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/TranscodingContainer`.
            internal var TranscodingContainer: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/AnalyzeDurationMs`.
            @available(*, deprecated)
            internal var AnalyzeDurationMs: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/ReadAtNativeFramerate`.
            @available(*, deprecated)
            internal var ReadAtNativeFramerate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/DefaultAudioStreamIndex`.
            internal var DefaultAudioStreamIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/DefaultSubtitleStreamIndex`.
            internal var DefaultSubtitleStreamIndex: Swift.Int32?
            /// Used only by our Windows app. Not used by Emby Server. The id of the item that this mediasource belongs to, if there is one Also used by Emby for Kodi
            ///
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/ItemId`.
            internal var ItemId: Swift.String?
            /// Used only by our Windows app. Not used by Emby Server.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaSourceInfo/ServerId`.
            internal var ServerId: Swift.String?
            /// Creates a new `MediaSourceInfo`.
            ///
            /// - Parameters:
            ///   - _Protocol:
            ///   - Id:
            ///   - Path:
            ///   - EncoderPath:
            ///   - EncoderProtocol:
            ///   - _Type:
            ///   - ProbePath:
            ///   - ProbeProtocol:
            ///   - Container:
            ///   - Size:
            ///   - Name:
            ///   - SortName:
            ///   - IsRemote: Differentiate internet url vs local network
            ///   - HasMixedProtocols:
            ///   - RunTimeTicks:
            ///   - ContainerStartTimeTicks:
            ///   - SupportsTranscoding:
            ///   - TrancodeLiveStartIndex:
            ///   - WallClockStart:
            ///   - SupportsDirectStream:
            ///   - SupportsDirectPlay:
            ///   - IsInfiniteStream:
            ///   - RequiresOpening:
            ///   - OpenToken:
            ///   - RequiresClosing:
            ///   - LiveStreamId:
            ///   - BufferMs:
            ///   - RequiresLooping:
            ///   - SupportsProbing:
            ///   - Video3DFormat:
            ///   - MediaStreams:
            ///   - Formats:
            ///   - Bitrate:
            ///   - Timestamp:
            ///   - RequiredHttpHeaders:
            ///   - DirectStreamUrl:
            ///   - AddApiKeyToDirectStreamUrl:
            ///   - TranscodingUrl:
            ///   - TranscodingSubProtocol:
            ///   - TranscodingContainer:
            ///   - AnalyzeDurationMs:
            ///   - ReadAtNativeFramerate:
            ///   - DefaultAudioStreamIndex:
            ///   - DefaultSubtitleStreamIndex:
            ///   - ItemId: Used only by our Windows app. Not used by Emby Server. The id of the item that this mediasource belongs to, if there is one Also used by Emby for Kodi
            ///   - ServerId: Used only by our Windows app. Not used by Emby Server.
            internal init(
                _Protocol: Components.Schemas.MediaProtocol? = nil,
                Id: Swift.String? = nil,
                Path: Swift.String? = nil,
                EncoderPath: Swift.String? = nil,
                EncoderProtocol: Components.Schemas.MediaProtocol? = nil,
                _Type: Components.Schemas.MediaSourceType? = nil,
                ProbePath: Swift.String? = nil,
                ProbeProtocol: Components.Schemas.MediaProtocol? = nil,
                Container: Swift.String? = nil,
                Size: Swift.Int64? = nil,
                Name: Swift.String? = nil,
                SortName: Swift.String? = nil,
                IsRemote: Swift.Bool? = nil,
                HasMixedProtocols: Swift.Bool? = nil,
                RunTimeTicks: Swift.Int64? = nil,
                ContainerStartTimeTicks: Swift.Int64? = nil,
                SupportsTranscoding: Swift.Bool? = nil,
                TrancodeLiveStartIndex: Swift.Int32? = nil,
                WallClockStart: Foundation.Date? = nil,
                SupportsDirectStream: Swift.Bool? = nil,
                SupportsDirectPlay: Swift.Bool? = nil,
                IsInfiniteStream: Swift.Bool? = nil,
                RequiresOpening: Swift.Bool? = nil,
                OpenToken: Swift.String? = nil,
                RequiresClosing: Swift.Bool? = nil,
                LiveStreamId: Swift.String? = nil,
                BufferMs: Swift.Int32? = nil,
                RequiresLooping: Swift.Bool? = nil,
                SupportsProbing: Swift.Bool? = nil,
                Video3DFormat: Components.Schemas.Video3DFormat? = nil,
                MediaStreams: [Components.Schemas.MediaStream]? = nil,
                Formats: [Swift.String]? = nil,
                Bitrate: Swift.Int32? = nil,
                Timestamp: Components.Schemas.TransportStreamTimestamp? = nil,
                RequiredHttpHeaders: Components.Schemas.MediaSourceInfo.RequiredHttpHeadersPayload? = nil,
                DirectStreamUrl: Swift.String? = nil,
                AddApiKeyToDirectStreamUrl: Swift.Bool? = nil,
                TranscodingUrl: Swift.String? = nil,
                TranscodingSubProtocol: Swift.String? = nil,
                TranscodingContainer: Swift.String? = nil,
                AnalyzeDurationMs: Swift.Int32? = nil,
                ReadAtNativeFramerate: Swift.Bool? = nil,
                DefaultAudioStreamIndex: Swift.Int32? = nil,
                DefaultSubtitleStreamIndex: Swift.Int32? = nil,
                ItemId: Swift.String? = nil,
                ServerId: Swift.String? = nil
            ) {
                self._Protocol = _Protocol
                self.Id = Id
                self.Path = Path
                self.EncoderPath = EncoderPath
                self.EncoderProtocol = EncoderProtocol
                self._Type = _Type
                self.ProbePath = ProbePath
                self.ProbeProtocol = ProbeProtocol
                self.Container = Container
                self.Size = Size
                self.Name = Name
                self.SortName = SortName
                self.IsRemote = IsRemote
                self.HasMixedProtocols = HasMixedProtocols
                self.RunTimeTicks = RunTimeTicks
                self.ContainerStartTimeTicks = ContainerStartTimeTicks
                self.SupportsTranscoding = SupportsTranscoding
                self.TrancodeLiveStartIndex = TrancodeLiveStartIndex
                self.WallClockStart = WallClockStart
                self.SupportsDirectStream = SupportsDirectStream
                self.SupportsDirectPlay = SupportsDirectPlay
                self.IsInfiniteStream = IsInfiniteStream
                self.RequiresOpening = RequiresOpening
                self.OpenToken = OpenToken
                self.RequiresClosing = RequiresClosing
                self.LiveStreamId = LiveStreamId
                self.BufferMs = BufferMs
                self.RequiresLooping = RequiresLooping
                self.SupportsProbing = SupportsProbing
                self.Video3DFormat = Video3DFormat
                self.MediaStreams = MediaStreams
                self.Formats = Formats
                self.Bitrate = Bitrate
                self.Timestamp = Timestamp
                self.RequiredHttpHeaders = RequiredHttpHeaders
                self.DirectStreamUrl = DirectStreamUrl
                self.AddApiKeyToDirectStreamUrl = AddApiKeyToDirectStreamUrl
                self.TranscodingUrl = TranscodingUrl
                self.TranscodingSubProtocol = TranscodingSubProtocol
                self.TranscodingContainer = TranscodingContainer
                self.AnalyzeDurationMs = AnalyzeDurationMs
                self.ReadAtNativeFramerate = ReadAtNativeFramerate
                self.DefaultAudioStreamIndex = DefaultAudioStreamIndex
                self.DefaultSubtitleStreamIndex = DefaultSubtitleStreamIndex
                self.ItemId = ItemId
                self.ServerId = ServerId
            }
            internal enum CodingKeys: String, CodingKey {
                case _Protocol = "Protocol"
                case Id
                case Path
                case EncoderPath
                case EncoderProtocol
                case _Type = "Type"
                case ProbePath
                case ProbeProtocol
                case Container
                case Size
                case Name
                case SortName
                case IsRemote
                case HasMixedProtocols
                case RunTimeTicks
                case ContainerStartTimeTicks
                case SupportsTranscoding
                case TrancodeLiveStartIndex
                case WallClockStart
                case SupportsDirectStream
                case SupportsDirectPlay
                case IsInfiniteStream
                case RequiresOpening
                case OpenToken
                case RequiresClosing
                case LiveStreamId
                case BufferMs
                case RequiresLooping
                case SupportsProbing
                case Video3DFormat
                case MediaStreams
                case Formats
                case Bitrate
                case Timestamp
                case RequiredHttpHeaders
                case DirectStreamUrl
                case AddApiKeyToDirectStreamUrl
                case TranscodingUrl
                case TranscodingSubProtocol
                case TranscodingContainer
                case AnalyzeDurationMs
                case ReadAtNativeFramerate
                case DefaultAudioStreamIndex
                case DefaultSubtitleStreamIndex
                case ItemId
                case ServerId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MediaProtocol`.
        internal enum MediaProtocol: String, Codable, Hashable, Sendable, CaseIterable {
            case File = "File"
            case Http = "Http"
            case Rtmp = "Rtmp"
            case Rtsp = "Rtsp"
            case Udp = "Udp"
            case Rtp = "Rtp"
            case Ftp = "Ftp"
            case Mms = "Mms"
        }
        /// - Remark: Generated from `#/components/schemas/MediaSourceType`.
        internal enum MediaSourceType: String, Codable, Hashable, Sendable, CaseIterable {
            case Default = "Default"
            case Grouping = "Grouping"
            case Placeholder = "Placeholder"
        }
        /// MediaStream information.
        ///
        ///
        /// MediaStream itens are typically included in a `MediaBrowser.Model.Dto.MediaSourceInfo` object.
        ///
        ///
        /// `MediaBrowser.Model.Dto.MediaSourceInfo.MediaStreams`
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MediaStream`.
        internal struct MediaStream: Codable, Hashable, Sendable {
            /// The codec.
            ///
            /// Probe Field: `codec_name`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`  
            /// Related Enums: `T:Emby.Media.Model.Enums.VideoMediaTypes`, `Emby.Media.Model.Enums.AudioMediaTypes`, `Emby.Media.Model.Enums.SubtitleMediaTypes`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Codec`.
            internal var Codec: Swift.String?
            /// The codec tag.
            ///
            /// Probe Field: `codec_tag`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/CodecTag`.
            internal var CodecTag: Swift.String?
            /// The language.
            ///
            /// Probe Field: `tags["language"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Language`.
            internal var Language: Swift.String?
            /// The color transfer characteristics.
            ///
            /// Probe Field: `color_transfer`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enum: `Emby.Media.Model.Enums.ColorTransfers`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ColorTransfer`.
            internal var ColorTransfer: Swift.String?
            /// The chromaticity coordinates of the source primaries.
            ///
            /// Probe Field: `color_primaries`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enum: `Emby.Media.Model.Enums.ColorPrimaries`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ColorPrimaries`.
            internal var ColorPrimaries: Swift.String?
            /// The YUV colorspace type.
            ///
            /// Probe Field: `color_space`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enum: `Emby.Media.Model.Enums.ColorSpaces`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ColorSpace`.
            internal var ColorSpace: Swift.String?
            /// The comment.
            ///
            /// Probe Field: `tags["comment"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Comment`.
            internal var Comment: Swift.String?
            /// The start time of the stream.
            ///
            /// Probe Field: `start_time`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.  
            /// Actual type: `System.TimeSpan`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/StreamStartTimeTicks`.
            internal var StreamStartTimeTicks: Swift.Int64?
            /// The time\-base.
            ///
            /// Probe Field: `time_base`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/TimeBase`.
            internal var TimeBase: Swift.String?
            /// The title.
            ///
            /// Probe Field: `tags["title"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Title`.
            internal var Title: Swift.String?
            /// The extradata.
            ///
            /// Probe Field: `extradata`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// Currently, this value is only parsed for subtitle streams with codec `Emby.Media.Model.Enums.SubtitleMediaTypes.dvb_teletext`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Extradata`.
            internal var Extradata: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaStream/VideoRange`.
            internal var VideoRange: Swift.String?
            /// The display title.
            ///
            /// Custom property set by the application.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/DisplayTitle`.
            internal var DisplayTitle: Swift.String?
            /// The display language.
            ///
            /// Custom property set by the application.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/DisplayLanguage`.
            internal var DisplayLanguage: Swift.String?
            /// The nal length size.
            ///
            /// Probe Field: `nal_length_size`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video` of type `Emby.Media.Model.Enums.VideoMediaTypes.h264`.  
            /// Actual type: `System.Int32`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/NalLengthSize`.
            internal var NalLengthSize: Swift.String?
            /// A value indicating whether this instance is interlaced.
            ///
            /// Probe Field: `field_order` \!\= `progressive`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsInterlaced`.
            internal var IsInterlaced: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsAVC`.
            @available(*, deprecated)
            internal var IsAVC: Swift.Bool?
            /// The channel layout.
            ///
            /// Probe Field: `channel_layout`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`  
            /// Related Enum: `MediaBrowser.Model.Entities.MediaStream.ChannelLayout`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ChannelLayout`.
            internal var ChannelLayout: Swift.String?
            /// The bit rate.
            ///
            /// Probe Field: `bit_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
            ///
            /// THIS VALUE IS PROCESSED BY CUSTOM LOGIC AND DOES NOT NECESSARILY MATCH FFPROBE RESULTS\!
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/BitRate`.
            internal var BitRate: Swift.Int32?
            /// The bit depth.
            ///
            /// Probe Field: `bits_per_sample` or `bits_per_raw_sample`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/BitDepth`.
            internal var BitDepth: Swift.Int32?
            /// The reference frames.
            ///
            /// Probe Field: `refs`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/RefFrames`.
            internal var RefFrames: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/MediaStream/Rotation`.
            internal var Rotation: Swift.Int32?
            /// The audio channel count.
            ///
            /// Probe Field: `channels`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Channels`.
            internal var Channels: Swift.Int32?
            /// The sample rate.
            ///
            /// Probe Field: `sample_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`  
            /// Related Enum: `Emby.Media.Model.Enums.SampleRates`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/SampleRate`.
            internal var SampleRate: Swift.Int32?
            /// A value indicating whether this instance is default.
            ///
            /// Probe Field: `disposition["default"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsDefault`.
            internal var IsDefault: Swift.Bool?
            /// A value indicating whether this instance is forced.
            ///
            /// Probe Field: `disposition["forced"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsForced`.
            internal var IsForced: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsHearingImpaired`.
            internal var IsHearingImpaired: Swift.Bool?
            /// The height.
            ///
            /// Probe Field: `height`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Height`.
            internal var Height: Swift.Int32?
            /// The width.
            ///
            /// Probe Field: `width`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Width`.
            internal var Width: Swift.Int32?
            /// The average frame rate..
            ///
            /// Probe Field: `avg_frame_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/AverageFrameRate`.
            internal var AverageFrameRate: Swift.Float?
            /// The real frame rate..
            ///
            /// Probe Field: `r_frame_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/RealFrameRate`.
            internal var RealFrameRate: Swift.Float?
            /// The profile.
            ///
            /// Probe Field: `profile`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`  
            /// Related Enums: `Emby.Media.Model.Enums.AacProfiles`, `Emby.Media.Model.Enums.AvcProfiles`, `Emby.Media.Model.Enums.H263Profiles`, `Emby.Media.Model.Enums.HevcProfiles`, `Emby.Media.Model.Enums.Mpeg2Profiles`,`Emby.Media.Model.Enums.Vc1Profiles`, `Emby.Media.Model.Enums.Mpeg4Profiles`, `Emby.Media.Model.Enums.Vp8Profiles`, `Emby.Media.Model.Enums.Vp9Profiles`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Profile`.
            internal var Profile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaStream/Type`.
            internal var _Type: Components.Schemas.MediaStreamType?
            /// The aspect ratio.
            ///
            /// Probe Field: `display_aspect_ratio`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/AspectRatio`.
            internal var AspectRatio: Swift.String?
            /// The index of the stream inside its container.
            ///
            /// Probe Field: `index`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Index`.
            internal var Index: Swift.Int32?
            /// A value indicating whether this instance is external.
            ///
            /// Custom property set by the application.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsExternal`.
            internal var IsExternal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaStream/DeliveryMethod`.
            internal var DeliveryMethod: Components.Schemas.SubtitleDeliveryMethod?
            /// The delivery URL.
            ///
            /// Custom property set by the application.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/DeliveryUrl`.
            internal var DeliveryUrl: Swift.String?
            /// A value indicating whether this instance is external URL.
            ///
            /// Custom property set by the application.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsExternalUrl`.
            internal var IsExternalUrl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsTextSubtitleStream`.
            internal var IsTextSubtitleStream: Swift.Bool?
            /// A value indicating whether \[supports external stream\].
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/SupportsExternalStream`.
            internal var SupportsExternalStream: Swift.Bool?
            /// The filename.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Path`.
            internal var Path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaStream/Protocol`.
            internal var _Protocol: Components.Schemas.MediaProtocol?
            /// The pixel format.
            ///
            /// Probe Field: `pix_fmt`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `MediaBrowser.Model.Entities.MediaStream.PixelFormat`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/PixelFormat`.
            internal var PixelFormat: Swift.String?
            /// The codec level.
            ///
            /// Probe Field: `level`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enums: `Emby.Media.Model.Enums.AvcLevels`, `Emby.Media.Model.Enums.H263Levels`, `Emby.Media.Model.Enums.HevcLevels`, `Emby.Media.Model.Enums.Mpeg2Levels`,`Emby.Media.Model.Enums.Vc1Levels`, `Emby.Media.Model.Enums.Mpeg4Levels`, `Emby.Media.Model.Enums.Vp8Levels`, `Emby.Media.Model.Enums.Vp9Levels`.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/Level`.
            internal var Level: Swift.Double?
            /// A value indicating whether this instance is anamorphic.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/IsAnamorphic`.
            internal var IsAnamorphic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/MediaStream/ExtendedVideoType`.
            internal var ExtendedVideoType: Components.Schemas.ExtendedVideoTypes?
            /// - Remark: Generated from `#/components/schemas/MediaStream/ExtendedVideoSubType`.
            internal var ExtendedVideoSubType: Components.Schemas.ExtendedVideoSubTypes?
            /// The extended video sub\-type description.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ExtendedVideoSubTypeDescription`.
            internal var ExtendedVideoSubTypeDescription: Swift.String?
            /// Used only by our Windows app. Not used by Emby Server.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ItemId`.
            internal var ItemId: Swift.String?
            /// Used only by our Windows app. Not used by Emby Server.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/ServerId`.
            internal var ServerId: Swift.String?
            /// The size of the attachment.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/AttachmentSize`.
            internal var AttachmentSize: Swift.Int32?
            /// The type of the MIME.
            ///
            /// - Remark: Generated from `#/components/schemas/MediaStream/MimeType`.
            internal var MimeType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaStream/SubtitleLocationType`.
            internal var SubtitleLocationType: Components.Schemas.SubtitleLocationType?
            /// Creates a new `MediaStream`.
            ///
            /// - Parameters:
            ///   - Codec: The codec.
            ///
            /// Probe Field: `codec_name`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`  
            /// Related Enums: `T:Emby.Media.Model.Enums.VideoMediaTypes`, `Emby.Media.Model.Enums.AudioMediaTypes`, `Emby.Media.Model.Enums.SubtitleMediaTypes`.
            ///   - CodecTag: The codec tag.
            ///
            /// Probe Field: `codec_tag`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - Language: The language.
            ///
            /// Probe Field: `tags["language"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - ColorTransfer: The color transfer characteristics.
            ///
            /// Probe Field: `color_transfer`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enum: `Emby.Media.Model.Enums.ColorTransfers`.
            ///   - ColorPrimaries: The chromaticity coordinates of the source primaries.
            ///
            /// Probe Field: `color_primaries`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enum: `Emby.Media.Model.Enums.ColorPrimaries`.
            ///   - ColorSpace: The YUV colorspace type.
            ///
            /// Probe Field: `color_space`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enum: `Emby.Media.Model.Enums.ColorSpaces`.
            ///   - Comment: The comment.
            ///
            /// Probe Field: `tags["comment"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - StreamStartTimeTicks: The start time of the stream.
            ///
            /// Probe Field: `start_time`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.  
            /// Actual type: `System.TimeSpan`.
            ///   - TimeBase: The time\-base.
            ///
            /// Probe Field: `time_base`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///   - Title: The title.
            ///
            /// Probe Field: `tags["title"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - Extradata: The extradata.
            ///
            /// Probe Field: `extradata`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///
            /// Currently, this value is only parsed for subtitle streams with codec `Emby.Media.Model.Enums.SubtitleMediaTypes.dvb_teletext`.
            ///   - VideoRange:
            ///   - DisplayTitle: The display title.
            ///
            /// Custom property set by the application.
            ///   - DisplayLanguage: The display language.
            ///
            /// Custom property set by the application.
            ///   - NalLengthSize: The nal length size.
            ///
            /// Probe Field: `nal_length_size`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video` of type `Emby.Media.Model.Enums.VideoMediaTypes.h264`.  
            /// Actual type: `System.Int32`.
            ///   - IsInterlaced: A value indicating whether this instance is interlaced.
            ///
            /// Probe Field: `field_order` \!\= `progressive`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///   - IsAVC:
            ///   - ChannelLayout: The channel layout.
            ///
            /// Probe Field: `channel_layout`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`  
            /// Related Enum: `MediaBrowser.Model.Entities.MediaStream.ChannelLayout`.
            ///   - BitRate: The bit rate.
            ///
            /// Probe Field: `bit_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
            ///
            /// THIS VALUE IS PROCESSED BY CUSTOM LOGIC AND DOES NOT NECESSARILY MATCH FFPROBE RESULTS\!
            ///   - BitDepth: The bit depth.
            ///
            /// Probe Field: `bits_per_sample` or `bits_per_raw_sample`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
            ///   - RefFrames: The reference frames.
            ///
            /// Probe Field: `refs`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///   - Rotation:
            ///   - Channels: The audio channel count.
            ///
            /// Probe Field: `channels`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`.
            ///   - SampleRate: The sample rate.
            ///
            /// Probe Field: `sample_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`  
            /// Related Enum: `Emby.Media.Model.Enums.SampleRates`.
            ///   - IsDefault: A value indicating whether this instance is default.
            ///
            /// Probe Field: `disposition["default"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - IsForced: A value indicating whether this instance is forced.
            ///
            /// Probe Field: `disposition["forced"]`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - IsHearingImpaired:
            ///   - Height: The height.
            ///
            /// Probe Field: `height`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///   - Width: The width.
            ///
            /// Probe Field: `width`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.
            ///   - AverageFrameRate: The average frame rate..
            ///
            /// Probe Field: `avg_frame_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///   - RealFrameRate: The real frame rate..
            ///
            /// Probe Field: `r_frame_rate`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///   - Profile: The profile.
            ///
            /// Probe Field: `profile`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`  
            /// Related Enums: `Emby.Media.Model.Enums.AacProfiles`, `Emby.Media.Model.Enums.AvcProfiles`, `Emby.Media.Model.Enums.H263Profiles`, `Emby.Media.Model.Enums.HevcProfiles`, `Emby.Media.Model.Enums.Mpeg2Profiles`,`Emby.Media.Model.Enums.Vc1Profiles`, `Emby.Media.Model.Enums.Mpeg4Profiles`, `Emby.Media.Model.Enums.Vp8Profiles`, `Emby.Media.Model.Enums.Vp9Profiles`.
            ///   - _Type:
            ///   - AspectRatio: The aspect ratio.
            ///
            /// Probe Field: `display_aspect_ratio`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `Emby.Media.Model.Types.Rational`.
            ///   - Index: The index of the stream inside its container.
            ///
            /// Probe Field: `index`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.
            ///   - IsExternal: A value indicating whether this instance is external.
            ///
            /// Custom property set by the application.
            ///   - DeliveryMethod:
            ///   - DeliveryUrl: The delivery URL.
            ///
            /// Custom property set by the application.
            ///   - IsExternalUrl: A value indicating whether this instance is external URL.
            ///
            /// Custom property set by the application.
            ///   - IsTextSubtitleStream:
            ///   - SupportsExternalStream: A value indicating whether \[supports external stream\].
            ///   - Path: The filename.
            ///   - _Protocol:
            ///   - PixelFormat: The pixel format.
            ///
            /// Probe Field: `pix_fmt`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.  
            /// Actual type: `MediaBrowser.Model.Entities.MediaStream.PixelFormat`.
            ///   - Level: The codec level.
            ///
            /// Probe Field: `level`  
            /// Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`  
            /// Related Enums: `Emby.Media.Model.Enums.AvcLevels`, `Emby.Media.Model.Enums.H263Levels`, `Emby.Media.Model.Enums.HevcLevels`, `Emby.Media.Model.Enums.Mpeg2Levels`,`Emby.Media.Model.Enums.Vc1Levels`, `Emby.Media.Model.Enums.Mpeg4Levels`, `Emby.Media.Model.Enums.Vp8Levels`, `Emby.Media.Model.Enums.Vp9Levels`.
            ///   - IsAnamorphic: A value indicating whether this instance is anamorphic.
            ///   - ExtendedVideoType:
            ///   - ExtendedVideoSubType:
            ///   - ExtendedVideoSubTypeDescription: The extended video sub\-type description.
            ///   - ItemId: Used only by our Windows app. Not used by Emby Server.
            ///   - ServerId: Used only by our Windows app. Not used by Emby Server.
            ///   - AttachmentSize: The size of the attachment.
            ///   - MimeType: The type of the MIME.
            ///   - SubtitleLocationType:
            internal init(
                Codec: Swift.String? = nil,
                CodecTag: Swift.String? = nil,
                Language: Swift.String? = nil,
                ColorTransfer: Swift.String? = nil,
                ColorPrimaries: Swift.String? = nil,
                ColorSpace: Swift.String? = nil,
                Comment: Swift.String? = nil,
                StreamStartTimeTicks: Swift.Int64? = nil,
                TimeBase: Swift.String? = nil,
                Title: Swift.String? = nil,
                Extradata: Swift.String? = nil,
                VideoRange: Swift.String? = nil,
                DisplayTitle: Swift.String? = nil,
                DisplayLanguage: Swift.String? = nil,
                NalLengthSize: Swift.String? = nil,
                IsInterlaced: Swift.Bool? = nil,
                IsAVC: Swift.Bool? = nil,
                ChannelLayout: Swift.String? = nil,
                BitRate: Swift.Int32? = nil,
                BitDepth: Swift.Int32? = nil,
                RefFrames: Swift.Int32? = nil,
                Rotation: Swift.Int32? = nil,
                Channels: Swift.Int32? = nil,
                SampleRate: Swift.Int32? = nil,
                IsDefault: Swift.Bool? = nil,
                IsForced: Swift.Bool? = nil,
                IsHearingImpaired: Swift.Bool? = nil,
                Height: Swift.Int32? = nil,
                Width: Swift.Int32? = nil,
                AverageFrameRate: Swift.Float? = nil,
                RealFrameRate: Swift.Float? = nil,
                Profile: Swift.String? = nil,
                _Type: Components.Schemas.MediaStreamType? = nil,
                AspectRatio: Swift.String? = nil,
                Index: Swift.Int32? = nil,
                IsExternal: Swift.Bool? = nil,
                DeliveryMethod: Components.Schemas.SubtitleDeliveryMethod? = nil,
                DeliveryUrl: Swift.String? = nil,
                IsExternalUrl: Swift.Bool? = nil,
                IsTextSubtitleStream: Swift.Bool? = nil,
                SupportsExternalStream: Swift.Bool? = nil,
                Path: Swift.String? = nil,
                _Protocol: Components.Schemas.MediaProtocol? = nil,
                PixelFormat: Swift.String? = nil,
                Level: Swift.Double? = nil,
                IsAnamorphic: Swift.Bool? = nil,
                ExtendedVideoType: Components.Schemas.ExtendedVideoTypes? = nil,
                ExtendedVideoSubType: Components.Schemas.ExtendedVideoSubTypes? = nil,
                ExtendedVideoSubTypeDescription: Swift.String? = nil,
                ItemId: Swift.String? = nil,
                ServerId: Swift.String? = nil,
                AttachmentSize: Swift.Int32? = nil,
                MimeType: Swift.String? = nil,
                SubtitleLocationType: Components.Schemas.SubtitleLocationType? = nil
            ) {
                self.Codec = Codec
                self.CodecTag = CodecTag
                self.Language = Language
                self.ColorTransfer = ColorTransfer
                self.ColorPrimaries = ColorPrimaries
                self.ColorSpace = ColorSpace
                self.Comment = Comment
                self.StreamStartTimeTicks = StreamStartTimeTicks
                self.TimeBase = TimeBase
                self.Title = Title
                self.Extradata = Extradata
                self.VideoRange = VideoRange
                self.DisplayTitle = DisplayTitle
                self.DisplayLanguage = DisplayLanguage
                self.NalLengthSize = NalLengthSize
                self.IsInterlaced = IsInterlaced
                self.IsAVC = IsAVC
                self.ChannelLayout = ChannelLayout
                self.BitRate = BitRate
                self.BitDepth = BitDepth
                self.RefFrames = RefFrames
                self.Rotation = Rotation
                self.Channels = Channels
                self.SampleRate = SampleRate
                self.IsDefault = IsDefault
                self.IsForced = IsForced
                self.IsHearingImpaired = IsHearingImpaired
                self.Height = Height
                self.Width = Width
                self.AverageFrameRate = AverageFrameRate
                self.RealFrameRate = RealFrameRate
                self.Profile = Profile
                self._Type = _Type
                self.AspectRatio = AspectRatio
                self.Index = Index
                self.IsExternal = IsExternal
                self.DeliveryMethod = DeliveryMethod
                self.DeliveryUrl = DeliveryUrl
                self.IsExternalUrl = IsExternalUrl
                self.IsTextSubtitleStream = IsTextSubtitleStream
                self.SupportsExternalStream = SupportsExternalStream
                self.Path = Path
                self._Protocol = _Protocol
                self.PixelFormat = PixelFormat
                self.Level = Level
                self.IsAnamorphic = IsAnamorphic
                self.ExtendedVideoType = ExtendedVideoType
                self.ExtendedVideoSubType = ExtendedVideoSubType
                self.ExtendedVideoSubTypeDescription = ExtendedVideoSubTypeDescription
                self.ItemId = ItemId
                self.ServerId = ServerId
                self.AttachmentSize = AttachmentSize
                self.MimeType = MimeType
                self.SubtitleLocationType = SubtitleLocationType
            }
            internal enum CodingKeys: String, CodingKey {
                case Codec
                case CodecTag
                case Language
                case ColorTransfer
                case ColorPrimaries
                case ColorSpace
                case Comment
                case StreamStartTimeTicks
                case TimeBase
                case Title
                case Extradata
                case VideoRange
                case DisplayTitle
                case DisplayLanguage
                case NalLengthSize
                case IsInterlaced
                case IsAVC
                case ChannelLayout
                case BitRate
                case BitDepth
                case RefFrames
                case Rotation
                case Channels
                case SampleRate
                case IsDefault
                case IsForced
                case IsHearingImpaired
                case Height
                case Width
                case AverageFrameRate
                case RealFrameRate
                case Profile
                case _Type = "Type"
                case AspectRatio
                case Index
                case IsExternal
                case DeliveryMethod
                case DeliveryUrl
                case IsExternalUrl
                case IsTextSubtitleStream
                case SupportsExternalStream
                case Path
                case _Protocol = "Protocol"
                case PixelFormat
                case Level
                case IsAnamorphic
                case ExtendedVideoType
                case ExtendedVideoSubType
                case ExtendedVideoSubTypeDescription
                case ItemId
                case ServerId
                case AttachmentSize
                case MimeType
                case SubtitleLocationType
            }
        }
        /// Enum MediaStreamType
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MediaStreamType`.
        internal enum MediaStreamType: String, Codable, Hashable, Sendable, CaseIterable {
            case Unknown = "Unknown"
            case Audio = "Audio"
            case Video = "Video"
            case Subtitle = "Subtitle"
            case EmbeddedImage = "EmbeddedImage"
            case Attachment = "Attachment"
            case Data = "Data"
        }
        /// - Remark: Generated from `#/components/schemas/SubtitleDeliveryMethod`.
        internal enum SubtitleDeliveryMethod: String, Codable, Hashable, Sendable, CaseIterable {
            case Encode = "Encode"
            case Embed = "Embed"
            case External = "External"
            case Hls = "Hls"
            case VideoSideData = "VideoSideData"
        }
        /// - Remark: Generated from `#/components/schemas/ExtendedVideoTypes`.
        internal enum ExtendedVideoTypes: String, Codable, Hashable, Sendable, CaseIterable {
            case None = "None"
            case Hdr10 = "Hdr10"
            case Hdr10Plus = "Hdr10Plus"
            case HyperLogGamma = "HyperLogGamma"
            case DolbyVision = "DolbyVision"
        }
        /// - Remark: Generated from `#/components/schemas/ExtendedVideoSubTypes`.
        internal enum ExtendedVideoSubTypes: String, Codable, Hashable, Sendable, CaseIterable {
            case None = "None"
            case Hdr10 = "Hdr10"
            case HyperLogGamma = "HyperLogGamma"
            case Hdr10Plus0 = "Hdr10Plus0"
            case DoviProfile02 = "DoviProfile02"
            case DoviProfile10 = "DoviProfile10"
            case DoviProfile22 = "DoviProfile22"
            case DoviProfile30 = "DoviProfile30"
            case DoviProfile42 = "DoviProfile42"
            case DoviProfile50 = "DoviProfile50"
            case DoviProfile61 = "DoviProfile61"
            case DoviProfile76 = "DoviProfile76"
            case DoviProfile81 = "DoviProfile81"
            case DoviProfile82 = "DoviProfile82"
            case DoviProfile83 = "DoviProfile83"
            case DoviProfile84 = "DoviProfile84"
            case DoviProfile85 = "DoviProfile85"
            case DoviProfile92 = "DoviProfile92"
        }
        /// - Remark: Generated from `#/components/schemas/SubtitleLocationType`.
        internal enum SubtitleLocationType: String, Codable, Hashable, Sendable, CaseIterable {
            case InternalStream = "InternalStream"
            case VideoSideData = "VideoSideData"
        }
        /// - Remark: Generated from `#/components/schemas/TransportStreamTimestamp`.
        internal enum TransportStreamTimestamp: String, Codable, Hashable, Sendable, CaseIterable {
            case None = "None"
            case Zero = "Zero"
            case Valid = "Valid"
        }
        /// - Remark: Generated from `#/components/schemas/MediaUrl`.
        internal struct MediaUrl: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MediaUrl/Url`.
            internal var Url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MediaUrl/Name`.
            internal var Name: Swift.String?
            /// Creates a new `MediaUrl`.
            ///
            /// - Parameters:
            ///   - Url:
            ///   - Name:
            internal init(
                Url: Swift.String? = nil,
                Name: Swift.String? = nil
            ) {
                self.Url = Url
                self.Name = Name
            }
            internal enum CodingKeys: String, CodingKey {
                case Url
                case Name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProviderIdDictionary`.
        internal struct ProviderIdDictionary: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            internal var additionalProperties: [String: Swift.String]
            /// Creates a new `ProviderIdDictionary`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            internal init(additionalProperties: [String: Swift.String] = .init()) {
                self.additionalProperties = additionalProperties
            }
            internal init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// This is used by the api to get information about a Person within a BaseItem
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/BaseItemPerson`.
        internal struct BaseItemPerson: Codable, Hashable, Sendable {
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemPerson/Name`.
            internal var Name: Swift.String?
            /// The identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemPerson/Id`.
            internal var Id: Swift.String?
            /// The role.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemPerson/Role`.
            internal var Role: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BaseItemPerson/Type`.
            internal var _Type: Components.Schemas.PersonType?
            /// The primary image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/BaseItemPerson/PrimaryImageTag`.
            internal var PrimaryImageTag: Swift.String?
            /// Creates a new `BaseItemPerson`.
            ///
            /// - Parameters:
            ///   - Name: The name.
            ///   - Id: The identifier.
            ///   - Role: The role.
            ///   - _Type:
            ///   - PrimaryImageTag: The primary image tag.
            internal init(
                Name: Swift.String? = nil,
                Id: Swift.String? = nil,
                Role: Swift.String? = nil,
                _Type: Components.Schemas.PersonType? = nil,
                PrimaryImageTag: Swift.String? = nil
            ) {
                self.Name = Name
                self.Id = Id
                self.Role = Role
                self._Type = _Type
                self.PrimaryImageTag = PrimaryImageTag
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case Id
                case Role
                case _Type = "Type"
                case PrimaryImageTag
            }
        }
        /// - Remark: Generated from `#/components/schemas/PersonType`.
        internal enum PersonType: String, Codable, Hashable, Sendable, CaseIterable {
            case Actor = "Actor"
            case Director = "Director"
            case Writer = "Writer"
            case Producer = "Producer"
            case GuestStar = "GuestStar"
            case Composer = "Composer"
            case Conductor = "Conductor"
            case Lyricist = "Lyricist"
        }
        /// - Remark: Generated from `#/components/schemas/NameLongIdPair`.
        internal struct NameLongIdPair: Codable, Hashable, Sendable {
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/NameLongIdPair/Name`.
            internal var Name: Swift.String?
            /// The identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/NameLongIdPair/Id`.
            internal var Id: Swift.Int64?
            /// Creates a new `NameLongIdPair`.
            ///
            /// - Parameters:
            ///   - Name: The name.
            ///   - Id: The identifier.
            internal init(
                Name: Swift.String? = nil,
                Id: Swift.Int64? = nil
            ) {
                self.Name = Name
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case Id
            }
        }
        /// Class UserItemDataDto
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/UserItemDataDto`.
        internal struct UserItemDataDto: Codable, Hashable, Sendable {
            /// The rating.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/Rating`.
            internal var Rating: Swift.Double?
            /// The played percentage.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/PlayedPercentage`.
            internal var PlayedPercentage: Swift.Double?
            /// The unplayed item count.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/UnplayedItemCount`.
            internal var UnplayedItemCount: Swift.Int32?
            /// The playback position ticks.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/PlaybackPositionTicks`.
            internal var PlaybackPositionTicks: Swift.Int64?
            /// The play count.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/PlayCount`.
            internal var PlayCount: Swift.Int32?
            /// A value indicating whether this instance is favorite.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/IsFavorite`.
            internal var IsFavorite: Swift.Bool?
            /// The last played date.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/LastPlayedDate`.
            internal var LastPlayedDate: Foundation.Date?
            /// A value indicating whether this `MediaBrowser.Model.Dto.UserItemDataDto` is played.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/Played`.
            internal var Played: Swift.Bool?
            /// The key.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/Key`.
            internal var Key: Swift.String?
            /// The item identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/ItemId`.
            internal var ItemId: Swift.String?
            /// Used only by our Windows app. Not used by Emby Server.
            ///
            /// - Remark: Generated from `#/components/schemas/UserItemDataDto/ServerId`.
            internal var ServerId: Swift.String?
            /// Creates a new `UserItemDataDto`.
            ///
            /// - Parameters:
            ///   - Rating: The rating.
            ///   - PlayedPercentage: The played percentage.
            ///   - UnplayedItemCount: The unplayed item count.
            ///   - PlaybackPositionTicks: The playback position ticks.
            ///   - PlayCount: The play count.
            ///   - IsFavorite: A value indicating whether this instance is favorite.
            ///   - LastPlayedDate: The last played date.
            ///   - Played: A value indicating whether this `MediaBrowser.Model.Dto.UserItemDataDto` is played.
            ///   - Key: The key.
            ///   - ItemId: The item identifier.
            ///   - ServerId: Used only by our Windows app. Not used by Emby Server.
            internal init(
                Rating: Swift.Double? = nil,
                PlayedPercentage: Swift.Double? = nil,
                UnplayedItemCount: Swift.Int32? = nil,
                PlaybackPositionTicks: Swift.Int64? = nil,
                PlayCount: Swift.Int32? = nil,
                IsFavorite: Swift.Bool? = nil,
                LastPlayedDate: Foundation.Date? = nil,
                Played: Swift.Bool? = nil,
                Key: Swift.String? = nil,
                ItemId: Swift.String? = nil,
                ServerId: Swift.String? = nil
            ) {
                self.Rating = Rating
                self.PlayedPercentage = PlayedPercentage
                self.UnplayedItemCount = UnplayedItemCount
                self.PlaybackPositionTicks = PlaybackPositionTicks
                self.PlayCount = PlayCount
                self.IsFavorite = IsFavorite
                self.LastPlayedDate = LastPlayedDate
                self.Played = Played
                self.Key = Key
                self.ItemId = ItemId
                self.ServerId = ServerId
            }
            internal enum CodingKeys: String, CodingKey {
                case Rating
                case PlayedPercentage
                case UnplayedItemCount
                case PlaybackPositionTicks
                case PlayCount
                case IsFavorite
                case LastPlayedDate
                case Played
                case Key
                case ItemId
                case ServerId
            }
        }
        /// - Remark: Generated from `#/components/schemas/DayOfWeek`.
        internal enum DayOfWeek: String, Codable, Hashable, Sendable, CaseIterable {
            case Sunday = "Sunday"
            case Monday = "Monday"
            case Tuesday = "Tuesday"
            case Wednesday = "Wednesday"
            case Thursday = "Thursday"
            case Friday = "Friday"
            case Saturday = "Saturday"
        }
        /// - Remark: Generated from `#/components/schemas/NameIdPair`.
        internal struct NameIdPair: Codable, Hashable, Sendable {
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/NameIdPair/Name`.
            internal var Name: Swift.String?
            /// The identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/NameIdPair/Id`.
            internal var Id: Swift.String?
            /// Creates a new `NameIdPair`.
            ///
            /// - Parameters:
            ///   - Name: The name.
            ///   - Id: The identifier.
            internal init(
                Name: Swift.String? = nil,
                Id: Swift.String? = nil
            ) {
                self.Name = Name
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case Id
            }
        }
        /// Class ChapterInfo
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChapterInfo`.
        internal struct ChapterInfo: Codable, Hashable, Sendable {
            /// The start position ticks.
            ///
            /// - Remark: Generated from `#/components/schemas/ChapterInfo/StartPositionTicks`.
            internal var StartPositionTicks: Swift.Int64?
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/ChapterInfo/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChapterInfo/ImageTag`.
            internal var ImageTag: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChapterInfo/MarkerType`.
            internal var MarkerType: Components.Schemas.MarkerType?
            /// - Remark: Generated from `#/components/schemas/ChapterInfo/ChapterIndex`.
            internal var ChapterIndex: Swift.Int32?
            /// Creates a new `ChapterInfo`.
            ///
            /// - Parameters:
            ///   - StartPositionTicks: The start position ticks.
            ///   - Name: The name.
            ///   - ImageTag:
            ///   - MarkerType:
            ///   - ChapterIndex:
            internal init(
                StartPositionTicks: Swift.Int64? = nil,
                Name: Swift.String? = nil,
                ImageTag: Swift.String? = nil,
                MarkerType: Components.Schemas.MarkerType? = nil,
                ChapterIndex: Swift.Int32? = nil
            ) {
                self.StartPositionTicks = StartPositionTicks
                self.Name = Name
                self.ImageTag = ImageTag
                self.MarkerType = MarkerType
                self.ChapterIndex = ChapterIndex
            }
            internal enum CodingKeys: String, CodingKey {
                case StartPositionTicks
                case Name
                case ImageTag
                case MarkerType
                case ChapterIndex
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarkerType`.
        internal enum MarkerType: String, Codable, Hashable, Sendable, CaseIterable {
            case Chapter = "Chapter"
            case IntroStart = "IntroStart"
            case IntroEnd = "IntroEnd"
            case CreditsStart = "CreditsStart"
        }
        /// Enum LocationType
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/LocationType`.
        internal enum LocationType: String, Codable, Hashable, Sendable, CaseIterable {
            case FileSystem = "FileSystem"
            case Virtual = "Virtual"
        }
        /// Enum MetadataFields
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/MetadataFields`.
        internal enum MetadataFields: String, Codable, Hashable, Sendable, CaseIterable {
            case Cast = "Cast"
            case Genres = "Genres"
            case ProductionLocations = "ProductionLocations"
            case Studios = "Studios"
            case Tags = "Tags"
            case Name = "Name"
            case Overview = "Overview"
            case Runtime = "Runtime"
            case OfficialRating = "OfficialRating"
            case Collections = "Collections"
            case ChannelNumber = "ChannelNumber"
            case SortName = "SortName"
            case OriginalTitle = "OriginalTitle"
            case SortIndexNumber = "SortIndexNumber"
            case SortParentIndexNumber = "SortParentIndexNumber"
            case CommunityRating = "CommunityRating"
            case CriticRating = "CriticRating"
            case Tagline = "Tagline"
        }
        /// - Remark: Generated from `#/components/schemas/Drawing.ImageOrientation`.
        internal enum Drawing_period_ImageOrientation: String, Codable, Hashable, Sendable, CaseIterable {
            case TopLeft = "TopLeft"
            case TopRight = "TopRight"
            case BottomRight = "BottomRight"
            case BottomLeft = "BottomLeft"
            case LeftTop = "LeftTop"
            case RightTop = "RightTop"
            case RightBottom = "RightBottom"
            case LeftBottom = "LeftBottom"
        }
        /// - Remark: Generated from `#/components/schemas/LiveTv.TimerType`.
        internal enum LiveTv_period_TimerType: String, Codable, Hashable, Sendable, CaseIterable {
            case Program = "Program"
            case DateTime = "DateTime"
            case Keyword = "Keyword"
        }
        /// Class SessionInfo
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Session.SessionInfo`.
        internal struct Session_period_SessionInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/PlayState`.
            internal var PlayState: Components.Schemas.PlayerStateInfo?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/AdditionalUsers`.
            internal var AdditionalUsers: [Components.Schemas.SessionUserInfo]?
            /// The remote end point.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/RemoteEndPoint`.
            internal var RemoteEndPoint: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/Protocol`.
            internal var _Protocol: Swift.String?
            /// The playable media types.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/PlayableMediaTypes`.
            internal var PlayableMediaTypes: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/PlaylistItemId`.
            internal var PlaylistItemId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/PlaylistIndex`.
            internal var PlaylistIndex: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/PlaylistLength`.
            internal var PlaylistLength: Swift.Int32?
            /// The id.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/Id`.
            internal var Id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/ServerId`.
            internal var ServerId: Swift.String?
            /// The user id.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/UserId`.
            internal var UserId: Swift.String?
            /// The username.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/UserName`.
            internal var UserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/UserPrimaryImageTag`.
            internal var UserPrimaryImageTag: Swift.String?
            /// The type of the client.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/Client`.
            internal var Client: Swift.String?
            /// The last activity date.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/LastActivityDate`.
            internal var LastActivityDate: Foundation.Date?
            /// The name of the device.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/DeviceName`.
            internal var DeviceName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/DeviceType`.
            internal var DeviceType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/NowPlayingItem`.
            internal var NowPlayingItem: Components.Schemas.BaseItemDto?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/InternalDeviceId`.
            internal var InternalDeviceId: Swift.Int64?
            /// The device id.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/DeviceId`.
            internal var DeviceId: Swift.String?
            /// The application version.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/ApplicationVersion`.
            internal var ApplicationVersion: Swift.String?
            /// The application icon URL.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/AppIconUrl`.
            internal var AppIconUrl: Swift.String?
            /// The supported commands.
            ///
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/SupportedCommands`.
            internal var SupportedCommands: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/TranscodingInfo`.
            internal var TranscodingInfo: Components.Schemas.TranscodingInfo?
            /// - Remark: Generated from `#/components/schemas/Session.SessionInfo/SupportsRemoteControl`.
            internal var SupportsRemoteControl: Swift.Bool?
            /// Creates a new `Session_period_SessionInfo`.
            ///
            /// - Parameters:
            ///   - PlayState:
            ///   - AdditionalUsers:
            ///   - RemoteEndPoint: The remote end point.
            ///   - _Protocol:
            ///   - PlayableMediaTypes: The playable media types.
            ///   - PlaylistItemId:
            ///   - PlaylistIndex:
            ///   - PlaylistLength:
            ///   - Id: The id.
            ///   - ServerId:
            ///   - UserId: The user id.
            ///   - UserName: The username.
            ///   - UserPrimaryImageTag:
            ///   - Client: The type of the client.
            ///   - LastActivityDate: The last activity date.
            ///   - DeviceName: The name of the device.
            ///   - DeviceType:
            ///   - NowPlayingItem:
            ///   - InternalDeviceId:
            ///   - DeviceId: The device id.
            ///   - ApplicationVersion: The application version.
            ///   - AppIconUrl: The application icon URL.
            ///   - SupportedCommands: The supported commands.
            ///   - TranscodingInfo:
            ///   - SupportsRemoteControl:
            internal init(
                PlayState: Components.Schemas.PlayerStateInfo? = nil,
                AdditionalUsers: [Components.Schemas.SessionUserInfo]? = nil,
                RemoteEndPoint: Swift.String? = nil,
                _Protocol: Swift.String? = nil,
                PlayableMediaTypes: [Swift.String]? = nil,
                PlaylistItemId: Swift.String? = nil,
                PlaylistIndex: Swift.Int32? = nil,
                PlaylistLength: Swift.Int32? = nil,
                Id: Swift.String? = nil,
                ServerId: Swift.String? = nil,
                UserId: Swift.String? = nil,
                UserName: Swift.String? = nil,
                UserPrimaryImageTag: Swift.String? = nil,
                Client: Swift.String? = nil,
                LastActivityDate: Foundation.Date? = nil,
                DeviceName: Swift.String? = nil,
                DeviceType: Swift.String? = nil,
                NowPlayingItem: Components.Schemas.BaseItemDto? = nil,
                InternalDeviceId: Swift.Int64? = nil,
                DeviceId: Swift.String? = nil,
                ApplicationVersion: Swift.String? = nil,
                AppIconUrl: Swift.String? = nil,
                SupportedCommands: [Swift.String]? = nil,
                TranscodingInfo: Components.Schemas.TranscodingInfo? = nil,
                SupportsRemoteControl: Swift.Bool? = nil
            ) {
                self.PlayState = PlayState
                self.AdditionalUsers = AdditionalUsers
                self.RemoteEndPoint = RemoteEndPoint
                self._Protocol = _Protocol
                self.PlayableMediaTypes = PlayableMediaTypes
                self.PlaylistItemId = PlaylistItemId
                self.PlaylistIndex = PlaylistIndex
                self.PlaylistLength = PlaylistLength
                self.Id = Id
                self.ServerId = ServerId
                self.UserId = UserId
                self.UserName = UserName
                self.UserPrimaryImageTag = UserPrimaryImageTag
                self.Client = Client
                self.LastActivityDate = LastActivityDate
                self.DeviceName = DeviceName
                self.DeviceType = DeviceType
                self.NowPlayingItem = NowPlayingItem
                self.InternalDeviceId = InternalDeviceId
                self.DeviceId = DeviceId
                self.ApplicationVersion = ApplicationVersion
                self.AppIconUrl = AppIconUrl
                self.SupportedCommands = SupportedCommands
                self.TranscodingInfo = TranscodingInfo
                self.SupportsRemoteControl = SupportsRemoteControl
            }
            internal enum CodingKeys: String, CodingKey {
                case PlayState
                case AdditionalUsers
                case RemoteEndPoint
                case _Protocol = "Protocol"
                case PlayableMediaTypes
                case PlaylistItemId
                case PlaylistIndex
                case PlaylistLength
                case Id
                case ServerId
                case UserId
                case UserName
                case UserPrimaryImageTag
                case Client
                case LastActivityDate
                case DeviceName
                case DeviceType
                case NowPlayingItem
                case InternalDeviceId
                case DeviceId
                case ApplicationVersion
                case AppIconUrl
                case SupportedCommands
                case TranscodingInfo
                case SupportsRemoteControl
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlayerStateInfo`.
        internal struct PlayerStateInfo: Codable, Hashable, Sendable {
            /// The now playing position ticks.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/PositionTicks`.
            internal var PositionTicks: Swift.Int64?
            /// A value indicating whether this instance can seek.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/CanSeek`.
            internal var CanSeek: Swift.Bool?
            /// A value indicating whether this instance is paused.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/IsPaused`.
            internal var IsPaused: Swift.Bool?
            /// A value indicating whether this instance is muted.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/IsMuted`.
            internal var IsMuted: Swift.Bool?
            /// The volume level.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/VolumeLevel`.
            internal var VolumeLevel: Swift.Int32?
            /// The index of the now playing audio stream.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/AudioStreamIndex`.
            internal var AudioStreamIndex: Swift.Int32?
            /// The index of the now playing subtitle stream.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/SubtitleStreamIndex`.
            internal var SubtitleStreamIndex: Swift.Int32?
            /// The now playing media version identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/MediaSourceId`.
            internal var MediaSourceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/PlayMethod`.
            internal var PlayMethod: Components.Schemas.PlayMethod?
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/RepeatMode`.
            internal var RepeatMode: Components.Schemas.RepeatMode?
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/SubtitleOffset`.
            internal var SubtitleOffset: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/Shuffle`.
            internal var Shuffle: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PlayerStateInfo/PlaybackRate`.
            internal var PlaybackRate: Swift.Double?
            /// Creates a new `PlayerStateInfo`.
            ///
            /// - Parameters:
            ///   - PositionTicks: The now playing position ticks.
            ///   - CanSeek: A value indicating whether this instance can seek.
            ///   - IsPaused: A value indicating whether this instance is paused.
            ///   - IsMuted: A value indicating whether this instance is muted.
            ///   - VolumeLevel: The volume level.
            ///   - AudioStreamIndex: The index of the now playing audio stream.
            ///   - SubtitleStreamIndex: The index of the now playing subtitle stream.
            ///   - MediaSourceId: The now playing media version identifier.
            ///   - PlayMethod:
            ///   - RepeatMode:
            ///   - SubtitleOffset:
            ///   - Shuffle:
            ///   - PlaybackRate:
            internal init(
                PositionTicks: Swift.Int64? = nil,
                CanSeek: Swift.Bool? = nil,
                IsPaused: Swift.Bool? = nil,
                IsMuted: Swift.Bool? = nil,
                VolumeLevel: Swift.Int32? = nil,
                AudioStreamIndex: Swift.Int32? = nil,
                SubtitleStreamIndex: Swift.Int32? = nil,
                MediaSourceId: Swift.String? = nil,
                PlayMethod: Components.Schemas.PlayMethod? = nil,
                RepeatMode: Components.Schemas.RepeatMode? = nil,
                SubtitleOffset: Swift.Int32? = nil,
                Shuffle: Swift.Bool? = nil,
                PlaybackRate: Swift.Double? = nil
            ) {
                self.PositionTicks = PositionTicks
                self.CanSeek = CanSeek
                self.IsPaused = IsPaused
                self.IsMuted = IsMuted
                self.VolumeLevel = VolumeLevel
                self.AudioStreamIndex = AudioStreamIndex
                self.SubtitleStreamIndex = SubtitleStreamIndex
                self.MediaSourceId = MediaSourceId
                self.PlayMethod = PlayMethod
                self.RepeatMode = RepeatMode
                self.SubtitleOffset = SubtitleOffset
                self.Shuffle = Shuffle
                self.PlaybackRate = PlaybackRate
            }
            internal enum CodingKeys: String, CodingKey {
                case PositionTicks
                case CanSeek
                case IsPaused
                case IsMuted
                case VolumeLevel
                case AudioStreamIndex
                case SubtitleStreamIndex
                case MediaSourceId
                case PlayMethod
                case RepeatMode
                case SubtitleOffset
                case Shuffle
                case PlaybackRate
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlayMethod`.
        internal enum PlayMethod: String, Codable, Hashable, Sendable, CaseIterable {
            case Transcode = "Transcode"
            case DirectStream = "DirectStream"
            case DirectPlay = "DirectPlay"
        }
        /// - Remark: Generated from `#/components/schemas/RepeatMode`.
        internal enum RepeatMode: String, Codable, Hashable, Sendable, CaseIterable {
            case RepeatNone = "RepeatNone"
            case RepeatAll = "RepeatAll"
            case RepeatOne = "RepeatOne"
        }
        /// Class SessionUserInfo.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/SessionUserInfo`.
        internal struct SessionUserInfo: Codable, Hashable, Sendable {
            /// The user identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/SessionUserInfo/UserId`.
            internal var UserId: Swift.String?
            /// The name of the user.
            ///
            /// - Remark: Generated from `#/components/schemas/SessionUserInfo/UserName`.
            internal var UserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SessionUserInfo/UserInternalId`.
            internal var UserInternalId: Swift.Int64?
            /// Creates a new `SessionUserInfo`.
            ///
            /// - Parameters:
            ///   - UserId: The user identifier.
            ///   - UserName: The name of the user.
            ///   - UserInternalId:
            internal init(
                UserId: Swift.String? = nil,
                UserName: Swift.String? = nil,
                UserInternalId: Swift.Int64? = nil
            ) {
                self.UserId = UserId
                self.UserName = UserName
                self.UserInternalId = UserInternalId
            }
            internal enum CodingKeys: String, CodingKey {
                case UserId
                case UserName
                case UserInternalId
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscodingInfo`.
        internal struct TranscodingInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/AudioCodec`.
            internal var AudioCodec: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoCodec`.
            internal var VideoCodec: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/SubProtocol`.
            internal var SubProtocol: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/Container`.
            internal var Container: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/IsVideoDirect`.
            internal var IsVideoDirect: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/IsAudioDirect`.
            internal var IsAudioDirect: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/Bitrate`.
            internal var Bitrate: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/AudioBitrate`.
            internal var AudioBitrate: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoBitrate`.
            internal var VideoBitrate: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/Framerate`.
            internal var Framerate: Swift.Float?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/CompletionPercentage`.
            internal var CompletionPercentage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/TranscodingPositionTicks`.
            internal var TranscodingPositionTicks: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/TranscodingStartPositionTicks`.
            internal var TranscodingStartPositionTicks: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/Width`.
            internal var Width: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/Height`.
            internal var Height: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/AudioChannels`.
            internal var AudioChannels: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/TranscodeReasons`.
            internal var TranscodeReasons: [Components.Schemas.TranscodeReason]?
            /// Deprecated, please use ProcessStatistics instead
            ///
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/CurrentCpuUsage`.
            @available(*, deprecated)
            internal var CurrentCpuUsage: Swift.Double?
            /// Deprecated, please use ProcessStatistics instead
            ///
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/AverageCpuUsage`.
            @available(*, deprecated)
            internal var AverageCpuUsage: Swift.Double?
            /// Deprecated, please use ProcessStatistics instead
            ///
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/CpuHistory`.
            @available(*, deprecated)
            internal var CpuHistory: [Components.Schemas.Tuple_Double_hyphen_Double]?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/ProcessStatistics`.
            internal var ProcessStatistics: Components.Schemas.ProcessRun_period_Metrics_period_ProcessStatistics?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/CurrentThrottle`.
            internal var CurrentThrottle: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoDecoder`.
            internal var VideoDecoder: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoDecoderIsHardware`.
            internal var VideoDecoderIsHardware: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoDecoderMediaType`.
            internal var VideoDecoderMediaType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoDecoderHwAccel`.
            internal var VideoDecoderHwAccel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoEncoder`.
            internal var VideoEncoder: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoEncoderIsHardware`.
            internal var VideoEncoderIsHardware: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoEncoderMediaType`.
            internal var VideoEncoderMediaType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoEncoderHwAccel`.
            internal var VideoEncoderHwAccel: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/VideoPipelineInfo`.
            internal var VideoPipelineInfo: [Components.Schemas.Transcoding_period_VpStepInfo]?
            /// - Remark: Generated from `#/components/schemas/TranscodingInfo/SubtitlePipelineInfos`.
            internal var SubtitlePipelineInfos: [[Components.Schemas.Transcoding_period_VpStepInfo]]?
            /// Creates a new `TranscodingInfo`.
            ///
            /// - Parameters:
            ///   - AudioCodec:
            ///   - VideoCodec:
            ///   - SubProtocol:
            ///   - Container:
            ///   - IsVideoDirect:
            ///   - IsAudioDirect:
            ///   - Bitrate:
            ///   - AudioBitrate:
            ///   - VideoBitrate:
            ///   - Framerate:
            ///   - CompletionPercentage:
            ///   - TranscodingPositionTicks:
            ///   - TranscodingStartPositionTicks:
            ///   - Width:
            ///   - Height:
            ///   - AudioChannels:
            ///   - TranscodeReasons:
            ///   - CurrentCpuUsage: Deprecated, please use ProcessStatistics instead
            ///   - AverageCpuUsage: Deprecated, please use ProcessStatistics instead
            ///   - CpuHistory: Deprecated, please use ProcessStatistics instead
            ///   - ProcessStatistics:
            ///   - CurrentThrottle:
            ///   - VideoDecoder:
            ///   - VideoDecoderIsHardware:
            ///   - VideoDecoderMediaType:
            ///   - VideoDecoderHwAccel:
            ///   - VideoEncoder:
            ///   - VideoEncoderIsHardware:
            ///   - VideoEncoderMediaType:
            ///   - VideoEncoderHwAccel:
            ///   - VideoPipelineInfo:
            ///   - SubtitlePipelineInfos:
            internal init(
                AudioCodec: Swift.String? = nil,
                VideoCodec: Swift.String? = nil,
                SubProtocol: Swift.String? = nil,
                Container: Swift.String? = nil,
                IsVideoDirect: Swift.Bool? = nil,
                IsAudioDirect: Swift.Bool? = nil,
                Bitrate: Swift.Int32? = nil,
                AudioBitrate: Swift.Int32? = nil,
                VideoBitrate: Swift.Int32? = nil,
                Framerate: Swift.Float? = nil,
                CompletionPercentage: Swift.Double? = nil,
                TranscodingPositionTicks: Swift.Double? = nil,
                TranscodingStartPositionTicks: Swift.Double? = nil,
                Width: Swift.Int32? = nil,
                Height: Swift.Int32? = nil,
                AudioChannels: Swift.Int32? = nil,
                TranscodeReasons: [Components.Schemas.TranscodeReason]? = nil,
                CurrentCpuUsage: Swift.Double? = nil,
                AverageCpuUsage: Swift.Double? = nil,
                CpuHistory: [Components.Schemas.Tuple_Double_hyphen_Double]? = nil,
                ProcessStatistics: Components.Schemas.ProcessRun_period_Metrics_period_ProcessStatistics? = nil,
                CurrentThrottle: Swift.Int32? = nil,
                VideoDecoder: Swift.String? = nil,
                VideoDecoderIsHardware: Swift.Bool? = nil,
                VideoDecoderMediaType: Swift.String? = nil,
                VideoDecoderHwAccel: Swift.String? = nil,
                VideoEncoder: Swift.String? = nil,
                VideoEncoderIsHardware: Swift.Bool? = nil,
                VideoEncoderMediaType: Swift.String? = nil,
                VideoEncoderHwAccel: Swift.String? = nil,
                VideoPipelineInfo: [Components.Schemas.Transcoding_period_VpStepInfo]? = nil,
                SubtitlePipelineInfos: [[Components.Schemas.Transcoding_period_VpStepInfo]]? = nil
            ) {
                self.AudioCodec = AudioCodec
                self.VideoCodec = VideoCodec
                self.SubProtocol = SubProtocol
                self.Container = Container
                self.IsVideoDirect = IsVideoDirect
                self.IsAudioDirect = IsAudioDirect
                self.Bitrate = Bitrate
                self.AudioBitrate = AudioBitrate
                self.VideoBitrate = VideoBitrate
                self.Framerate = Framerate
                self.CompletionPercentage = CompletionPercentage
                self.TranscodingPositionTicks = TranscodingPositionTicks
                self.TranscodingStartPositionTicks = TranscodingStartPositionTicks
                self.Width = Width
                self.Height = Height
                self.AudioChannels = AudioChannels
                self.TranscodeReasons = TranscodeReasons
                self.CurrentCpuUsage = CurrentCpuUsage
                self.AverageCpuUsage = AverageCpuUsage
                self.CpuHistory = CpuHistory
                self.ProcessStatistics = ProcessStatistics
                self.CurrentThrottle = CurrentThrottle
                self.VideoDecoder = VideoDecoder
                self.VideoDecoderIsHardware = VideoDecoderIsHardware
                self.VideoDecoderMediaType = VideoDecoderMediaType
                self.VideoDecoderHwAccel = VideoDecoderHwAccel
                self.VideoEncoder = VideoEncoder
                self.VideoEncoderIsHardware = VideoEncoderIsHardware
                self.VideoEncoderMediaType = VideoEncoderMediaType
                self.VideoEncoderHwAccel = VideoEncoderHwAccel
                self.VideoPipelineInfo = VideoPipelineInfo
                self.SubtitlePipelineInfos = SubtitlePipelineInfos
            }
            internal enum CodingKeys: String, CodingKey {
                case AudioCodec
                case VideoCodec
                case SubProtocol
                case Container
                case IsVideoDirect
                case IsAudioDirect
                case Bitrate
                case AudioBitrate
                case VideoBitrate
                case Framerate
                case CompletionPercentage
                case TranscodingPositionTicks
                case TranscodingStartPositionTicks
                case Width
                case Height
                case AudioChannels
                case TranscodeReasons
                case CurrentCpuUsage
                case AverageCpuUsage
                case CpuHistory
                case ProcessStatistics
                case CurrentThrottle
                case VideoDecoder
                case VideoDecoderIsHardware
                case VideoDecoderMediaType
                case VideoDecoderHwAccel
                case VideoEncoder
                case VideoEncoderIsHardware
                case VideoEncoderMediaType
                case VideoEncoderHwAccel
                case VideoPipelineInfo
                case SubtitlePipelineInfos
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscodeReason`.
        internal enum TranscodeReason: String, Codable, Hashable, Sendable, CaseIterable {
            case ContainerNotSupported = "ContainerNotSupported"
            case VideoCodecNotSupported = "VideoCodecNotSupported"
            case AudioCodecNotSupported = "AudioCodecNotSupported"
            case ContainerBitrateExceedsLimit = "ContainerBitrateExceedsLimit"
            case AudioBitrateNotSupported = "AudioBitrateNotSupported"
            case AudioChannelsNotSupported = "AudioChannelsNotSupported"
            case VideoResolutionNotSupported = "VideoResolutionNotSupported"
            case UnknownVideoStreamInfo = "UnknownVideoStreamInfo"
            case UnknownAudioStreamInfo = "UnknownAudioStreamInfo"
            case AudioProfileNotSupported = "AudioProfileNotSupported"
            case AudioSampleRateNotSupported = "AudioSampleRateNotSupported"
            case AnamorphicVideoNotSupported = "AnamorphicVideoNotSupported"
            case InterlacedVideoNotSupported = "InterlacedVideoNotSupported"
            case SecondaryAudioNotSupported = "SecondaryAudioNotSupported"
            case RefFramesNotSupported = "RefFramesNotSupported"
            case VideoBitDepthNotSupported = "VideoBitDepthNotSupported"
            case VideoBitrateNotSupported = "VideoBitrateNotSupported"
            case VideoFramerateNotSupported = "VideoFramerateNotSupported"
            case VideoLevelNotSupported = "VideoLevelNotSupported"
            case VideoProfileNotSupported = "VideoProfileNotSupported"
            case AudioBitDepthNotSupported = "AudioBitDepthNotSupported"
            case SubtitleCodecNotSupported = "SubtitleCodecNotSupported"
            case DirectPlayError = "DirectPlayError"
            case VideoRangeNotSupported = "VideoRangeNotSupported"
            case SubtitleContentOptionsEnabled = "SubtitleContentOptionsEnabled"
        }
        /// - Remark: Generated from `#/components/schemas/Tuple_Double-Double`.
        internal struct Tuple_Double_hyphen_Double: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Tuple_Double-Double/Item1`.
            internal var Item1: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Tuple_Double-Double/Item2`.
            internal var Item2: Swift.Double?
            /// Creates a new `Tuple_Double_hyphen_Double`.
            ///
            /// - Parameters:
            ///   - Item1:
            ///   - Item2:
            internal init(
                Item1: Swift.Double? = nil,
                Item2: Swift.Double? = nil
            ) {
                self.Item1 = Item1
                self.Item2 = Item2
            }
            internal enum CodingKeys: String, CodingKey {
                case Item1
                case Item2
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessStatistics`.
        internal struct ProcessRun_period_Metrics_period_ProcessStatistics: Codable, Hashable, Sendable {
            /// The current cpu.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessStatistics/CurrentCpu`.
            internal var CurrentCpu: Swift.Double?
            /// The average cpu.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessStatistics/AverageCpu`.
            internal var AverageCpu: Swift.Double?
            /// The currently allocated virtual memory.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessStatistics/CurrentVirtualMemory`.
            internal var CurrentVirtualMemory: Swift.Double?
            /// The currently allocated working set.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessStatistics/CurrentWorkingSet`.
            internal var CurrentWorkingSet: Swift.Double?
            /// The metrics.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessStatistics/Metrics`.
            internal var Metrics: [Components.Schemas.ProcessRun_period_Metrics_period_ProcessMetricPoint]?
            /// Creates a new `ProcessRun_period_Metrics_period_ProcessStatistics`.
            ///
            /// - Parameters:
            ///   - CurrentCpu: The current cpu.
            ///   - AverageCpu: The average cpu.
            ///   - CurrentVirtualMemory: The currently allocated virtual memory.
            ///   - CurrentWorkingSet: The currently allocated working set.
            ///   - Metrics: The metrics.
            internal init(
                CurrentCpu: Swift.Double? = nil,
                AverageCpu: Swift.Double? = nil,
                CurrentVirtualMemory: Swift.Double? = nil,
                CurrentWorkingSet: Swift.Double? = nil,
                Metrics: [Components.Schemas.ProcessRun_period_Metrics_period_ProcessMetricPoint]? = nil
            ) {
                self.CurrentCpu = CurrentCpu
                self.AverageCpu = AverageCpu
                self.CurrentVirtualMemory = CurrentVirtualMemory
                self.CurrentWorkingSet = CurrentWorkingSet
                self.Metrics = Metrics
            }
            internal enum CodingKeys: String, CodingKey {
                case CurrentCpu
                case AverageCpu
                case CurrentVirtualMemory
                case CurrentWorkingSet
                case Metrics
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessMetricPoint`.
        internal struct ProcessRun_period_Metrics_period_ProcessMetricPoint: Codable, Hashable, Sendable {
            /// The time.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessMetricPoint/Time`.
            internal var Time: Swift.String?
            /// The cpu percent.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessMetricPoint/CpuPercent`.
            internal var CpuPercent: Swift.Double?
            /// The virtual memory.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessMetricPoint/VirtualMemory`.
            internal var VirtualMemory: Swift.Double?
            /// The working set.
            ///
            /// - Remark: Generated from `#/components/schemas/ProcessRun.Metrics.ProcessMetricPoint/WorkingSet`.
            internal var WorkingSet: Swift.Double?
            /// Creates a new `ProcessRun_period_Metrics_period_ProcessMetricPoint`.
            ///
            /// - Parameters:
            ///   - Time: The time.
            ///   - CpuPercent: The cpu percent.
            ///   - VirtualMemory: The virtual memory.
            ///   - WorkingSet: The working set.
            internal init(
                Time: Swift.String? = nil,
                CpuPercent: Swift.Double? = nil,
                VirtualMemory: Swift.Double? = nil,
                WorkingSet: Swift.Double? = nil
            ) {
                self.Time = Time
                self.CpuPercent = CpuPercent
                self.VirtualMemory = VirtualMemory
                self.WorkingSet = WorkingSet
            }
            internal enum CodingKeys: String, CodingKey {
                case Time
                case CpuPercent
                case VirtualMemory
                case WorkingSet
            }
        }
        /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo`.
        internal struct Transcoding_period_VpStepInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/StepType`.
            internal var StepType: Components.Schemas.Transcoding_period_VpStepTypes?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/StepTypeName`.
            internal var StepTypeName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/HardwareContextName`.
            internal var HardwareContextName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/IsHardwareContext`.
            internal var IsHardwareContext: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/Name`.
            internal var Name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/Short`.
            internal var Short: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/FfmpegName`.
            internal var FfmpegName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/FfmpegDescription`.
            internal var FfmpegDescription: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/FfmpegOptions`.
            internal var FfmpegOptions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/Param`.
            internal var Param: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepInfo/ParamShort`.
            internal var ParamShort: Swift.String?
            /// Creates a new `Transcoding_period_VpStepInfo`.
            ///
            /// - Parameters:
            ///   - StepType:
            ///   - StepTypeName:
            ///   - HardwareContextName:
            ///   - IsHardwareContext:
            ///   - Name:
            ///   - Short:
            ///   - FfmpegName:
            ///   - FfmpegDescription:
            ///   - FfmpegOptions:
            ///   - Param:
            ///   - ParamShort:
            internal init(
                StepType: Components.Schemas.Transcoding_period_VpStepTypes? = nil,
                StepTypeName: Swift.String? = nil,
                HardwareContextName: Swift.String? = nil,
                IsHardwareContext: Swift.Bool? = nil,
                Name: Swift.String? = nil,
                Short: Swift.String? = nil,
                FfmpegName: Swift.String? = nil,
                FfmpegDescription: Swift.String? = nil,
                FfmpegOptions: Swift.String? = nil,
                Param: Swift.String? = nil,
                ParamShort: Swift.String? = nil
            ) {
                self.StepType = StepType
                self.StepTypeName = StepTypeName
                self.HardwareContextName = HardwareContextName
                self.IsHardwareContext = IsHardwareContext
                self.Name = Name
                self.Short = Short
                self.FfmpegName = FfmpegName
                self.FfmpegDescription = FfmpegDescription
                self.FfmpegOptions = FfmpegOptions
                self.Param = Param
                self.ParamShort = ParamShort
            }
            internal enum CodingKeys: String, CodingKey {
                case StepType
                case StepTypeName
                case HardwareContextName
                case IsHardwareContext
                case Name
                case Short
                case FfmpegName
                case FfmpegDescription
                case FfmpegOptions
                case Param
                case ParamShort
            }
        }
        /// Video Processing Step Type enum.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/Transcoding.VpStepTypes`.
        internal enum Transcoding_period_VpStepTypes: String, Codable, Hashable, Sendable, CaseIterable {
            case Decoder = "Decoder"
            case Encoder = "Encoder"
            case Scaling = "Scaling"
            case Deinterlace = "Deinterlace"
            case SubtitleOverlay = "SubtitleOverlay"
            case ToneMapping = "ToneMapping"
            case ColorConversion = "ColorConversion"
            case SplitCaptions = "SplitCaptions"
            case TextSub2Video = "TextSub2Video"
            case GraphicSub2Video = "GraphicSub2Video"
            case GraphicSub2Text = "GraphicSub2Text"
            case BurnInTextSubs = "BurnInTextSubs"
            case BurnInGraphicSubs = "BurnInGraphicSubs"
            case ScaleSubs = "ScaleSubs"
            case TextMod = "TextMod"
            case Censor = "Censor"
            case ShowSpeaker = "ShowSpeaker"
            case StripStyles = "StripStyles"
            case ConnectTo = "ConnectTo"
        }
        /// - Remark: Generated from `#/components/schemas/UserItemShareLevel`.
        internal enum UserItemShareLevel: String, Codable, Hashable, Sendable, CaseIterable {
            case None = "None"
            case Read = "Read"
            case Write = "Write"
            case Manage = "Manage"
            case ManageDelete = "ManageDelete"
        }
        /// Class UserDto
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/UserDto`.
        internal struct UserDto: Codable, Hashable, Sendable {
            /// The name.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/Name`.
            internal var Name: Swift.String?
            /// The server identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/ServerId`.
            internal var ServerId: Swift.String?
            /// The name of the server. This is not used by the server and is for client\-side usage only.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/ServerName`.
            internal var ServerName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserDto/Prefix`.
            internal var Prefix: Swift.String?
            /// The name of the connect user.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/ConnectUserName`.
            internal var ConnectUserName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserDto/DateCreated`.
            internal var DateCreated: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserDto/ConnectLinkType`.
            internal var ConnectLinkType: Components.Schemas.Connect_period_UserLinkType?
            /// The id.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/Id`.
            internal var Id: Swift.String?
            /// The primary image tag.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/PrimaryImageTag`.
            internal var PrimaryImageTag: Swift.String?
            /// A value indicating whether this instance has password.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/HasPassword`.
            internal var HasPassword: Swift.Bool?
            /// A value indicating whether this instance has configured password.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/HasConfiguredPassword`.
            internal var HasConfiguredPassword: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserDto/EnableAutoLogin`.
            internal var EnableAutoLogin: Swift.Bool?
            /// The last login date.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/LastLoginDate`.
            internal var LastLoginDate: Foundation.Date?
            /// The last activity date.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/LastActivityDate`.
            internal var LastActivityDate: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserDto/Configuration`.
            internal var Configuration: Components.Schemas.UserConfiguration?
            /// - Remark: Generated from `#/components/schemas/UserDto/Policy`.
            internal var Policy: Components.Schemas.UserPolicy?
            /// The primary image aspect ratio.
            ///
            /// - Remark: Generated from `#/components/schemas/UserDto/PrimaryImageAspectRatio`.
            internal var PrimaryImageAspectRatio: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/UserDto/HasConfiguredEasyPassword`.
            @available(*, deprecated)
            internal var HasConfiguredEasyPassword: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserDto/UserItemShareLevel`.
            internal var UserItemShareLevel: Components.Schemas.UserItemShareLevel?
            /// Creates a new `UserDto`.
            ///
            /// - Parameters:
            ///   - Name: The name.
            ///   - ServerId: The server identifier.
            ///   - ServerName: The name of the server. This is not used by the server and is for client\-side usage only.
            ///   - Prefix:
            ///   - ConnectUserName: The name of the connect user.
            ///   - DateCreated:
            ///   - ConnectLinkType:
            ///   - Id: The id.
            ///   - PrimaryImageTag: The primary image tag.
            ///   - HasPassword: A value indicating whether this instance has password.
            ///   - HasConfiguredPassword: A value indicating whether this instance has configured password.
            ///   - EnableAutoLogin:
            ///   - LastLoginDate: The last login date.
            ///   - LastActivityDate: The last activity date.
            ///   - Configuration:
            ///   - Policy:
            ///   - PrimaryImageAspectRatio: The primary image aspect ratio.
            ///   - HasConfiguredEasyPassword:
            ///   - UserItemShareLevel:
            internal init(
                Name: Swift.String? = nil,
                ServerId: Swift.String? = nil,
                ServerName: Swift.String? = nil,
                Prefix: Swift.String? = nil,
                ConnectUserName: Swift.String? = nil,
                DateCreated: Foundation.Date? = nil,
                ConnectLinkType: Components.Schemas.Connect_period_UserLinkType? = nil,
                Id: Swift.String? = nil,
                PrimaryImageTag: Swift.String? = nil,
                HasPassword: Swift.Bool? = nil,
                HasConfiguredPassword: Swift.Bool? = nil,
                EnableAutoLogin: Swift.Bool? = nil,
                LastLoginDate: Foundation.Date? = nil,
                LastActivityDate: Foundation.Date? = nil,
                Configuration: Components.Schemas.UserConfiguration? = nil,
                Policy: Components.Schemas.UserPolicy? = nil,
                PrimaryImageAspectRatio: Swift.Double? = nil,
                HasConfiguredEasyPassword: Swift.Bool? = nil,
                UserItemShareLevel: Components.Schemas.UserItemShareLevel? = nil
            ) {
                self.Name = Name
                self.ServerId = ServerId
                self.ServerName = ServerName
                self.Prefix = Prefix
                self.ConnectUserName = ConnectUserName
                self.DateCreated = DateCreated
                self.ConnectLinkType = ConnectLinkType
                self.Id = Id
                self.PrimaryImageTag = PrimaryImageTag
                self.HasPassword = HasPassword
                self.HasConfiguredPassword = HasConfiguredPassword
                self.EnableAutoLogin = EnableAutoLogin
                self.LastLoginDate = LastLoginDate
                self.LastActivityDate = LastActivityDate
                self.Configuration = Configuration
                self.Policy = Policy
                self.PrimaryImageAspectRatio = PrimaryImageAspectRatio
                self.HasConfiguredEasyPassword = HasConfiguredEasyPassword
                self.UserItemShareLevel = UserItemShareLevel
            }
            internal enum CodingKeys: String, CodingKey {
                case Name
                case ServerId
                case ServerName
                case Prefix
                case ConnectUserName
                case DateCreated
                case ConnectLinkType
                case Id
                case PrimaryImageTag
                case HasPassword
                case HasConfiguredPassword
                case EnableAutoLogin
                case LastLoginDate
                case LastActivityDate
                case Configuration
                case Policy
                case PrimaryImageAspectRatio
                case HasConfiguredEasyPassword
                case UserItemShareLevel
            }
        }
        /// - Remark: Generated from `#/components/schemas/Connect.UserLinkType`.
        internal enum Connect_period_UserLinkType: String, Codable, Hashable, Sendable, CaseIterable {
            case LinkedUser = "LinkedUser"
            case Guest = "Guest"
        }
        /// Class UserConfiguration
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/UserConfiguration`.
        internal struct UserConfiguration: Codable, Hashable, Sendable {
            /// The audio language preference.
            ///
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/AudioLanguagePreference`.
            internal var AudioLanguagePreference: Swift.String?
            /// A value indicating whether \[play default audio track\].
            ///
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/PlayDefaultAudioTrack`.
            internal var PlayDefaultAudioTrack: Swift.Bool?
            /// The subtitle language preference.
            ///
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/SubtitleLanguagePreference`.
            internal var SubtitleLanguagePreference: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/ProfilePin`.
            internal var ProfilePin: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/DisplayMissingEpisodes`.
            internal var DisplayMissingEpisodes: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/SubtitleMode`.
            internal var SubtitleMode: Components.Schemas.SubtitlePlaybackMode?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/OrderedViews`.
            internal var OrderedViews: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/LatestItemsExcludes`.
            internal var LatestItemsExcludes: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/MyMediaExcludes`.
            internal var MyMediaExcludes: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/HidePlayedInLatest`.
            internal var HidePlayedInLatest: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/HidePlayedInMoreLikeThis`.
            internal var HidePlayedInMoreLikeThis: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/HidePlayedInSuggestions`.
            internal var HidePlayedInSuggestions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/RememberAudioSelections`.
            internal var RememberAudioSelections: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/RememberSubtitleSelections`.
            internal var RememberSubtitleSelections: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/EnableNextEpisodeAutoPlay`.
            internal var EnableNextEpisodeAutoPlay: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/ResumeRewindSeconds`.
            internal var ResumeRewindSeconds: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/IntroSkipMode`.
            internal var IntroSkipMode: Components.Schemas.SegmentSkipMode?
            /// - Remark: Generated from `#/components/schemas/UserConfiguration/EnableLocalPassword`.
            @available(*, deprecated)
            internal var EnableLocalPassword: Swift.Bool?
            /// Creates a new `UserConfiguration`.
            ///
            /// - Parameters:
            ///   - AudioLanguagePreference: The audio language preference.
            ///   - PlayDefaultAudioTrack: A value indicating whether \[play default audio track\].
            ///   - SubtitleLanguagePreference: The subtitle language preference.
            ///   - ProfilePin:
            ///   - DisplayMissingEpisodes:
            ///   - SubtitleMode:
            ///   - OrderedViews:
            ///   - LatestItemsExcludes:
            ///   - MyMediaExcludes:
            ///   - HidePlayedInLatest:
            ///   - HidePlayedInMoreLikeThis:
            ///   - HidePlayedInSuggestions:
            ///   - RememberAudioSelections:
            ///   - RememberSubtitleSelections:
            ///   - EnableNextEpisodeAutoPlay:
            ///   - ResumeRewindSeconds:
            ///   - IntroSkipMode:
            ///   - EnableLocalPassword:
            internal init(
                AudioLanguagePreference: Swift.String? = nil,
                PlayDefaultAudioTrack: Swift.Bool? = nil,
                SubtitleLanguagePreference: Swift.String? = nil,
                ProfilePin: Swift.String? = nil,
                DisplayMissingEpisodes: Swift.Bool? = nil,
                SubtitleMode: Components.Schemas.SubtitlePlaybackMode? = nil,
                OrderedViews: [Swift.String]? = nil,
                LatestItemsExcludes: [Swift.String]? = nil,
                MyMediaExcludes: [Swift.String]? = nil,
                HidePlayedInLatest: Swift.Bool? = nil,
                HidePlayedInMoreLikeThis: Swift.Bool? = nil,
                HidePlayedInSuggestions: Swift.Bool? = nil,
                RememberAudioSelections: Swift.Bool? = nil,
                RememberSubtitleSelections: Swift.Bool? = nil,
                EnableNextEpisodeAutoPlay: Swift.Bool? = nil,
                ResumeRewindSeconds: Swift.Int32? = nil,
                IntroSkipMode: Components.Schemas.SegmentSkipMode? = nil,
                EnableLocalPassword: Swift.Bool? = nil
            ) {
                self.AudioLanguagePreference = AudioLanguagePreference
                self.PlayDefaultAudioTrack = PlayDefaultAudioTrack
                self.SubtitleLanguagePreference = SubtitleLanguagePreference
                self.ProfilePin = ProfilePin
                self.DisplayMissingEpisodes = DisplayMissingEpisodes
                self.SubtitleMode = SubtitleMode
                self.OrderedViews = OrderedViews
                self.LatestItemsExcludes = LatestItemsExcludes
                self.MyMediaExcludes = MyMediaExcludes
                self.HidePlayedInLatest = HidePlayedInLatest
                self.HidePlayedInMoreLikeThis = HidePlayedInMoreLikeThis
                self.HidePlayedInSuggestions = HidePlayedInSuggestions
                self.RememberAudioSelections = RememberAudioSelections
                self.RememberSubtitleSelections = RememberSubtitleSelections
                self.EnableNextEpisodeAutoPlay = EnableNextEpisodeAutoPlay
                self.ResumeRewindSeconds = ResumeRewindSeconds
                self.IntroSkipMode = IntroSkipMode
                self.EnableLocalPassword = EnableLocalPassword
            }
            internal enum CodingKeys: String, CodingKey {
                case AudioLanguagePreference
                case PlayDefaultAudioTrack
                case SubtitleLanguagePreference
                case ProfilePin
                case DisplayMissingEpisodes
                case SubtitleMode
                case OrderedViews
                case LatestItemsExcludes
                case MyMediaExcludes
                case HidePlayedInLatest
                case HidePlayedInMoreLikeThis
                case HidePlayedInSuggestions
                case RememberAudioSelections
                case RememberSubtitleSelections
                case EnableNextEpisodeAutoPlay
                case ResumeRewindSeconds
                case IntroSkipMode
                case EnableLocalPassword
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubtitlePlaybackMode`.
        internal enum SubtitlePlaybackMode: String, Codable, Hashable, Sendable, CaseIterable {
            case Default = "Default"
            case Always = "Always"
            case OnlyForced = "OnlyForced"
            case None = "None"
            case Smart = "Smart"
            case HearingImpaired = "HearingImpaired"
        }
        /// - Remark: Generated from `#/components/schemas/SegmentSkipMode`.
        internal enum SegmentSkipMode: String, Codable, Hashable, Sendable, CaseIterable {
            case ShowButton = "ShowButton"
            case AutoSkip = "AutoSkip"
            case None = "None"
        }
        /// - Remark: Generated from `#/components/schemas/UserPolicy`.
        internal struct UserPolicy: Codable, Hashable, Sendable {
            /// A value indicating whether this instance is administrator.
            ///
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IsAdministrator`.
            internal var IsAdministrator: Swift.Bool?
            /// A value indicating whether this instance is hidden.
            ///
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IsHidden`.
            internal var IsHidden: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IsHiddenRemotely`.
            internal var IsHiddenRemotely: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IsHiddenFromUnusedDevices`.
            internal var IsHiddenFromUnusedDevices: Swift.Bool?
            /// A value indicating whether this instance is disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IsDisabled`.
            internal var IsDisabled: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/LockedOutDate`.
            internal var LockedOutDate: Swift.Int64?
            /// The max parental rating.
            ///
            /// - Remark: Generated from `#/components/schemas/UserPolicy/MaxParentalRating`.
            internal var MaxParentalRating: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/AllowTagOrRating`.
            internal var AllowTagOrRating: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/BlockedTags`.
            internal var BlockedTags: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IsTagBlockingModeInclusive`.
            internal var IsTagBlockingModeInclusive: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/IncludeTags`.
            internal var IncludeTags: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableUserPreferenceAccess`.
            internal var EnableUserPreferenceAccess: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/AccessSchedules`.
            internal var AccessSchedules: [Components.Schemas.AccessSchedule]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/BlockUnratedItems`.
            internal var BlockUnratedItems: [Components.Schemas.UnratedItem]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableRemoteControlOfOtherUsers`.
            internal var EnableRemoteControlOfOtherUsers: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableSharedDeviceControl`.
            internal var EnableSharedDeviceControl: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableRemoteAccess`.
            internal var EnableRemoteAccess: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableLiveTvManagement`.
            internal var EnableLiveTvManagement: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableLiveTvAccess`.
            internal var EnableLiveTvAccess: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableMediaPlayback`.
            internal var EnableMediaPlayback: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableAudioPlaybackTranscoding`.
            internal var EnableAudioPlaybackTranscoding: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableVideoPlaybackTranscoding`.
            internal var EnableVideoPlaybackTranscoding: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnablePlaybackRemuxing`.
            internal var EnablePlaybackRemuxing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableContentDeletion`.
            internal var EnableContentDeletion: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/RestrictedFeatures`.
            internal var RestrictedFeatures: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableContentDeletionFromFolders`.
            internal var EnableContentDeletionFromFolders: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableContentDownloading`.
            internal var EnableContentDownloading: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableSubtitleDownloading`.
            internal var EnableSubtitleDownloading: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableSubtitleManagement`.
            internal var EnableSubtitleManagement: Swift.Bool?
            /// A value indicating whether \[enable synchronize\].
            ///
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableSyncTranscoding`.
            internal var EnableSyncTranscoding: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableMediaConversion`.
            internal var EnableMediaConversion: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnabledChannels`.
            internal var EnabledChannels: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableAllChannels`.
            internal var EnableAllChannels: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnabledFolders`.
            internal var EnabledFolders: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableAllFolders`.
            internal var EnableAllFolders: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/InvalidLoginAttemptCount`.
            internal var InvalidLoginAttemptCount: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnablePublicSharing`.
            internal var EnablePublicSharing: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/BlockedMediaFolders`.
            internal var BlockedMediaFolders: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/RemoteClientBitrateLimit`.
            internal var RemoteClientBitrateLimit: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/AuthenticationProviderId`.
            internal var AuthenticationProviderId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/ExcludedSubFolders`.
            internal var ExcludedSubFolders: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/SimultaneousStreamLimit`.
            internal var SimultaneousStreamLimit: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnabledDevices`.
            internal var EnabledDevices: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/EnableAllDevices`.
            internal var EnableAllDevices: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/AllowCameraUpload`.
            internal var AllowCameraUpload: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPolicy/AllowSharingPersonalItems`.
            internal var AllowSharingPersonalItems: Swift.Bool?
            /// Creates a new `UserPolicy`.
            ///
            /// - Parameters:
            ///   - IsAdministrator: A value indicating whether this instance is administrator.
            ///   - IsHidden: A value indicating whether this instance is hidden.
            ///   - IsHiddenRemotely:
            ///   - IsHiddenFromUnusedDevices:
            ///   - IsDisabled: A value indicating whether this instance is disabled.
            ///   - LockedOutDate:
            ///   - MaxParentalRating: The max parental rating.
            ///   - AllowTagOrRating:
            ///   - BlockedTags:
            ///   - IsTagBlockingModeInclusive:
            ///   - IncludeTags:
            ///   - EnableUserPreferenceAccess:
            ///   - AccessSchedules:
            ///   - BlockUnratedItems:
            ///   - EnableRemoteControlOfOtherUsers:
            ///   - EnableSharedDeviceControl:
            ///   - EnableRemoteAccess:
            ///   - EnableLiveTvManagement:
            ///   - EnableLiveTvAccess:
            ///   - EnableMediaPlayback:
            ///   - EnableAudioPlaybackTranscoding:
            ///   - EnableVideoPlaybackTranscoding:
            ///   - EnablePlaybackRemuxing:
            ///   - EnableContentDeletion:
            ///   - RestrictedFeatures:
            ///   - EnableContentDeletionFromFolders:
            ///   - EnableContentDownloading:
            ///   - EnableSubtitleDownloading:
            ///   - EnableSubtitleManagement:
            ///   - EnableSyncTranscoding: A value indicating whether \[enable synchronize\].
            ///   - EnableMediaConversion:
            ///   - EnabledChannels:
            ///   - EnableAllChannels:
            ///   - EnabledFolders:
            ///   - EnableAllFolders:
            ///   - InvalidLoginAttemptCount:
            ///   - EnablePublicSharing:
            ///   - BlockedMediaFolders:
            ///   - RemoteClientBitrateLimit:
            ///   - AuthenticationProviderId:
            ///   - ExcludedSubFolders:
            ///   - SimultaneousStreamLimit:
            ///   - EnabledDevices:
            ///   - EnableAllDevices:
            ///   - AllowCameraUpload:
            ///   - AllowSharingPersonalItems:
            internal init(
                IsAdministrator: Swift.Bool? = nil,
                IsHidden: Swift.Bool? = nil,
                IsHiddenRemotely: Swift.Bool? = nil,
                IsHiddenFromUnusedDevices: Swift.Bool? = nil,
                IsDisabled: Swift.Bool? = nil,
                LockedOutDate: Swift.Int64? = nil,
                MaxParentalRating: Swift.Int32? = nil,
                AllowTagOrRating: Swift.Bool? = nil,
                BlockedTags: [Swift.String]? = nil,
                IsTagBlockingModeInclusive: Swift.Bool? = nil,
                IncludeTags: [Swift.String]? = nil,
                EnableUserPreferenceAccess: Swift.Bool? = nil,
                AccessSchedules: [Components.Schemas.AccessSchedule]? = nil,
                BlockUnratedItems: [Components.Schemas.UnratedItem]? = nil,
                EnableRemoteControlOfOtherUsers: Swift.Bool? = nil,
                EnableSharedDeviceControl: Swift.Bool? = nil,
                EnableRemoteAccess: Swift.Bool? = nil,
                EnableLiveTvManagement: Swift.Bool? = nil,
                EnableLiveTvAccess: Swift.Bool? = nil,
                EnableMediaPlayback: Swift.Bool? = nil,
                EnableAudioPlaybackTranscoding: Swift.Bool? = nil,
                EnableVideoPlaybackTranscoding: Swift.Bool? = nil,
                EnablePlaybackRemuxing: Swift.Bool? = nil,
                EnableContentDeletion: Swift.Bool? = nil,
                RestrictedFeatures: [Swift.String]? = nil,
                EnableContentDeletionFromFolders: [Swift.String]? = nil,
                EnableContentDownloading: Swift.Bool? = nil,
                EnableSubtitleDownloading: Swift.Bool? = nil,
                EnableSubtitleManagement: Swift.Bool? = nil,
                EnableSyncTranscoding: Swift.Bool? = nil,
                EnableMediaConversion: Swift.Bool? = nil,
                EnabledChannels: [Swift.String]? = nil,
                EnableAllChannels: Swift.Bool? = nil,
                EnabledFolders: [Swift.String]? = nil,
                EnableAllFolders: Swift.Bool? = nil,
                InvalidLoginAttemptCount: Swift.Int32? = nil,
                EnablePublicSharing: Swift.Bool? = nil,
                BlockedMediaFolders: [Swift.String]? = nil,
                RemoteClientBitrateLimit: Swift.Int32? = nil,
                AuthenticationProviderId: Swift.String? = nil,
                ExcludedSubFolders: [Swift.String]? = nil,
                SimultaneousStreamLimit: Swift.Int32? = nil,
                EnabledDevices: [Swift.String]? = nil,
                EnableAllDevices: Swift.Bool? = nil,
                AllowCameraUpload: Swift.Bool? = nil,
                AllowSharingPersonalItems: Swift.Bool? = nil
            ) {
                self.IsAdministrator = IsAdministrator
                self.IsHidden = IsHidden
                self.IsHiddenRemotely = IsHiddenRemotely
                self.IsHiddenFromUnusedDevices = IsHiddenFromUnusedDevices
                self.IsDisabled = IsDisabled
                self.LockedOutDate = LockedOutDate
                self.MaxParentalRating = MaxParentalRating
                self.AllowTagOrRating = AllowTagOrRating
                self.BlockedTags = BlockedTags
                self.IsTagBlockingModeInclusive = IsTagBlockingModeInclusive
                self.IncludeTags = IncludeTags
                self.EnableUserPreferenceAccess = EnableUserPreferenceAccess
                self.AccessSchedules = AccessSchedules
                self.BlockUnratedItems = BlockUnratedItems
                self.EnableRemoteControlOfOtherUsers = EnableRemoteControlOfOtherUsers
                self.EnableSharedDeviceControl = EnableSharedDeviceControl
                self.EnableRemoteAccess = EnableRemoteAccess
                self.EnableLiveTvManagement = EnableLiveTvManagement
                self.EnableLiveTvAccess = EnableLiveTvAccess
                self.EnableMediaPlayback = EnableMediaPlayback
                self.EnableAudioPlaybackTranscoding = EnableAudioPlaybackTranscoding
                self.EnableVideoPlaybackTranscoding = EnableVideoPlaybackTranscoding
                self.EnablePlaybackRemuxing = EnablePlaybackRemuxing
                self.EnableContentDeletion = EnableContentDeletion
                self.RestrictedFeatures = RestrictedFeatures
                self.EnableContentDeletionFromFolders = EnableContentDeletionFromFolders
                self.EnableContentDownloading = EnableContentDownloading
                self.EnableSubtitleDownloading = EnableSubtitleDownloading
                self.EnableSubtitleManagement = EnableSubtitleManagement
                self.EnableSyncTranscoding = EnableSyncTranscoding
                self.EnableMediaConversion = EnableMediaConversion
                self.EnabledChannels = EnabledChannels
                self.EnableAllChannels = EnableAllChannels
                self.EnabledFolders = EnabledFolders
                self.EnableAllFolders = EnableAllFolders
                self.InvalidLoginAttemptCount = InvalidLoginAttemptCount
                self.EnablePublicSharing = EnablePublicSharing
                self.BlockedMediaFolders = BlockedMediaFolders
                self.RemoteClientBitrateLimit = RemoteClientBitrateLimit
                self.AuthenticationProviderId = AuthenticationProviderId
                self.ExcludedSubFolders = ExcludedSubFolders
                self.SimultaneousStreamLimit = SimultaneousStreamLimit
                self.EnabledDevices = EnabledDevices
                self.EnableAllDevices = EnableAllDevices
                self.AllowCameraUpload = AllowCameraUpload
                self.AllowSharingPersonalItems = AllowSharingPersonalItems
            }
            internal enum CodingKeys: String, CodingKey {
                case IsAdministrator
                case IsHidden
                case IsHiddenRemotely
                case IsHiddenFromUnusedDevices
                case IsDisabled
                case LockedOutDate
                case MaxParentalRating
                case AllowTagOrRating
                case BlockedTags
                case IsTagBlockingModeInclusive
                case IncludeTags
                case EnableUserPreferenceAccess
                case AccessSchedules
                case BlockUnratedItems
                case EnableRemoteControlOfOtherUsers
                case EnableSharedDeviceControl
                case EnableRemoteAccess
                case EnableLiveTvManagement
                case EnableLiveTvAccess
                case EnableMediaPlayback
                case EnableAudioPlaybackTranscoding
                case EnableVideoPlaybackTranscoding
                case EnablePlaybackRemuxing
                case EnableContentDeletion
                case RestrictedFeatures
                case EnableContentDeletionFromFolders
                case EnableContentDownloading
                case EnableSubtitleDownloading
                case EnableSubtitleManagement
                case EnableSyncTranscoding
                case EnableMediaConversion
                case EnabledChannels
                case EnableAllChannels
                case EnabledFolders
                case EnableAllFolders
                case InvalidLoginAttemptCount
                case EnablePublicSharing
                case BlockedMediaFolders
                case RemoteClientBitrateLimit
                case AuthenticationProviderId
                case ExcludedSubFolders
                case SimultaneousStreamLimit
                case EnabledDevices
                case EnableAllDevices
                case AllowCameraUpload
                case AllowSharingPersonalItems
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessSchedule`.
        internal struct AccessSchedule: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessSchedule/DayOfWeek`.
            internal var DayOfWeek: Components.Schemas.DynamicDayOfWeek?
            /// The start hour.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessSchedule/StartHour`.
            internal var StartHour: Swift.Double?
            /// The end hour.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessSchedule/EndHour`.
            internal var EndHour: Swift.Double?
            /// Creates a new `AccessSchedule`.
            ///
            /// - Parameters:
            ///   - DayOfWeek:
            ///   - StartHour: The start hour.
            ///   - EndHour: The end hour.
            internal init(
                DayOfWeek: Components.Schemas.DynamicDayOfWeek? = nil,
                StartHour: Swift.Double? = nil,
                EndHour: Swift.Double? = nil
            ) {
                self.DayOfWeek = DayOfWeek
                self.StartHour = StartHour
                self.EndHour = EndHour
            }
            internal enum CodingKeys: String, CodingKey {
                case DayOfWeek
                case StartHour
                case EndHour
            }
        }
        /// - Remark: Generated from `#/components/schemas/DynamicDayOfWeek`.
        internal enum DynamicDayOfWeek: String, Codable, Hashable, Sendable, CaseIterable {
            case Sunday = "Sunday"
            case Monday = "Monday"
            case Tuesday = "Tuesday"
            case Wednesday = "Wednesday"
            case Thursday = "Thursday"
            case Friday = "Friday"
            case Saturday = "Saturday"
            case Everyday = "Everyday"
            case Weekday = "Weekday"
            case Weekend = "Weekend"
        }
        /// - Remark: Generated from `#/components/schemas/UnratedItem`.
        internal enum UnratedItem: String, Codable, Hashable, Sendable, CaseIterable {
            case Movie = "Movie"
            case Trailer = "Trailer"
            case Series = "Series"
            case Music = "Music"
            case Game = "Game"
            case Book = "Book"
            case LiveTvChannel = "LiveTvChannel"
            case LiveTvProgram = "LiveTvProgram"
            case ChannelContent = "ChannelContent"
            case Other = "Other"
        }
        /// - Remark: Generated from `#/components/schemas/AuthenticateUserByName`.
        internal struct AuthenticateUserByName: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthenticateUserByName/Username`.
            internal var Username: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthenticateUserByName/Pw`.
            internal var Pw: Swift.String?
            /// Creates a new `AuthenticateUserByName`.
            ///
            /// - Parameters:
            ///   - Username:
            ///   - Pw:
            internal init(
                Username: Swift.String? = nil,
                Pw: Swift.String? = nil
            ) {
                self.Username = Username
                self.Pw = Pw
            }
            internal enum CodingKeys: String, CodingKey {
                case Username
                case Pw
            }
        }
        /// - Remark: Generated from `#/components/schemas/Authentication.AuthenticationResult`.
        internal struct Authentication_period_AuthenticationResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Authentication.AuthenticationResult/User`.
            internal var User: Components.Schemas.UserDto?
            /// - Remark: Generated from `#/components/schemas/Authentication.AuthenticationResult/SessionInfo`.
            internal var SessionInfo: Components.Schemas.Session_period_SessionInfo?
            /// The authentication token.
            ///
            /// - Remark: Generated from `#/components/schemas/Authentication.AuthenticationResult/AccessToken`.
            internal var AccessToken: Swift.String?
            /// The server identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/Authentication.AuthenticationResult/ServerId`.
            internal var ServerId: Swift.String?
            /// Creates a new `Authentication_period_AuthenticationResult`.
            ///
            /// - Parameters:
            ///   - User:
            ///   - SessionInfo:
            ///   - AccessToken: The authentication token.
            ///   - ServerId: The server identifier.
            internal init(
                User: Components.Schemas.UserDto? = nil,
                SessionInfo: Components.Schemas.Session_period_SessionInfo? = nil,
                AccessToken: Swift.String? = nil,
                ServerId: Swift.String? = nil
            ) {
                self.User = User
                self.SessionInfo = SessionInfo
                self.AccessToken = AccessToken
                self.ServerId = ServerId
            }
            internal enum CodingKeys: String, CodingKey {
                case User
                case SessionInfo
                case AccessToken
                case ServerId
            }
        }
        /// - Remark: Generated from `#/components/schemas/PublicSystemInfo`.
        internal struct PublicSystemInfo: Codable, Hashable, Sendable {
            /// The local address.
            ///
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/LocalAddress`.
            internal var LocalAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/LocalAddresses`.
            internal var LocalAddresses: [Swift.String]?
            /// The wan address.
            ///
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/WanAddress`.
            internal var WanAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/RemoteAddresses`.
            internal var RemoteAddresses: [Swift.String]?
            /// The name of the server.
            ///
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/ServerName`.
            internal var ServerName: Swift.String?
            /// The version.
            ///
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/Version`.
            internal var Version: Swift.String?
            /// The id.
            ///
            /// - Remark: Generated from `#/components/schemas/PublicSystemInfo/Id`.
            internal var Id: Swift.String?
            /// Creates a new `PublicSystemInfo`.
            ///
            /// - Parameters:
            ///   - LocalAddress: The local address.
            ///   - LocalAddresses:
            ///   - WanAddress: The wan address.
            ///   - RemoteAddresses:
            ///   - ServerName: The name of the server.
            ///   - Version: The version.
            ///   - Id: The id.
            internal init(
                LocalAddress: Swift.String? = nil,
                LocalAddresses: [Swift.String]? = nil,
                WanAddress: Swift.String? = nil,
                RemoteAddresses: [Swift.String]? = nil,
                ServerName: Swift.String? = nil,
                Version: Swift.String? = nil,
                Id: Swift.String? = nil
            ) {
                self.LocalAddress = LocalAddress
                self.LocalAddresses = LocalAddresses
                self.WanAddress = WanAddress
                self.RemoteAddresses = RemoteAddresses
                self.ServerName = ServerName
                self.Version = Version
                self.Id = Id
            }
            internal enum CodingKeys: String, CodingKey {
                case LocalAddress
                case LocalAddresses
                case WanAddress
                case RemoteAddresses
                case ServerName
                case Version
                case Id
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {
        internal struct _400: Sendable, Hashable {
            /// Creates a new `_400`.
            internal init() {}
        }
        internal struct _401: Sendable, Hashable {
            /// Creates a new `_401`.
            internal init() {}
        }
        internal struct _403: Sendable, Hashable {
            /// Creates a new `_403`.
            internal init() {}
        }
        internal struct _404: Sendable, Hashable {
            /// Creates a new `_404`.
            internal init() {}
        }
        internal struct _500: Sendable, Hashable {
            /// Creates a new `_500`.
            internal init() {}
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Gets all artists from a given item, folder, or the entire library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Artists`.
    /// - Remark: Generated from `#/paths//Artists/get(getArtists)`.
    internal enum getArtists {
        internal static let id: Swift.String = "getArtists"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Artists/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Artist or AlbumArtist
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ArtistType`.
                internal var ArtistType: Swift.String?
                /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MaxOfficialRating`.
                internal var MaxOfficialRating: Swift.String?
                /// Optional filter by items with theme songs.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasThemeSong`.
                internal var HasThemeSong: Swift.Bool?
                /// Optional filter by items with theme videos.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasThemeVideo`.
                internal var HasThemeVideo: Swift.Bool?
                /// Optional filter by items with subtitles.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasSubtitles`.
                internal var HasSubtitles: Swift.Bool?
                /// Optional filter by items with special features.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasSpecialFeature`.
                internal var HasSpecialFeature: Swift.Bool?
                /// Optional filter by items with trailers.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasTrailer`.
                internal var HasTrailer: Swift.Bool?
                /// Optional. Return items that are siblings of a supplied item.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/AdjacentTo`.
                internal var AdjacentTo: Swift.String?
                /// Optional filter by minimum index number.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinIndexNumber`.
                internal var MinIndexNumber: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinStartDate`.
                internal var MinStartDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MaxStartDate`.
                internal var MaxStartDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinEndDate`.
                internal var MinEndDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MaxEndDate`.
                internal var MaxEndDate: Swift.String?
                /// Optional filter by minimum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinPlayers`.
                internal var MinPlayers: Swift.Int32?
                /// Optional filter by maximum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MaxPlayers`.
                internal var MaxPlayers: Swift.Int32?
                /// Optional filter by parent index number.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ParentIndexNumber`.
                internal var ParentIndexNumber: Swift.Int32?
                /// Optional filter by items that have or do not have a parental rating
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasParentalRating`.
                internal var HasParentalRating: Swift.Bool?
                /// Optional filter by items that are HD or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsHD`.
                internal var IsHD: Swift.Bool?
                /// Optional filter by items that are unaired episodes or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsUnaired`.
                internal var IsUnaired: Swift.Bool?
                /// Optional filter by minimum community rating.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinCommunityRating`.
                internal var MinCommunityRating: Swift.Double?
                /// Optional filter by minimum critic rating.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinCriticRating`.
                internal var MinCriticRating: Swift.Double?
                /// Gets all episodes that aired during a season, including specials.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/AiredDuringSeason`.
                internal var AiredDuringSeason: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinPremiereDate`.
                internal var MinPremiereDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinDateLastSaved`.
                internal var MinDateLastSaved: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinDateLastSavedForUser`.
                internal var MinDateLastSavedForUser: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MaxPremiereDate`.
                internal var MaxPremiereDate: Swift.String?
                /// Optional filter by items that have an overview or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasOverview`.
                internal var HasOverview: Swift.Bool?
                /// Optional filter by items that have an imdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasImdbId`.
                internal var HasImdbId: Swift.Bool?
                /// Optional filter by items that have a tmdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasTmdbId`.
                internal var HasTmdbId: Swift.Bool?
                /// Optional filter by items that have a tvdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasTvdbId`.
                internal var HasTvdbId: Swift.Bool?
                /// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ExcludeItemIds`.
                internal var ExcludeItemIds: Swift.String?
                /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/StartIndex`.
                internal var StartIndex: Swift.Int32?
                /// Optional. The maximum number of records to return
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Limit`.
                internal var Limit: Swift.Int32?
                /// When searching within folders, this determines whether or not the search will be recursive. true/false
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Recursive`.
                internal var Recursive: Swift.Bool?
                /// Enter a search term to perform a search request
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/SearchTerm`.
                internal var SearchTerm: Swift.String?
                /// Sort Order - Ascending,Descending
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/SortOrder`.
                internal var SortOrder: Swift.String?
                /// Specify this to localize the search to a specific item or folder. Omit to use the root
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ParentId`.
                internal var ParentId: Swift.String?
                /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Fields`.
                internal var Fields: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ExcludeItemTypes`.
                internal var ExcludeItemTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IncludeItemTypes`.
                internal var IncludeItemTypes: Swift.String?
                /// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/AnyProviderIdEquals`.
                internal var AnyProviderIdEquals: Swift.String?
                /// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Filters`.
                internal var Filters: Swift.String?
                /// Optional filter by items that are marked as favorite, or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsFavorite`.
                internal var IsFavorite: Swift.Bool?
                /// Optional filter for movies.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsMovie`.
                internal var IsMovie: Swift.Bool?
                /// Optional filter for series.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsSeries`.
                internal var IsSeries: Swift.Bool?
                /// Optional filter for folders.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsFolder`.
                internal var IsFolder: Swift.Bool?
                /// Optional filter for news.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsNews`.
                internal var IsNews: Swift.Bool?
                /// Optional filter for kids.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsKids`.
                internal var IsKids: Swift.Bool?
                /// Optional filter for sports.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsSports`.
                internal var IsSports: Swift.Bool?
                /// Optional filter for IsNew.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsNew`.
                internal var IsNew: Swift.Bool?
                /// Optional filter for IsPremiere.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsPremiere`.
                internal var IsPremiere: Swift.Bool?
                /// Optional filter for IsNewOrPremiere.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsNewOrPremiere`.
                internal var IsNewOrPremiere: Swift.Bool?
                /// Optional filter for IsRepeat.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsRepeat`.
                internal var IsRepeat: Swift.Bool?
                /// ProjectToMedia
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ProjectToMedia`.
                internal var ProjectToMedia: Swift.Bool?
                /// Optional filter by MediaType. Allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MediaTypes`.
                internal var MediaTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ImageTypes`.
                internal var ImageTypes: Swift.String?
                /// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/SortBy`.
                internal var SortBy: Swift.String?
                /// Optional filter by items that are played, or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsPlayed`.
                internal var IsPlayed: Swift.Bool?
                /// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Genres`.
                internal var Genres: Swift.String?
                /// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/OfficialRatings`.
                internal var OfficialRatings: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Tags`.
                internal var Tags: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ExcludeTags`.
                internal var ExcludeTags: Swift.String?
                /// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Years`.
                internal var Years: Swift.String?
                /// Optional, include image information in output
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/EnableImages`.
                internal var EnableImages: Swift.Bool?
                /// Optional, include user data
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/EnableUserData`.
                internal var EnableUserData: Swift.Bool?
                /// Optional, the max number of images to return, per image type
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ImageTypeLimit`.
                internal var ImageTypeLimit: Swift.Int32?
                /// Optional. The image types to include in the output.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/EnableImageTypes`.
                internal var EnableImageTypes: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Person`.
                internal var Person: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/PersonIds`.
                internal var PersonIds: Swift.String?
                /// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/PersonTypes`.
                internal var PersonTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Studios`.
                internal var Studios: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/StudioIds`.
                internal var StudioIds: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Artists`.
                internal var Artists: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ArtistIds`.
                internal var ArtistIds: Swift.String?
                /// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Albums`.
                internal var Albums: Swift.String?
                /// Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Ids`.
                internal var Ids: Swift.String?
                /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/VideoTypes`.
                internal var VideoTypes: Swift.String?
                /// Optional filter by Container. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Containers`.
                internal var Containers: Swift.String?
                /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/AudioCodecs`.
                internal var AudioCodecs: Swift.String?
                /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/AudioLayouts`.
                internal var AudioLayouts: Swift.String?
                /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/VideoCodecs`.
                internal var VideoCodecs: Swift.String?
                /// Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ExtendedVideoTypes`.
                internal var ExtendedVideoTypes: Swift.String?
                /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/SubtitleCodecs`.
                internal var SubtitleCodecs: Swift.String?
                /// Optional filter by Path.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Path`.
                internal var Path: Swift.String?
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/UserId`.
                internal var UserId: Swift.String?
                /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/MinOfficialRating`.
                internal var MinOfficialRating: Swift.String?
                /// Optional filter by items that are locked.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsLocked`.
                internal var IsLocked: Swift.Bool?
                /// Optional filter by items that are placeholders
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/IsPlaceHolder`.
                internal var IsPlaceHolder: Swift.Bool?
                /// Optional filter by items that have official ratings
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/HasOfficialRating`.
                internal var HasOfficialRating: Swift.Bool?
                /// Whether or not to hide items behind their boxsets.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/GroupItemsIntoCollections`.
                internal var GroupItemsIntoCollections: Swift.Bool?
                /// Optional filter by items that are 3D, or not.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/Is3D`.
                internal var Is3D: Swift.Bool?
                /// Optional filter by Series Status. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/SeriesStatus`.
                internal var SeriesStatus: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/NameStartsWithOrGreater`.
                internal var NameStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/ArtistStartsWithOrGreater`.
                internal var ArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/AlbumArtistStartsWithOrGreater`.
                internal var AlbumArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/NameStartsWith`.
                internal var NameStartsWith: Swift.String?
                /// Optional filter by items whose name is equally or lesser than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Artists/GET/query/NameLessThan`.
                internal var NameLessThan: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ArtistType: Artist or AlbumArtist
                ///   - MaxOfficialRating: Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///   - HasThemeSong: Optional filter by items with theme songs.
                ///   - HasThemeVideo: Optional filter by items with theme videos.
                ///   - HasSubtitles: Optional filter by items with subtitles.
                ///   - HasSpecialFeature: Optional filter by items with special features.
                ///   - HasTrailer: Optional filter by items with trailers.
                ///   - AdjacentTo: Optional. Return items that are siblings of a supplied item.
                ///   - MinIndexNumber: Optional filter by minimum index number.
                ///   - MinStartDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxStartDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinEndDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxEndDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinPlayers: Optional filter by minimum number of game players.
                ///   - MaxPlayers: Optional filter by maximum number of game players.
                ///   - ParentIndexNumber: Optional filter by parent index number.
                ///   - HasParentalRating: Optional filter by items that have or do not have a parental rating
                ///   - IsHD: Optional filter by items that are HD or not.
                ///   - IsUnaired: Optional filter by items that are unaired episodes or not.
                ///   - MinCommunityRating: Optional filter by minimum community rating.
                ///   - MinCriticRating: Optional filter by minimum critic rating.
                ///   - AiredDuringSeason: Gets all episodes that aired during a season, including specials.
                ///   - MinPremiereDate: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSaved: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSavedForUser: Optional. The minimum premiere date. Format = ISO
                ///   - MaxPremiereDate: Optional. The maximum premiere date. Format = ISO
                ///   - HasOverview: Optional filter by items that have an overview or not.
                ///   - HasImdbId: Optional filter by items that have an imdb id or not.
                ///   - HasTmdbId: Optional filter by items that have a tmdb id or not.
                ///   - HasTvdbId: Optional filter by items that have a tvdb id or not.
                ///   - ExcludeItemIds: Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///   - StartIndex: Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///   - Limit: Optional. The maximum number of records to return
                ///   - Recursive: When searching within folders, this determines whether or not the search will be recursive. true/false
                ///   - SearchTerm: Enter a search term to perform a search request
                ///   - SortOrder: Sort Order - Ascending,Descending
                ///   - ParentId: Specify this to localize the search to a specific item or folder. Omit to use the root
                ///   - Fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///   - ExcludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - IncludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - AnyProviderIdEquals: Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///   - Filters: Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///   - IsFavorite: Optional filter by items that are marked as favorite, or not.
                ///   - IsMovie: Optional filter for movies.
                ///   - IsSeries: Optional filter for series.
                ///   - IsFolder: Optional filter for folders.
                ///   - IsNews: Optional filter for news.
                ///   - IsKids: Optional filter for kids.
                ///   - IsSports: Optional filter for sports.
                ///   - IsNew: Optional filter for IsNew.
                ///   - IsPremiere: Optional filter for IsPremiere.
                ///   - IsNewOrPremiere: Optional filter for IsNewOrPremiere.
                ///   - IsRepeat: Optional filter for IsRepeat.
                ///   - ProjectToMedia: ProjectToMedia
                ///   - MediaTypes: Optional filter by MediaType. Allows multiple, comma delimited.
                ///   - ImageTypes: Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///   - SortBy: Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///   - IsPlayed: Optional filter by items that are played, or not.
                ///   - Genres: Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///   - OfficialRatings: Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///   - Tags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - ExcludeTags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - Years: Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///   - EnableImages: Optional, include image information in output
                ///   - EnableUserData: Optional, include user data
                ///   - ImageTypeLimit: Optional, the max number of images to return, per image type
                ///   - EnableImageTypes: Optional. The image types to include in the output.
                ///   - Person: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonIds: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonTypes: Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///   - Studios: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - StudioIds: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - Artists: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - ArtistIds: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - Albums: Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///   - Ids: Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///   - VideoTypes: Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///   - Containers: Optional filter by Container. Allows multiple, comma delimeted.
                ///   - AudioCodecs: Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///   - AudioLayouts: Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///   - VideoCodecs: Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///   - ExtendedVideoTypes: Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///   - SubtitleCodecs: Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///   - Path: Optional filter by Path.
                ///   - UserId: User Id
                ///   - MinOfficialRating: Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///   - IsLocked: Optional filter by items that are locked.
                ///   - IsPlaceHolder: Optional filter by items that are placeholders
                ///   - HasOfficialRating: Optional filter by items that have official ratings
                ///   - GroupItemsIntoCollections: Whether or not to hide items behind their boxsets.
                ///   - Is3D: Optional filter by items that are 3D, or not.
                ///   - SeriesStatus: Optional filter by Series Status. Allows multiple, comma delimeted.
                ///   - NameStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - ArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - AlbumArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - NameStartsWith: Optional filter by items whose name is sorted equally than a given input string.
                ///   - NameLessThan: Optional filter by items whose name is equally or lesser than a given input string.
                internal init(
                    ArtistType: Swift.String? = nil,
                    MaxOfficialRating: Swift.String? = nil,
                    HasThemeSong: Swift.Bool? = nil,
                    HasThemeVideo: Swift.Bool? = nil,
                    HasSubtitles: Swift.Bool? = nil,
                    HasSpecialFeature: Swift.Bool? = nil,
                    HasTrailer: Swift.Bool? = nil,
                    AdjacentTo: Swift.String? = nil,
                    MinIndexNumber: Swift.Int32? = nil,
                    MinStartDate: Swift.String? = nil,
                    MaxStartDate: Swift.String? = nil,
                    MinEndDate: Swift.String? = nil,
                    MaxEndDate: Swift.String? = nil,
                    MinPlayers: Swift.Int32? = nil,
                    MaxPlayers: Swift.Int32? = nil,
                    ParentIndexNumber: Swift.Int32? = nil,
                    HasParentalRating: Swift.Bool? = nil,
                    IsHD: Swift.Bool? = nil,
                    IsUnaired: Swift.Bool? = nil,
                    MinCommunityRating: Swift.Double? = nil,
                    MinCriticRating: Swift.Double? = nil,
                    AiredDuringSeason: Swift.Int32? = nil,
                    MinPremiereDate: Swift.String? = nil,
                    MinDateLastSaved: Swift.String? = nil,
                    MinDateLastSavedForUser: Swift.String? = nil,
                    MaxPremiereDate: Swift.String? = nil,
                    HasOverview: Swift.Bool? = nil,
                    HasImdbId: Swift.Bool? = nil,
                    HasTmdbId: Swift.Bool? = nil,
                    HasTvdbId: Swift.Bool? = nil,
                    ExcludeItemIds: Swift.String? = nil,
                    StartIndex: Swift.Int32? = nil,
                    Limit: Swift.Int32? = nil,
                    Recursive: Swift.Bool? = nil,
                    SearchTerm: Swift.String? = nil,
                    SortOrder: Swift.String? = nil,
                    ParentId: Swift.String? = nil,
                    Fields: Swift.String? = nil,
                    ExcludeItemTypes: Swift.String? = nil,
                    IncludeItemTypes: Swift.String? = nil,
                    AnyProviderIdEquals: Swift.String? = nil,
                    Filters: Swift.String? = nil,
                    IsFavorite: Swift.Bool? = nil,
                    IsMovie: Swift.Bool? = nil,
                    IsSeries: Swift.Bool? = nil,
                    IsFolder: Swift.Bool? = nil,
                    IsNews: Swift.Bool? = nil,
                    IsKids: Swift.Bool? = nil,
                    IsSports: Swift.Bool? = nil,
                    IsNew: Swift.Bool? = nil,
                    IsPremiere: Swift.Bool? = nil,
                    IsNewOrPremiere: Swift.Bool? = nil,
                    IsRepeat: Swift.Bool? = nil,
                    ProjectToMedia: Swift.Bool? = nil,
                    MediaTypes: Swift.String? = nil,
                    ImageTypes: Swift.String? = nil,
                    SortBy: Swift.String? = nil,
                    IsPlayed: Swift.Bool? = nil,
                    Genres: Swift.String? = nil,
                    OfficialRatings: Swift.String? = nil,
                    Tags: Swift.String? = nil,
                    ExcludeTags: Swift.String? = nil,
                    Years: Swift.String? = nil,
                    EnableImages: Swift.Bool? = nil,
                    EnableUserData: Swift.Bool? = nil,
                    ImageTypeLimit: Swift.Int32? = nil,
                    EnableImageTypes: Swift.String? = nil,
                    Person: Swift.String? = nil,
                    PersonIds: Swift.String? = nil,
                    PersonTypes: Swift.String? = nil,
                    Studios: Swift.String? = nil,
                    StudioIds: Swift.String? = nil,
                    Artists: Swift.String? = nil,
                    ArtistIds: Swift.String? = nil,
                    Albums: Swift.String? = nil,
                    Ids: Swift.String? = nil,
                    VideoTypes: Swift.String? = nil,
                    Containers: Swift.String? = nil,
                    AudioCodecs: Swift.String? = nil,
                    AudioLayouts: Swift.String? = nil,
                    VideoCodecs: Swift.String? = nil,
                    ExtendedVideoTypes: Swift.String? = nil,
                    SubtitleCodecs: Swift.String? = nil,
                    Path: Swift.String? = nil,
                    UserId: Swift.String? = nil,
                    MinOfficialRating: Swift.String? = nil,
                    IsLocked: Swift.Bool? = nil,
                    IsPlaceHolder: Swift.Bool? = nil,
                    HasOfficialRating: Swift.Bool? = nil,
                    GroupItemsIntoCollections: Swift.Bool? = nil,
                    Is3D: Swift.Bool? = nil,
                    SeriesStatus: Swift.String? = nil,
                    NameStartsWithOrGreater: Swift.String? = nil,
                    ArtistStartsWithOrGreater: Swift.String? = nil,
                    AlbumArtistStartsWithOrGreater: Swift.String? = nil,
                    NameStartsWith: Swift.String? = nil,
                    NameLessThan: Swift.String? = nil
                ) {
                    self.ArtistType = ArtistType
                    self.MaxOfficialRating = MaxOfficialRating
                    self.HasThemeSong = HasThemeSong
                    self.HasThemeVideo = HasThemeVideo
                    self.HasSubtitles = HasSubtitles
                    self.HasSpecialFeature = HasSpecialFeature
                    self.HasTrailer = HasTrailer
                    self.AdjacentTo = AdjacentTo
                    self.MinIndexNumber = MinIndexNumber
                    self.MinStartDate = MinStartDate
                    self.MaxStartDate = MaxStartDate
                    self.MinEndDate = MinEndDate
                    self.MaxEndDate = MaxEndDate
                    self.MinPlayers = MinPlayers
                    self.MaxPlayers = MaxPlayers
                    self.ParentIndexNumber = ParentIndexNumber
                    self.HasParentalRating = HasParentalRating
                    self.IsHD = IsHD
                    self.IsUnaired = IsUnaired
                    self.MinCommunityRating = MinCommunityRating
                    self.MinCriticRating = MinCriticRating
                    self.AiredDuringSeason = AiredDuringSeason
                    self.MinPremiereDate = MinPremiereDate
                    self.MinDateLastSaved = MinDateLastSaved
                    self.MinDateLastSavedForUser = MinDateLastSavedForUser
                    self.MaxPremiereDate = MaxPremiereDate
                    self.HasOverview = HasOverview
                    self.HasImdbId = HasImdbId
                    self.HasTmdbId = HasTmdbId
                    self.HasTvdbId = HasTvdbId
                    self.ExcludeItemIds = ExcludeItemIds
                    self.StartIndex = StartIndex
                    self.Limit = Limit
                    self.Recursive = Recursive
                    self.SearchTerm = SearchTerm
                    self.SortOrder = SortOrder
                    self.ParentId = ParentId
                    self.Fields = Fields
                    self.ExcludeItemTypes = ExcludeItemTypes
                    self.IncludeItemTypes = IncludeItemTypes
                    self.AnyProviderIdEquals = AnyProviderIdEquals
                    self.Filters = Filters
                    self.IsFavorite = IsFavorite
                    self.IsMovie = IsMovie
                    self.IsSeries = IsSeries
                    self.IsFolder = IsFolder
                    self.IsNews = IsNews
                    self.IsKids = IsKids
                    self.IsSports = IsSports
                    self.IsNew = IsNew
                    self.IsPremiere = IsPremiere
                    self.IsNewOrPremiere = IsNewOrPremiere
                    self.IsRepeat = IsRepeat
                    self.ProjectToMedia = ProjectToMedia
                    self.MediaTypes = MediaTypes
                    self.ImageTypes = ImageTypes
                    self.SortBy = SortBy
                    self.IsPlayed = IsPlayed
                    self.Genres = Genres
                    self.OfficialRatings = OfficialRatings
                    self.Tags = Tags
                    self.ExcludeTags = ExcludeTags
                    self.Years = Years
                    self.EnableImages = EnableImages
                    self.EnableUserData = EnableUserData
                    self.ImageTypeLimit = ImageTypeLimit
                    self.EnableImageTypes = EnableImageTypes
                    self.Person = Person
                    self.PersonIds = PersonIds
                    self.PersonTypes = PersonTypes
                    self.Studios = Studios
                    self.StudioIds = StudioIds
                    self.Artists = Artists
                    self.ArtistIds = ArtistIds
                    self.Albums = Albums
                    self.Ids = Ids
                    self.VideoTypes = VideoTypes
                    self.Containers = Containers
                    self.AudioCodecs = AudioCodecs
                    self.AudioLayouts = AudioLayouts
                    self.VideoCodecs = VideoCodecs
                    self.ExtendedVideoTypes = ExtendedVideoTypes
                    self.SubtitleCodecs = SubtitleCodecs
                    self.Path = Path
                    self.UserId = UserId
                    self.MinOfficialRating = MinOfficialRating
                    self.IsLocked = IsLocked
                    self.IsPlaceHolder = IsPlaceHolder
                    self.HasOfficialRating = HasOfficialRating
                    self.GroupItemsIntoCollections = GroupItemsIntoCollections
                    self.Is3D = Is3D
                    self.SeriesStatus = SeriesStatus
                    self.NameStartsWithOrGreater = NameStartsWithOrGreater
                    self.ArtistStartsWithOrGreater = ArtistStartsWithOrGreater
                    self.AlbumArtistStartsWithOrGreater = AlbumArtistStartsWithOrGreater
                    self.NameStartsWith = NameStartsWith
                    self.NameLessThan = NameLessThan
                }
            }
            internal var query: Operations.getArtists.Input.Query
            /// - Remark: Generated from `#/paths/Artists/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtists.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtists.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getArtists.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getArtists.Input.Query = .init(),
                headers: Operations.getArtists.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Artists/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Artists/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResult_BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResult_BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Artists/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getArtists.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getArtists.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a QueryResult<BaseItemDto> object.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getArtists.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getArtists.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Artists/get(getArtists)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Items`.
    /// - Remark: Generated from `#/paths//Items/get(getItems)`.
    internal enum getItems {
        internal static let id: Swift.String = "getItems"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Items/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Artist or AlbumArtist
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ArtistType`.
                internal var ArtistType: Swift.String?
                /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MaxOfficialRating`.
                internal var MaxOfficialRating: Swift.String?
                /// Optional filter by items with theme songs.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasThemeSong`.
                internal var HasThemeSong: Swift.Bool?
                /// Optional filter by items with theme videos.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasThemeVideo`.
                internal var HasThemeVideo: Swift.Bool?
                /// Optional filter by items with subtitles.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasSubtitles`.
                internal var HasSubtitles: Swift.Bool?
                /// Optional filter by items with special features.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasSpecialFeature`.
                internal var HasSpecialFeature: Swift.Bool?
                /// Optional filter by items with trailers.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasTrailer`.
                internal var HasTrailer: Swift.Bool?
                /// Optional. Return items that are siblings of a supplied item.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/AdjacentTo`.
                internal var AdjacentTo: Swift.String?
                /// Optional filter by minimum index number.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinIndexNumber`.
                internal var MinIndexNumber: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinStartDate`.
                internal var MinStartDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MaxStartDate`.
                internal var MaxStartDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinEndDate`.
                internal var MinEndDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MaxEndDate`.
                internal var MaxEndDate: Swift.String?
                /// Optional filter by minimum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinPlayers`.
                internal var MinPlayers: Swift.Int32?
                /// Optional filter by maximum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MaxPlayers`.
                internal var MaxPlayers: Swift.Int32?
                /// Optional filter by parent index number.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ParentIndexNumber`.
                internal var ParentIndexNumber: Swift.Int32?
                /// Optional filter by items that have or do not have a parental rating
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasParentalRating`.
                internal var HasParentalRating: Swift.Bool?
                /// Optional filter by items that are HD or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsHD`.
                internal var IsHD: Swift.Bool?
                /// Optional filter by items that are unaired episodes or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsUnaired`.
                internal var IsUnaired: Swift.Bool?
                /// Optional filter by minimum community rating.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinCommunityRating`.
                internal var MinCommunityRating: Swift.Double?
                /// Optional filter by minimum critic rating.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinCriticRating`.
                internal var MinCriticRating: Swift.Double?
                /// Gets all episodes that aired during a season, including specials.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/AiredDuringSeason`.
                internal var AiredDuringSeason: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinPremiereDate`.
                internal var MinPremiereDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinDateLastSaved`.
                internal var MinDateLastSaved: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinDateLastSavedForUser`.
                internal var MinDateLastSavedForUser: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MaxPremiereDate`.
                internal var MaxPremiereDate: Swift.String?
                /// Optional filter by items that have an overview or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasOverview`.
                internal var HasOverview: Swift.Bool?
                /// Optional filter by items that have an imdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasImdbId`.
                internal var HasImdbId: Swift.Bool?
                /// Optional filter by items that have a tmdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasTmdbId`.
                internal var HasTmdbId: Swift.Bool?
                /// Optional filter by items that have a tvdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasTvdbId`.
                internal var HasTvdbId: Swift.Bool?
                /// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ExcludeItemIds`.
                internal var ExcludeItemIds: Swift.String?
                /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/StartIndex`.
                internal var StartIndex: Swift.Int32?
                /// Optional. The maximum number of records to return
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Limit`.
                internal var Limit: Swift.Int32?
                /// When searching within folders, this determines whether or not the search will be recursive. true/false
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Recursive`.
                internal var Recursive: Swift.Bool?
                /// Enter a search term to perform a search request
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/SearchTerm`.
                internal var SearchTerm: Swift.String?
                /// Sort Order - Ascending,Descending
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/SortOrder`.
                internal var SortOrder: Swift.String?
                /// Specify this to localize the search to a specific item or folder. Omit to use the root
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ParentId`.
                internal var ParentId: Swift.String?
                /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Fields`.
                internal var Fields: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ExcludeItemTypes`.
                internal var ExcludeItemTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IncludeItemTypes`.
                internal var IncludeItemTypes: Swift.String?
                /// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/AnyProviderIdEquals`.
                internal var AnyProviderIdEquals: Swift.String?
                /// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Filters`.
                internal var Filters: Swift.String?
                /// Optional filter by items that are marked as favorite, or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsFavorite`.
                internal var IsFavorite: Swift.Bool?
                /// Optional filter for movies.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsMovie`.
                internal var IsMovie: Swift.Bool?
                /// Optional filter for series.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsSeries`.
                internal var IsSeries: Swift.Bool?
                /// Optional filter for folders.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsFolder`.
                internal var IsFolder: Swift.Bool?
                /// Optional filter for news.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsNews`.
                internal var IsNews: Swift.Bool?
                /// Optional filter for kids.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsKids`.
                internal var IsKids: Swift.Bool?
                /// Optional filter for sports.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsSports`.
                internal var IsSports: Swift.Bool?
                /// Optional filter for IsNew.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsNew`.
                internal var IsNew: Swift.Bool?
                /// Optional filter for IsPremiere.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsPremiere`.
                internal var IsPremiere: Swift.Bool?
                /// Optional filter for IsNewOrPremiere.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsNewOrPremiere`.
                internal var IsNewOrPremiere: Swift.Bool?
                /// Optional filter for IsRepeat.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsRepeat`.
                internal var IsRepeat: Swift.Bool?
                /// ProjectToMedia
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ProjectToMedia`.
                internal var ProjectToMedia: Swift.Bool?
                /// Optional filter by MediaType. Allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MediaTypes`.
                internal var MediaTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ImageTypes`.
                internal var ImageTypes: Swift.String?
                /// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/SortBy`.
                internal var SortBy: Swift.String?
                /// Optional filter by items that are played, or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsPlayed`.
                internal var IsPlayed: Swift.Bool?
                /// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Genres`.
                internal var Genres: Swift.String?
                /// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/OfficialRatings`.
                internal var OfficialRatings: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Tags`.
                internal var Tags: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ExcludeTags`.
                internal var ExcludeTags: Swift.String?
                /// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Years`.
                internal var Years: Swift.String?
                /// Optional, include image information in output
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/EnableImages`.
                internal var EnableImages: Swift.Bool?
                /// Optional, include user data
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/EnableUserData`.
                internal var EnableUserData: Swift.Bool?
                /// Optional, the max number of images to return, per image type
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ImageTypeLimit`.
                internal var ImageTypeLimit: Swift.Int32?
                /// Optional. The image types to include in the output.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/EnableImageTypes`.
                internal var EnableImageTypes: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Person`.
                internal var Person: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/PersonIds`.
                internal var PersonIds: Swift.String?
                /// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/PersonTypes`.
                internal var PersonTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Studios`.
                internal var Studios: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/StudioIds`.
                internal var StudioIds: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Artists`.
                internal var Artists: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ArtistIds`.
                internal var ArtistIds: Swift.String?
                /// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Albums`.
                internal var Albums: Swift.String?
                /// Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Ids`.
                internal var Ids: Swift.String?
                /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/VideoTypes`.
                internal var VideoTypes: Swift.String?
                /// Optional filter by Container. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Containers`.
                internal var Containers: Swift.String?
                /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/AudioCodecs`.
                internal var AudioCodecs: Swift.String?
                /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/AudioLayouts`.
                internal var AudioLayouts: Swift.String?
                /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/VideoCodecs`.
                internal var VideoCodecs: Swift.String?
                /// Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ExtendedVideoTypes`.
                internal var ExtendedVideoTypes: Swift.String?
                /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/SubtitleCodecs`.
                internal var SubtitleCodecs: Swift.String?
                /// Optional filter by Path.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Path`.
                internal var Path: Swift.String?
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/UserId`.
                internal var UserId: Swift.String?
                /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/MinOfficialRating`.
                internal var MinOfficialRating: Swift.String?
                /// Optional filter by items that are locked.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsLocked`.
                internal var IsLocked: Swift.Bool?
                /// Optional filter by items that are placeholders
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/IsPlaceHolder`.
                internal var IsPlaceHolder: Swift.Bool?
                /// Optional filter by items that have official ratings
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/HasOfficialRating`.
                internal var HasOfficialRating: Swift.Bool?
                /// Whether or not to hide items behind their boxsets.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/GroupItemsIntoCollections`.
                internal var GroupItemsIntoCollections: Swift.Bool?
                /// Optional filter by items that are 3D, or not.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/Is3D`.
                internal var Is3D: Swift.Bool?
                /// Optional filter by Series Status. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/SeriesStatus`.
                internal var SeriesStatus: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/NameStartsWithOrGreater`.
                internal var NameStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/ArtistStartsWithOrGreater`.
                internal var ArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/AlbumArtistStartsWithOrGreater`.
                internal var AlbumArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/NameStartsWith`.
                internal var NameStartsWith: Swift.String?
                /// Optional filter by items whose name is equally or lesser than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Items/GET/query/NameLessThan`.
                internal var NameLessThan: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ArtistType: Artist or AlbumArtist
                ///   - MaxOfficialRating: Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///   - HasThemeSong: Optional filter by items with theme songs.
                ///   - HasThemeVideo: Optional filter by items with theme videos.
                ///   - HasSubtitles: Optional filter by items with subtitles.
                ///   - HasSpecialFeature: Optional filter by items with special features.
                ///   - HasTrailer: Optional filter by items with trailers.
                ///   - AdjacentTo: Optional. Return items that are siblings of a supplied item.
                ///   - MinIndexNumber: Optional filter by minimum index number.
                ///   - MinStartDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxStartDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinEndDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxEndDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinPlayers: Optional filter by minimum number of game players.
                ///   - MaxPlayers: Optional filter by maximum number of game players.
                ///   - ParentIndexNumber: Optional filter by parent index number.
                ///   - HasParentalRating: Optional filter by items that have or do not have a parental rating
                ///   - IsHD: Optional filter by items that are HD or not.
                ///   - IsUnaired: Optional filter by items that are unaired episodes or not.
                ///   - MinCommunityRating: Optional filter by minimum community rating.
                ///   - MinCriticRating: Optional filter by minimum critic rating.
                ///   - AiredDuringSeason: Gets all episodes that aired during a season, including specials.
                ///   - MinPremiereDate: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSaved: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSavedForUser: Optional. The minimum premiere date. Format = ISO
                ///   - MaxPremiereDate: Optional. The maximum premiere date. Format = ISO
                ///   - HasOverview: Optional filter by items that have an overview or not.
                ///   - HasImdbId: Optional filter by items that have an imdb id or not.
                ///   - HasTmdbId: Optional filter by items that have a tmdb id or not.
                ///   - HasTvdbId: Optional filter by items that have a tvdb id or not.
                ///   - ExcludeItemIds: Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///   - StartIndex: Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///   - Limit: Optional. The maximum number of records to return
                ///   - Recursive: When searching within folders, this determines whether or not the search will be recursive. true/false
                ///   - SearchTerm: Enter a search term to perform a search request
                ///   - SortOrder: Sort Order - Ascending,Descending
                ///   - ParentId: Specify this to localize the search to a specific item or folder. Omit to use the root
                ///   - Fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///   - ExcludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - IncludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - AnyProviderIdEquals: Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///   - Filters: Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///   - IsFavorite: Optional filter by items that are marked as favorite, or not.
                ///   - IsMovie: Optional filter for movies.
                ///   - IsSeries: Optional filter for series.
                ///   - IsFolder: Optional filter for folders.
                ///   - IsNews: Optional filter for news.
                ///   - IsKids: Optional filter for kids.
                ///   - IsSports: Optional filter for sports.
                ///   - IsNew: Optional filter for IsNew.
                ///   - IsPremiere: Optional filter for IsPremiere.
                ///   - IsNewOrPremiere: Optional filter for IsNewOrPremiere.
                ///   - IsRepeat: Optional filter for IsRepeat.
                ///   - ProjectToMedia: ProjectToMedia
                ///   - MediaTypes: Optional filter by MediaType. Allows multiple, comma delimited.
                ///   - ImageTypes: Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///   - SortBy: Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///   - IsPlayed: Optional filter by items that are played, or not.
                ///   - Genres: Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///   - OfficialRatings: Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///   - Tags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - ExcludeTags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - Years: Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///   - EnableImages: Optional, include image information in output
                ///   - EnableUserData: Optional, include user data
                ///   - ImageTypeLimit: Optional, the max number of images to return, per image type
                ///   - EnableImageTypes: Optional. The image types to include in the output.
                ///   - Person: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonIds: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonTypes: Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///   - Studios: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - StudioIds: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - Artists: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - ArtistIds: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - Albums: Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///   - Ids: Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///   - VideoTypes: Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///   - Containers: Optional filter by Container. Allows multiple, comma delimeted.
                ///   - AudioCodecs: Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///   - AudioLayouts: Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///   - VideoCodecs: Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///   - ExtendedVideoTypes: Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///   - SubtitleCodecs: Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///   - Path: Optional filter by Path.
                ///   - UserId: User Id
                ///   - MinOfficialRating: Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///   - IsLocked: Optional filter by items that are locked.
                ///   - IsPlaceHolder: Optional filter by items that are placeholders
                ///   - HasOfficialRating: Optional filter by items that have official ratings
                ///   - GroupItemsIntoCollections: Whether or not to hide items behind their boxsets.
                ///   - Is3D: Optional filter by items that are 3D, or not.
                ///   - SeriesStatus: Optional filter by Series Status. Allows multiple, comma delimeted.
                ///   - NameStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - ArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - AlbumArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - NameStartsWith: Optional filter by items whose name is sorted equally than a given input string.
                ///   - NameLessThan: Optional filter by items whose name is equally or lesser than a given input string.
                internal init(
                    ArtistType: Swift.String? = nil,
                    MaxOfficialRating: Swift.String? = nil,
                    HasThemeSong: Swift.Bool? = nil,
                    HasThemeVideo: Swift.Bool? = nil,
                    HasSubtitles: Swift.Bool? = nil,
                    HasSpecialFeature: Swift.Bool? = nil,
                    HasTrailer: Swift.Bool? = nil,
                    AdjacentTo: Swift.String? = nil,
                    MinIndexNumber: Swift.Int32? = nil,
                    MinStartDate: Swift.String? = nil,
                    MaxStartDate: Swift.String? = nil,
                    MinEndDate: Swift.String? = nil,
                    MaxEndDate: Swift.String? = nil,
                    MinPlayers: Swift.Int32? = nil,
                    MaxPlayers: Swift.Int32? = nil,
                    ParentIndexNumber: Swift.Int32? = nil,
                    HasParentalRating: Swift.Bool? = nil,
                    IsHD: Swift.Bool? = nil,
                    IsUnaired: Swift.Bool? = nil,
                    MinCommunityRating: Swift.Double? = nil,
                    MinCriticRating: Swift.Double? = nil,
                    AiredDuringSeason: Swift.Int32? = nil,
                    MinPremiereDate: Swift.String? = nil,
                    MinDateLastSaved: Swift.String? = nil,
                    MinDateLastSavedForUser: Swift.String? = nil,
                    MaxPremiereDate: Swift.String? = nil,
                    HasOverview: Swift.Bool? = nil,
                    HasImdbId: Swift.Bool? = nil,
                    HasTmdbId: Swift.Bool? = nil,
                    HasTvdbId: Swift.Bool? = nil,
                    ExcludeItemIds: Swift.String? = nil,
                    StartIndex: Swift.Int32? = nil,
                    Limit: Swift.Int32? = nil,
                    Recursive: Swift.Bool? = nil,
                    SearchTerm: Swift.String? = nil,
                    SortOrder: Swift.String? = nil,
                    ParentId: Swift.String? = nil,
                    Fields: Swift.String? = nil,
                    ExcludeItemTypes: Swift.String? = nil,
                    IncludeItemTypes: Swift.String? = nil,
                    AnyProviderIdEquals: Swift.String? = nil,
                    Filters: Swift.String? = nil,
                    IsFavorite: Swift.Bool? = nil,
                    IsMovie: Swift.Bool? = nil,
                    IsSeries: Swift.Bool? = nil,
                    IsFolder: Swift.Bool? = nil,
                    IsNews: Swift.Bool? = nil,
                    IsKids: Swift.Bool? = nil,
                    IsSports: Swift.Bool? = nil,
                    IsNew: Swift.Bool? = nil,
                    IsPremiere: Swift.Bool? = nil,
                    IsNewOrPremiere: Swift.Bool? = nil,
                    IsRepeat: Swift.Bool? = nil,
                    ProjectToMedia: Swift.Bool? = nil,
                    MediaTypes: Swift.String? = nil,
                    ImageTypes: Swift.String? = nil,
                    SortBy: Swift.String? = nil,
                    IsPlayed: Swift.Bool? = nil,
                    Genres: Swift.String? = nil,
                    OfficialRatings: Swift.String? = nil,
                    Tags: Swift.String? = nil,
                    ExcludeTags: Swift.String? = nil,
                    Years: Swift.String? = nil,
                    EnableImages: Swift.Bool? = nil,
                    EnableUserData: Swift.Bool? = nil,
                    ImageTypeLimit: Swift.Int32? = nil,
                    EnableImageTypes: Swift.String? = nil,
                    Person: Swift.String? = nil,
                    PersonIds: Swift.String? = nil,
                    PersonTypes: Swift.String? = nil,
                    Studios: Swift.String? = nil,
                    StudioIds: Swift.String? = nil,
                    Artists: Swift.String? = nil,
                    ArtistIds: Swift.String? = nil,
                    Albums: Swift.String? = nil,
                    Ids: Swift.String? = nil,
                    VideoTypes: Swift.String? = nil,
                    Containers: Swift.String? = nil,
                    AudioCodecs: Swift.String? = nil,
                    AudioLayouts: Swift.String? = nil,
                    VideoCodecs: Swift.String? = nil,
                    ExtendedVideoTypes: Swift.String? = nil,
                    SubtitleCodecs: Swift.String? = nil,
                    Path: Swift.String? = nil,
                    UserId: Swift.String? = nil,
                    MinOfficialRating: Swift.String? = nil,
                    IsLocked: Swift.Bool? = nil,
                    IsPlaceHolder: Swift.Bool? = nil,
                    HasOfficialRating: Swift.Bool? = nil,
                    GroupItemsIntoCollections: Swift.Bool? = nil,
                    Is3D: Swift.Bool? = nil,
                    SeriesStatus: Swift.String? = nil,
                    NameStartsWithOrGreater: Swift.String? = nil,
                    ArtistStartsWithOrGreater: Swift.String? = nil,
                    AlbumArtistStartsWithOrGreater: Swift.String? = nil,
                    NameStartsWith: Swift.String? = nil,
                    NameLessThan: Swift.String? = nil
                ) {
                    self.ArtistType = ArtistType
                    self.MaxOfficialRating = MaxOfficialRating
                    self.HasThemeSong = HasThemeSong
                    self.HasThemeVideo = HasThemeVideo
                    self.HasSubtitles = HasSubtitles
                    self.HasSpecialFeature = HasSpecialFeature
                    self.HasTrailer = HasTrailer
                    self.AdjacentTo = AdjacentTo
                    self.MinIndexNumber = MinIndexNumber
                    self.MinStartDate = MinStartDate
                    self.MaxStartDate = MaxStartDate
                    self.MinEndDate = MinEndDate
                    self.MaxEndDate = MaxEndDate
                    self.MinPlayers = MinPlayers
                    self.MaxPlayers = MaxPlayers
                    self.ParentIndexNumber = ParentIndexNumber
                    self.HasParentalRating = HasParentalRating
                    self.IsHD = IsHD
                    self.IsUnaired = IsUnaired
                    self.MinCommunityRating = MinCommunityRating
                    self.MinCriticRating = MinCriticRating
                    self.AiredDuringSeason = AiredDuringSeason
                    self.MinPremiereDate = MinPremiereDate
                    self.MinDateLastSaved = MinDateLastSaved
                    self.MinDateLastSavedForUser = MinDateLastSavedForUser
                    self.MaxPremiereDate = MaxPremiereDate
                    self.HasOverview = HasOverview
                    self.HasImdbId = HasImdbId
                    self.HasTmdbId = HasTmdbId
                    self.HasTvdbId = HasTvdbId
                    self.ExcludeItemIds = ExcludeItemIds
                    self.StartIndex = StartIndex
                    self.Limit = Limit
                    self.Recursive = Recursive
                    self.SearchTerm = SearchTerm
                    self.SortOrder = SortOrder
                    self.ParentId = ParentId
                    self.Fields = Fields
                    self.ExcludeItemTypes = ExcludeItemTypes
                    self.IncludeItemTypes = IncludeItemTypes
                    self.AnyProviderIdEquals = AnyProviderIdEquals
                    self.Filters = Filters
                    self.IsFavorite = IsFavorite
                    self.IsMovie = IsMovie
                    self.IsSeries = IsSeries
                    self.IsFolder = IsFolder
                    self.IsNews = IsNews
                    self.IsKids = IsKids
                    self.IsSports = IsSports
                    self.IsNew = IsNew
                    self.IsPremiere = IsPremiere
                    self.IsNewOrPremiere = IsNewOrPremiere
                    self.IsRepeat = IsRepeat
                    self.ProjectToMedia = ProjectToMedia
                    self.MediaTypes = MediaTypes
                    self.ImageTypes = ImageTypes
                    self.SortBy = SortBy
                    self.IsPlayed = IsPlayed
                    self.Genres = Genres
                    self.OfficialRatings = OfficialRatings
                    self.Tags = Tags
                    self.ExcludeTags = ExcludeTags
                    self.Years = Years
                    self.EnableImages = EnableImages
                    self.EnableUserData = EnableUserData
                    self.ImageTypeLimit = ImageTypeLimit
                    self.EnableImageTypes = EnableImageTypes
                    self.Person = Person
                    self.PersonIds = PersonIds
                    self.PersonTypes = PersonTypes
                    self.Studios = Studios
                    self.StudioIds = StudioIds
                    self.Artists = Artists
                    self.ArtistIds = ArtistIds
                    self.Albums = Albums
                    self.Ids = Ids
                    self.VideoTypes = VideoTypes
                    self.Containers = Containers
                    self.AudioCodecs = AudioCodecs
                    self.AudioLayouts = AudioLayouts
                    self.VideoCodecs = VideoCodecs
                    self.ExtendedVideoTypes = ExtendedVideoTypes
                    self.SubtitleCodecs = SubtitleCodecs
                    self.Path = Path
                    self.UserId = UserId
                    self.MinOfficialRating = MinOfficialRating
                    self.IsLocked = IsLocked
                    self.IsPlaceHolder = IsPlaceHolder
                    self.HasOfficialRating = HasOfficialRating
                    self.GroupItemsIntoCollections = GroupItemsIntoCollections
                    self.Is3D = Is3D
                    self.SeriesStatus = SeriesStatus
                    self.NameStartsWithOrGreater = NameStartsWithOrGreater
                    self.ArtistStartsWithOrGreater = ArtistStartsWithOrGreater
                    self.AlbumArtistStartsWithOrGreater = AlbumArtistStartsWithOrGreater
                    self.NameStartsWith = NameStartsWith
                    self.NameLessThan = NameLessThan
                }
            }
            internal var query: Operations.getItems.Input.Query
            /// - Remark: Generated from `#/paths/Items/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getItems.Input.Query = .init(),
                headers: Operations.getItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Items/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Items/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResult_BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResult_BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Items/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a QueryResult<BaseItemDto> object.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Items/get(getItems)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets all music genres from a given item, folder, or the entire library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /MusicGenres`.
    /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)`.
    internal enum getMusicgenres {
        internal static let id: Swift.String = "getMusicgenres"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/MusicGenres/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Artist or AlbumArtist
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ArtistType`.
                internal var ArtistType: Swift.String?
                /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MaxOfficialRating`.
                internal var MaxOfficialRating: Swift.String?
                /// Optional filter by items with theme songs.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasThemeSong`.
                internal var HasThemeSong: Swift.Bool?
                /// Optional filter by items with theme videos.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasThemeVideo`.
                internal var HasThemeVideo: Swift.Bool?
                /// Optional filter by items with subtitles.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasSubtitles`.
                internal var HasSubtitles: Swift.Bool?
                /// Optional filter by items with special features.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasSpecialFeature`.
                internal var HasSpecialFeature: Swift.Bool?
                /// Optional filter by items with trailers.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasTrailer`.
                internal var HasTrailer: Swift.Bool?
                /// Optional. Return items that are siblings of a supplied item.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/AdjacentTo`.
                internal var AdjacentTo: Swift.String?
                /// Optional filter by minimum index number.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinIndexNumber`.
                internal var MinIndexNumber: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinStartDate`.
                internal var MinStartDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MaxStartDate`.
                internal var MaxStartDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinEndDate`.
                internal var MinEndDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MaxEndDate`.
                internal var MaxEndDate: Swift.String?
                /// Optional filter by minimum number of game players.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinPlayers`.
                internal var MinPlayers: Swift.Int32?
                /// Optional filter by maximum number of game players.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MaxPlayers`.
                internal var MaxPlayers: Swift.Int32?
                /// Optional filter by parent index number.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ParentIndexNumber`.
                internal var ParentIndexNumber: Swift.Int32?
                /// Optional filter by items that have or do not have a parental rating
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasParentalRating`.
                internal var HasParentalRating: Swift.Bool?
                /// Optional filter by items that are HD or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsHD`.
                internal var IsHD: Swift.Bool?
                /// Optional filter by items that are unaired episodes or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsUnaired`.
                internal var IsUnaired: Swift.Bool?
                /// Optional filter by minimum community rating.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinCommunityRating`.
                internal var MinCommunityRating: Swift.Double?
                /// Optional filter by minimum critic rating.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinCriticRating`.
                internal var MinCriticRating: Swift.Double?
                /// Gets all episodes that aired during a season, including specials.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/AiredDuringSeason`.
                internal var AiredDuringSeason: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinPremiereDate`.
                internal var MinPremiereDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinDateLastSaved`.
                internal var MinDateLastSaved: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinDateLastSavedForUser`.
                internal var MinDateLastSavedForUser: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MaxPremiereDate`.
                internal var MaxPremiereDate: Swift.String?
                /// Optional filter by items that have an overview or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasOverview`.
                internal var HasOverview: Swift.Bool?
                /// Optional filter by items that have an imdb id or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasImdbId`.
                internal var HasImdbId: Swift.Bool?
                /// Optional filter by items that have a tmdb id or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasTmdbId`.
                internal var HasTmdbId: Swift.Bool?
                /// Optional filter by items that have a tvdb id or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasTvdbId`.
                internal var HasTvdbId: Swift.Bool?
                /// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ExcludeItemIds`.
                internal var ExcludeItemIds: Swift.String?
                /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/StartIndex`.
                internal var StartIndex: Swift.Int32?
                /// Optional. The maximum number of records to return
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Limit`.
                internal var Limit: Swift.Int32?
                /// When searching within folders, this determines whether or not the search will be recursive. true/false
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Recursive`.
                internal var Recursive: Swift.Bool?
                /// Enter a search term to perform a search request
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/SearchTerm`.
                internal var SearchTerm: Swift.String?
                /// Sort Order - Ascending,Descending
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/SortOrder`.
                internal var SortOrder: Swift.String?
                /// Specify this to localize the search to a specific item or folder. Omit to use the root
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ParentId`.
                internal var ParentId: Swift.String?
                /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Fields`.
                internal var Fields: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ExcludeItemTypes`.
                internal var ExcludeItemTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IncludeItemTypes`.
                internal var IncludeItemTypes: Swift.String?
                /// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/AnyProviderIdEquals`.
                internal var AnyProviderIdEquals: Swift.String?
                /// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Filters`.
                internal var Filters: Swift.String?
                /// Optional filter by items that are marked as favorite, or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsFavorite`.
                internal var IsFavorite: Swift.Bool?
                /// Optional filter for movies.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsMovie`.
                internal var IsMovie: Swift.Bool?
                /// Optional filter for series.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsSeries`.
                internal var IsSeries: Swift.Bool?
                /// Optional filter for folders.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsFolder`.
                internal var IsFolder: Swift.Bool?
                /// Optional filter for news.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsNews`.
                internal var IsNews: Swift.Bool?
                /// Optional filter for kids.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsKids`.
                internal var IsKids: Swift.Bool?
                /// Optional filter for sports.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsSports`.
                internal var IsSports: Swift.Bool?
                /// Optional filter for IsNew.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsNew`.
                internal var IsNew: Swift.Bool?
                /// Optional filter for IsPremiere.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsPremiere`.
                internal var IsPremiere: Swift.Bool?
                /// Optional filter for IsNewOrPremiere.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsNewOrPremiere`.
                internal var IsNewOrPremiere: Swift.Bool?
                /// Optional filter for IsRepeat.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsRepeat`.
                internal var IsRepeat: Swift.Bool?
                /// ProjectToMedia
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ProjectToMedia`.
                internal var ProjectToMedia: Swift.Bool?
                /// Optional filter by MediaType. Allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MediaTypes`.
                internal var MediaTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ImageTypes`.
                internal var ImageTypes: Swift.String?
                /// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/SortBy`.
                internal var SortBy: Swift.String?
                /// Optional filter by items that are played, or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsPlayed`.
                internal var IsPlayed: Swift.Bool?
                /// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Genres`.
                internal var Genres: Swift.String?
                /// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/OfficialRatings`.
                internal var OfficialRatings: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Tags`.
                internal var Tags: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ExcludeTags`.
                internal var ExcludeTags: Swift.String?
                /// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Years`.
                internal var Years: Swift.String?
                /// Optional, include image information in output
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/EnableImages`.
                internal var EnableImages: Swift.Bool?
                /// Optional, include user data
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/EnableUserData`.
                internal var EnableUserData: Swift.Bool?
                /// Optional, the max number of images to return, per image type
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ImageTypeLimit`.
                internal var ImageTypeLimit: Swift.Int32?
                /// Optional. The image types to include in the output.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/EnableImageTypes`.
                internal var EnableImageTypes: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Person`.
                internal var Person: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/PersonIds`.
                internal var PersonIds: Swift.String?
                /// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/PersonTypes`.
                internal var PersonTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Studios`.
                internal var Studios: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/StudioIds`.
                internal var StudioIds: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Artists`.
                internal var Artists: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ArtistIds`.
                internal var ArtistIds: Swift.String?
                /// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Albums`.
                internal var Albums: Swift.String?
                /// Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Ids`.
                internal var Ids: Swift.String?
                /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/VideoTypes`.
                internal var VideoTypes: Swift.String?
                /// Optional filter by Container. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Containers`.
                internal var Containers: Swift.String?
                /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/AudioCodecs`.
                internal var AudioCodecs: Swift.String?
                /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/AudioLayouts`.
                internal var AudioLayouts: Swift.String?
                /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/VideoCodecs`.
                internal var VideoCodecs: Swift.String?
                /// Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ExtendedVideoTypes`.
                internal var ExtendedVideoTypes: Swift.String?
                /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/SubtitleCodecs`.
                internal var SubtitleCodecs: Swift.String?
                /// Optional filter by Path.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Path`.
                internal var Path: Swift.String?
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/UserId`.
                internal var UserId: Swift.String?
                /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/MinOfficialRating`.
                internal var MinOfficialRating: Swift.String?
                /// Optional filter by items that are locked.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsLocked`.
                internal var IsLocked: Swift.Bool?
                /// Optional filter by items that are placeholders
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/IsPlaceHolder`.
                internal var IsPlaceHolder: Swift.Bool?
                /// Optional filter by items that have official ratings
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/HasOfficialRating`.
                internal var HasOfficialRating: Swift.Bool?
                /// Whether or not to hide items behind their boxsets.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/GroupItemsIntoCollections`.
                internal var GroupItemsIntoCollections: Swift.Bool?
                /// Optional filter by items that are 3D, or not.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/Is3D`.
                internal var Is3D: Swift.Bool?
                /// Optional filter by Series Status. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/SeriesStatus`.
                internal var SeriesStatus: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/NameStartsWithOrGreater`.
                internal var NameStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/ArtistStartsWithOrGreater`.
                internal var ArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/AlbumArtistStartsWithOrGreater`.
                internal var AlbumArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally than a given input string.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/NameStartsWith`.
                internal var NameStartsWith: Swift.String?
                /// Optional filter by items whose name is equally or lesser than a given input string.
                ///
                /// - Remark: Generated from `#/paths/MusicGenres/GET/query/NameLessThan`.
                internal var NameLessThan: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ArtistType: Artist or AlbumArtist
                ///   - MaxOfficialRating: Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///   - HasThemeSong: Optional filter by items with theme songs.
                ///   - HasThemeVideo: Optional filter by items with theme videos.
                ///   - HasSubtitles: Optional filter by items with subtitles.
                ///   - HasSpecialFeature: Optional filter by items with special features.
                ///   - HasTrailer: Optional filter by items with trailers.
                ///   - AdjacentTo: Optional. Return items that are siblings of a supplied item.
                ///   - MinIndexNumber: Optional filter by minimum index number.
                ///   - MinStartDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxStartDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinEndDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxEndDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinPlayers: Optional filter by minimum number of game players.
                ///   - MaxPlayers: Optional filter by maximum number of game players.
                ///   - ParentIndexNumber: Optional filter by parent index number.
                ///   - HasParentalRating: Optional filter by items that have or do not have a parental rating
                ///   - IsHD: Optional filter by items that are HD or not.
                ///   - IsUnaired: Optional filter by items that are unaired episodes or not.
                ///   - MinCommunityRating: Optional filter by minimum community rating.
                ///   - MinCriticRating: Optional filter by minimum critic rating.
                ///   - AiredDuringSeason: Gets all episodes that aired during a season, including specials.
                ///   - MinPremiereDate: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSaved: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSavedForUser: Optional. The minimum premiere date. Format = ISO
                ///   - MaxPremiereDate: Optional. The maximum premiere date. Format = ISO
                ///   - HasOverview: Optional filter by items that have an overview or not.
                ///   - HasImdbId: Optional filter by items that have an imdb id or not.
                ///   - HasTmdbId: Optional filter by items that have a tmdb id or not.
                ///   - HasTvdbId: Optional filter by items that have a tvdb id or not.
                ///   - ExcludeItemIds: Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///   - StartIndex: Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///   - Limit: Optional. The maximum number of records to return
                ///   - Recursive: When searching within folders, this determines whether or not the search will be recursive. true/false
                ///   - SearchTerm: Enter a search term to perform a search request
                ///   - SortOrder: Sort Order - Ascending,Descending
                ///   - ParentId: Specify this to localize the search to a specific item or folder. Omit to use the root
                ///   - Fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///   - ExcludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - IncludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - AnyProviderIdEquals: Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///   - Filters: Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///   - IsFavorite: Optional filter by items that are marked as favorite, or not.
                ///   - IsMovie: Optional filter for movies.
                ///   - IsSeries: Optional filter for series.
                ///   - IsFolder: Optional filter for folders.
                ///   - IsNews: Optional filter for news.
                ///   - IsKids: Optional filter for kids.
                ///   - IsSports: Optional filter for sports.
                ///   - IsNew: Optional filter for IsNew.
                ///   - IsPremiere: Optional filter for IsPremiere.
                ///   - IsNewOrPremiere: Optional filter for IsNewOrPremiere.
                ///   - IsRepeat: Optional filter for IsRepeat.
                ///   - ProjectToMedia: ProjectToMedia
                ///   - MediaTypes: Optional filter by MediaType. Allows multiple, comma delimited.
                ///   - ImageTypes: Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///   - SortBy: Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///   - IsPlayed: Optional filter by items that are played, or not.
                ///   - Genres: Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///   - OfficialRatings: Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///   - Tags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - ExcludeTags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - Years: Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///   - EnableImages: Optional, include image information in output
                ///   - EnableUserData: Optional, include user data
                ///   - ImageTypeLimit: Optional, the max number of images to return, per image type
                ///   - EnableImageTypes: Optional. The image types to include in the output.
                ///   - Person: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonIds: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonTypes: Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///   - Studios: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - StudioIds: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - Artists: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - ArtistIds: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - Albums: Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///   - Ids: Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///   - VideoTypes: Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///   - Containers: Optional filter by Container. Allows multiple, comma delimeted.
                ///   - AudioCodecs: Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///   - AudioLayouts: Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///   - VideoCodecs: Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///   - ExtendedVideoTypes: Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///   - SubtitleCodecs: Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///   - Path: Optional filter by Path.
                ///   - UserId: User Id
                ///   - MinOfficialRating: Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///   - IsLocked: Optional filter by items that are locked.
                ///   - IsPlaceHolder: Optional filter by items that are placeholders
                ///   - HasOfficialRating: Optional filter by items that have official ratings
                ///   - GroupItemsIntoCollections: Whether or not to hide items behind their boxsets.
                ///   - Is3D: Optional filter by items that are 3D, or not.
                ///   - SeriesStatus: Optional filter by Series Status. Allows multiple, comma delimeted.
                ///   - NameStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - ArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - AlbumArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - NameStartsWith: Optional filter by items whose name is sorted equally than a given input string.
                ///   - NameLessThan: Optional filter by items whose name is equally or lesser than a given input string.
                internal init(
                    ArtistType: Swift.String? = nil,
                    MaxOfficialRating: Swift.String? = nil,
                    HasThemeSong: Swift.Bool? = nil,
                    HasThemeVideo: Swift.Bool? = nil,
                    HasSubtitles: Swift.Bool? = nil,
                    HasSpecialFeature: Swift.Bool? = nil,
                    HasTrailer: Swift.Bool? = nil,
                    AdjacentTo: Swift.String? = nil,
                    MinIndexNumber: Swift.Int32? = nil,
                    MinStartDate: Swift.String? = nil,
                    MaxStartDate: Swift.String? = nil,
                    MinEndDate: Swift.String? = nil,
                    MaxEndDate: Swift.String? = nil,
                    MinPlayers: Swift.Int32? = nil,
                    MaxPlayers: Swift.Int32? = nil,
                    ParentIndexNumber: Swift.Int32? = nil,
                    HasParentalRating: Swift.Bool? = nil,
                    IsHD: Swift.Bool? = nil,
                    IsUnaired: Swift.Bool? = nil,
                    MinCommunityRating: Swift.Double? = nil,
                    MinCriticRating: Swift.Double? = nil,
                    AiredDuringSeason: Swift.Int32? = nil,
                    MinPremiereDate: Swift.String? = nil,
                    MinDateLastSaved: Swift.String? = nil,
                    MinDateLastSavedForUser: Swift.String? = nil,
                    MaxPremiereDate: Swift.String? = nil,
                    HasOverview: Swift.Bool? = nil,
                    HasImdbId: Swift.Bool? = nil,
                    HasTmdbId: Swift.Bool? = nil,
                    HasTvdbId: Swift.Bool? = nil,
                    ExcludeItemIds: Swift.String? = nil,
                    StartIndex: Swift.Int32? = nil,
                    Limit: Swift.Int32? = nil,
                    Recursive: Swift.Bool? = nil,
                    SearchTerm: Swift.String? = nil,
                    SortOrder: Swift.String? = nil,
                    ParentId: Swift.String? = nil,
                    Fields: Swift.String? = nil,
                    ExcludeItemTypes: Swift.String? = nil,
                    IncludeItemTypes: Swift.String? = nil,
                    AnyProviderIdEquals: Swift.String? = nil,
                    Filters: Swift.String? = nil,
                    IsFavorite: Swift.Bool? = nil,
                    IsMovie: Swift.Bool? = nil,
                    IsSeries: Swift.Bool? = nil,
                    IsFolder: Swift.Bool? = nil,
                    IsNews: Swift.Bool? = nil,
                    IsKids: Swift.Bool? = nil,
                    IsSports: Swift.Bool? = nil,
                    IsNew: Swift.Bool? = nil,
                    IsPremiere: Swift.Bool? = nil,
                    IsNewOrPremiere: Swift.Bool? = nil,
                    IsRepeat: Swift.Bool? = nil,
                    ProjectToMedia: Swift.Bool? = nil,
                    MediaTypes: Swift.String? = nil,
                    ImageTypes: Swift.String? = nil,
                    SortBy: Swift.String? = nil,
                    IsPlayed: Swift.Bool? = nil,
                    Genres: Swift.String? = nil,
                    OfficialRatings: Swift.String? = nil,
                    Tags: Swift.String? = nil,
                    ExcludeTags: Swift.String? = nil,
                    Years: Swift.String? = nil,
                    EnableImages: Swift.Bool? = nil,
                    EnableUserData: Swift.Bool? = nil,
                    ImageTypeLimit: Swift.Int32? = nil,
                    EnableImageTypes: Swift.String? = nil,
                    Person: Swift.String? = nil,
                    PersonIds: Swift.String? = nil,
                    PersonTypes: Swift.String? = nil,
                    Studios: Swift.String? = nil,
                    StudioIds: Swift.String? = nil,
                    Artists: Swift.String? = nil,
                    ArtistIds: Swift.String? = nil,
                    Albums: Swift.String? = nil,
                    Ids: Swift.String? = nil,
                    VideoTypes: Swift.String? = nil,
                    Containers: Swift.String? = nil,
                    AudioCodecs: Swift.String? = nil,
                    AudioLayouts: Swift.String? = nil,
                    VideoCodecs: Swift.String? = nil,
                    ExtendedVideoTypes: Swift.String? = nil,
                    SubtitleCodecs: Swift.String? = nil,
                    Path: Swift.String? = nil,
                    UserId: Swift.String? = nil,
                    MinOfficialRating: Swift.String? = nil,
                    IsLocked: Swift.Bool? = nil,
                    IsPlaceHolder: Swift.Bool? = nil,
                    HasOfficialRating: Swift.Bool? = nil,
                    GroupItemsIntoCollections: Swift.Bool? = nil,
                    Is3D: Swift.Bool? = nil,
                    SeriesStatus: Swift.String? = nil,
                    NameStartsWithOrGreater: Swift.String? = nil,
                    ArtistStartsWithOrGreater: Swift.String? = nil,
                    AlbumArtistStartsWithOrGreater: Swift.String? = nil,
                    NameStartsWith: Swift.String? = nil,
                    NameLessThan: Swift.String? = nil
                ) {
                    self.ArtistType = ArtistType
                    self.MaxOfficialRating = MaxOfficialRating
                    self.HasThemeSong = HasThemeSong
                    self.HasThemeVideo = HasThemeVideo
                    self.HasSubtitles = HasSubtitles
                    self.HasSpecialFeature = HasSpecialFeature
                    self.HasTrailer = HasTrailer
                    self.AdjacentTo = AdjacentTo
                    self.MinIndexNumber = MinIndexNumber
                    self.MinStartDate = MinStartDate
                    self.MaxStartDate = MaxStartDate
                    self.MinEndDate = MinEndDate
                    self.MaxEndDate = MaxEndDate
                    self.MinPlayers = MinPlayers
                    self.MaxPlayers = MaxPlayers
                    self.ParentIndexNumber = ParentIndexNumber
                    self.HasParentalRating = HasParentalRating
                    self.IsHD = IsHD
                    self.IsUnaired = IsUnaired
                    self.MinCommunityRating = MinCommunityRating
                    self.MinCriticRating = MinCriticRating
                    self.AiredDuringSeason = AiredDuringSeason
                    self.MinPremiereDate = MinPremiereDate
                    self.MinDateLastSaved = MinDateLastSaved
                    self.MinDateLastSavedForUser = MinDateLastSavedForUser
                    self.MaxPremiereDate = MaxPremiereDate
                    self.HasOverview = HasOverview
                    self.HasImdbId = HasImdbId
                    self.HasTmdbId = HasTmdbId
                    self.HasTvdbId = HasTvdbId
                    self.ExcludeItemIds = ExcludeItemIds
                    self.StartIndex = StartIndex
                    self.Limit = Limit
                    self.Recursive = Recursive
                    self.SearchTerm = SearchTerm
                    self.SortOrder = SortOrder
                    self.ParentId = ParentId
                    self.Fields = Fields
                    self.ExcludeItemTypes = ExcludeItemTypes
                    self.IncludeItemTypes = IncludeItemTypes
                    self.AnyProviderIdEquals = AnyProviderIdEquals
                    self.Filters = Filters
                    self.IsFavorite = IsFavorite
                    self.IsMovie = IsMovie
                    self.IsSeries = IsSeries
                    self.IsFolder = IsFolder
                    self.IsNews = IsNews
                    self.IsKids = IsKids
                    self.IsSports = IsSports
                    self.IsNew = IsNew
                    self.IsPremiere = IsPremiere
                    self.IsNewOrPremiere = IsNewOrPremiere
                    self.IsRepeat = IsRepeat
                    self.ProjectToMedia = ProjectToMedia
                    self.MediaTypes = MediaTypes
                    self.ImageTypes = ImageTypes
                    self.SortBy = SortBy
                    self.IsPlayed = IsPlayed
                    self.Genres = Genres
                    self.OfficialRatings = OfficialRatings
                    self.Tags = Tags
                    self.ExcludeTags = ExcludeTags
                    self.Years = Years
                    self.EnableImages = EnableImages
                    self.EnableUserData = EnableUserData
                    self.ImageTypeLimit = ImageTypeLimit
                    self.EnableImageTypes = EnableImageTypes
                    self.Person = Person
                    self.PersonIds = PersonIds
                    self.PersonTypes = PersonTypes
                    self.Studios = Studios
                    self.StudioIds = StudioIds
                    self.Artists = Artists
                    self.ArtistIds = ArtistIds
                    self.Albums = Albums
                    self.Ids = Ids
                    self.VideoTypes = VideoTypes
                    self.Containers = Containers
                    self.AudioCodecs = AudioCodecs
                    self.AudioLayouts = AudioLayouts
                    self.VideoCodecs = VideoCodecs
                    self.ExtendedVideoTypes = ExtendedVideoTypes
                    self.SubtitleCodecs = SubtitleCodecs
                    self.Path = Path
                    self.UserId = UserId
                    self.MinOfficialRating = MinOfficialRating
                    self.IsLocked = IsLocked
                    self.IsPlaceHolder = IsPlaceHolder
                    self.HasOfficialRating = HasOfficialRating
                    self.GroupItemsIntoCollections = GroupItemsIntoCollections
                    self.Is3D = Is3D
                    self.SeriesStatus = SeriesStatus
                    self.NameStartsWithOrGreater = NameStartsWithOrGreater
                    self.ArtistStartsWithOrGreater = ArtistStartsWithOrGreater
                    self.AlbumArtistStartsWithOrGreater = AlbumArtistStartsWithOrGreater
                    self.NameStartsWith = NameStartsWith
                    self.NameLessThan = NameLessThan
                }
            }
            internal var query: Operations.getMusicgenres.Input.Query
            /// - Remark: Generated from `#/paths/MusicGenres/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMusicgenres.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getMusicgenres.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getMusicgenres.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getMusicgenres.Input.Query = .init(),
                headers: Operations.getMusicgenres.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/MusicGenres/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/MusicGenres/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResult_BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResult_BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/MusicGenres/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getMusicgenres.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getMusicgenres.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a QueryResult<BaseItemDto> object.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getMusicgenres.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getMusicgenres.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//MusicGenres/get(getMusicgenres)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets an artist, by name
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Artists/{Name}`.
    /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)`.
    internal enum getArtistsByName {
        internal static let id: Swift.String = "getArtistsByName"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Artists/{Name}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The artist name
                ///
                /// - Remark: Generated from `#/paths/Artists/{Name}/GET/path/Name`.
                internal var Name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - Name: The artist name
                internal init(Name: Swift.String) {
                    self.Name = Name
                }
            }
            internal var path: Operations.getArtistsByName.Input.Path
            /// - Remark: Generated from `#/paths/Artists/{Name}/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Optional. Filter by user id, and attach user data
                ///
                /// - Remark: Generated from `#/paths/Artists/{Name}/GET/query/UserId`.
                internal var UserId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - UserId: Optional. Filter by user id, and attach user data
                internal init(UserId: Swift.String? = nil) {
                    self.UserId = UserId
                }
            }
            internal var query: Operations.getArtistsByName.Input.Query
            /// - Remark: Generated from `#/paths/Artists/{Name}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtistsByName.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtistsByName.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getArtistsByName.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getArtistsByName.Input.Path,
                query: Operations.getArtistsByName.Input.Query = .init(),
                headers: Operations.getArtistsByName.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Artists/{Name}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Artists/{Name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Artists/{Name}/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getArtistsByName.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getArtistsByName.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a BaseItemDto object.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getArtistsByName.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getArtistsByName.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Artists/{Name}/get(getArtistsByName)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets all user media folders.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Library/MediaFolders`.
    /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)`.
    internal enum getLibraryMediafolders {
        internal static let id: Swift.String = "getLibraryMediafolders"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Library/MediaFolders/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Optional. Filter by folders that are marked hidden, or not.
                ///
                /// - Remark: Generated from `#/paths/Library/MediaFolders/GET/query/IsHidden`.
                internal var IsHidden: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - IsHidden: Optional. Filter by folders that are marked hidden, or not.
                internal init(IsHidden: Swift.Bool? = nil) {
                    self.IsHidden = IsHidden
                }
            }
            internal var query: Operations.getLibraryMediafolders.Input.Query
            /// - Remark: Generated from `#/paths/Library/MediaFolders/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLibraryMediafolders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLibraryMediafolders.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getLibraryMediafolders.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.getLibraryMediafolders.Input.Query = .init(),
                headers: Operations.getLibraryMediafolders.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Library/MediaFolders/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Library/MediaFolders/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResult_BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResult_BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Library/MediaFolders/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getLibraryMediafolders.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getLibraryMediafolders.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a QueryResult<BaseItemDto> object.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getLibraryMediafolders.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getLibraryMediafolders.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Library/MediaFolders/get(getLibraryMediafolders)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Authenticates a user
    ///
    /// Authenticate a user by nane and password. A 200 status code indicates success, while anything in the 400 or 500 range indicates failure
    /// ---
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `POST /Users/AuthenticateByName`.
    /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)`.
    internal enum postUsersAuthenticatebyname {
        internal static let id: Swift.String = "postUsersAuthenticatebyname"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/header`.
            internal struct Headers: Sendable, Hashable {
                /// The authorization header can be either named 'Authorization' or 'X-Emby-Authorization'.   
                /// It must be of the following schema:    
                /// Emby UserId="(guid)", Client="(string)", Device="(string)", DeviceId="(string)", Version="string", Token="(string)"    
                /// Please consult the documentation for further details.
                ///
                /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/header/X-Emby-Authorization`.
                internal var X_hyphen_Emby_hyphen_Authorization: Swift.String
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postUsersAuthenticatebyname.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_Emby_hyphen_Authorization: The authorization header can be either named 'Authorization' or 'X-Emby-Authorization'.   
                ///   - accept:
                internal init(
                    X_hyphen_Emby_hyphen_Authorization: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postUsersAuthenticatebyname.AcceptableContentType>] = .defaultValues()
                ) {
                    self.X_hyphen_Emby_hyphen_Authorization = X_hyphen_Emby_hyphen_Authorization
                    self.accept = accept
                }
            }
            internal var headers: Operations.postUsersAuthenticatebyname.Input.Headers
            /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AuthenticateUserByName)
                /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/requestBody/content/application\/xml`.
                case xml(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.postUsersAuthenticatebyname.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.postUsersAuthenticatebyname.Input.Headers,
                body: Operations.postUsersAuthenticatebyname.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Authentication_period_AuthenticationResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Authentication_period_AuthenticationResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Users/AuthenticateByName/POST/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.postUsersAuthenticatebyname.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.postUsersAuthenticatebyname.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a AuthenticationResult object.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.postUsersAuthenticatebyname.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.postUsersAuthenticatebyname.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/AuthenticateByName/post(postUsersAuthenticatebyname)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets public information about the server
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /System/Info/Public`.
    /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)`.
    internal enum getSystemInfoPublic {
        internal static let id: Swift.String = "getSystemInfoPublic"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/System/Info/Public/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSystemInfoPublic.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSystemInfoPublic.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getSystemInfoPublic.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            internal init(headers: Operations.getSystemInfoPublic.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/System/Info/Public/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/System/Info/Public/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PublicSystemInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.PublicSystemInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/System/Info/Public/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getSystemInfoPublic.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getSystemInfoPublic.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a PublicSystemInfo object.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSystemInfoPublic.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getSystemInfoPublic.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//System/Info/Public/get(getSystemInfoPublic)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)`.
    internal enum getUsersByUseridItems {
        internal static let id: Swift.String = "getUsersByUseridItems"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/path/UserId`.
                internal var UserId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - UserId: User Id
                internal init(UserId: Swift.String) {
                    self.UserId = UserId
                }
            }
            internal var path: Operations.getUsersByUseridItems.Input.Path
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Artist or AlbumArtist
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ArtistType`.
                internal var ArtistType: Swift.String?
                /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MaxOfficialRating`.
                internal var MaxOfficialRating: Swift.String?
                /// Optional filter by items with theme songs.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasThemeSong`.
                internal var HasThemeSong: Swift.Bool?
                /// Optional filter by items with theme videos.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasThemeVideo`.
                internal var HasThemeVideo: Swift.Bool?
                /// Optional filter by items with subtitles.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasSubtitles`.
                internal var HasSubtitles: Swift.Bool?
                /// Optional filter by items with special features.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasSpecialFeature`.
                internal var HasSpecialFeature: Swift.Bool?
                /// Optional filter by items with trailers.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasTrailer`.
                internal var HasTrailer: Swift.Bool?
                /// Optional. Return items that are siblings of a supplied item.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/AdjacentTo`.
                internal var AdjacentTo: Swift.String?
                /// Optional filter by minimum index number.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinIndexNumber`.
                internal var MinIndexNumber: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinStartDate`.
                internal var MinStartDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MaxStartDate`.
                internal var MaxStartDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinEndDate`.
                internal var MinEndDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MaxEndDate`.
                internal var MaxEndDate: Swift.String?
                /// Optional filter by minimum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinPlayers`.
                internal var MinPlayers: Swift.Int32?
                /// Optional filter by maximum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MaxPlayers`.
                internal var MaxPlayers: Swift.Int32?
                /// Optional filter by parent index number.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ParentIndexNumber`.
                internal var ParentIndexNumber: Swift.Int32?
                /// Optional filter by items that have or do not have a parental rating
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasParentalRating`.
                internal var HasParentalRating: Swift.Bool?
                /// Optional filter by items that are HD or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsHD`.
                internal var IsHD: Swift.Bool?
                /// Optional filter by items that are unaired episodes or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsUnaired`.
                internal var IsUnaired: Swift.Bool?
                /// Optional filter by minimum community rating.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinCommunityRating`.
                internal var MinCommunityRating: Swift.Double?
                /// Optional filter by minimum critic rating.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinCriticRating`.
                internal var MinCriticRating: Swift.Double?
                /// Gets all episodes that aired during a season, including specials.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/AiredDuringSeason`.
                internal var AiredDuringSeason: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinPremiereDate`.
                internal var MinPremiereDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinDateLastSaved`.
                internal var MinDateLastSaved: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinDateLastSavedForUser`.
                internal var MinDateLastSavedForUser: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MaxPremiereDate`.
                internal var MaxPremiereDate: Swift.String?
                /// Optional filter by items that have an overview or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasOverview`.
                internal var HasOverview: Swift.Bool?
                /// Optional filter by items that have an imdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasImdbId`.
                internal var HasImdbId: Swift.Bool?
                /// Optional filter by items that have a tmdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasTmdbId`.
                internal var HasTmdbId: Swift.Bool?
                /// Optional filter by items that have a tvdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasTvdbId`.
                internal var HasTvdbId: Swift.Bool?
                /// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ExcludeItemIds`.
                internal var ExcludeItemIds: Swift.String?
                /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/StartIndex`.
                internal var StartIndex: Swift.Int32?
                /// Optional. The maximum number of records to return
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Limit`.
                internal var Limit: Swift.Int32?
                /// When searching within folders, this determines whether or not the search will be recursive. true/false
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Recursive`.
                internal var Recursive: Swift.Bool?
                /// Enter a search term to perform a search request
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/SearchTerm`.
                internal var SearchTerm: Swift.String?
                /// Sort Order - Ascending,Descending
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/SortOrder`.
                internal var SortOrder: Swift.String?
                /// Specify this to localize the search to a specific item or folder. Omit to use the root
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ParentId`.
                internal var ParentId: Swift.String?
                /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Fields`.
                internal var Fields: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ExcludeItemTypes`.
                internal var ExcludeItemTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IncludeItemTypes`.
                internal var IncludeItemTypes: Swift.String?
                /// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/AnyProviderIdEquals`.
                internal var AnyProviderIdEquals: Swift.String?
                /// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Filters`.
                internal var Filters: Swift.String?
                /// Optional filter by items that are marked as favorite, or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsFavorite`.
                internal var IsFavorite: Swift.Bool?
                /// Optional filter for movies.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsMovie`.
                internal var IsMovie: Swift.Bool?
                /// Optional filter for series.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsSeries`.
                internal var IsSeries: Swift.Bool?
                /// Optional filter for folders.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsFolder`.
                internal var IsFolder: Swift.Bool?
                /// Optional filter for news.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsNews`.
                internal var IsNews: Swift.Bool?
                /// Optional filter for kids.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsKids`.
                internal var IsKids: Swift.Bool?
                /// Optional filter for sports.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsSports`.
                internal var IsSports: Swift.Bool?
                /// Optional filter for IsNew.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsNew`.
                internal var IsNew: Swift.Bool?
                /// Optional filter for IsPremiere.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsPremiere`.
                internal var IsPremiere: Swift.Bool?
                /// Optional filter for IsNewOrPremiere.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsNewOrPremiere`.
                internal var IsNewOrPremiere: Swift.Bool?
                /// Optional filter for IsRepeat.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsRepeat`.
                internal var IsRepeat: Swift.Bool?
                /// ProjectToMedia
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ProjectToMedia`.
                internal var ProjectToMedia: Swift.Bool?
                /// Optional filter by MediaType. Allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MediaTypes`.
                internal var MediaTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ImageTypes`.
                internal var ImageTypes: Swift.String?
                /// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/SortBy`.
                internal var SortBy: Swift.String?
                /// Optional filter by items that are played, or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsPlayed`.
                internal var IsPlayed: Swift.Bool?
                /// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Genres`.
                internal var Genres: Swift.String?
                /// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/OfficialRatings`.
                internal var OfficialRatings: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Tags`.
                internal var Tags: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ExcludeTags`.
                internal var ExcludeTags: Swift.String?
                /// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Years`.
                internal var Years: Swift.String?
                /// Optional, include image information in output
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/EnableImages`.
                internal var EnableImages: Swift.Bool?
                /// Optional, include user data
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/EnableUserData`.
                internal var EnableUserData: Swift.Bool?
                /// Optional, the max number of images to return, per image type
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ImageTypeLimit`.
                internal var ImageTypeLimit: Swift.Int32?
                /// Optional. The image types to include in the output.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/EnableImageTypes`.
                internal var EnableImageTypes: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Person`.
                internal var Person: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/PersonIds`.
                internal var PersonIds: Swift.String?
                /// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/PersonTypes`.
                internal var PersonTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Studios`.
                internal var Studios: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/StudioIds`.
                internal var StudioIds: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Artists`.
                internal var Artists: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ArtistIds`.
                internal var ArtistIds: Swift.String?
                /// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Albums`.
                internal var Albums: Swift.String?
                /// Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Ids`.
                internal var Ids: Swift.String?
                /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/VideoTypes`.
                internal var VideoTypes: Swift.String?
                /// Optional filter by Container. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Containers`.
                internal var Containers: Swift.String?
                /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/AudioCodecs`.
                internal var AudioCodecs: Swift.String?
                /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/AudioLayouts`.
                internal var AudioLayouts: Swift.String?
                /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/VideoCodecs`.
                internal var VideoCodecs: Swift.String?
                /// Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ExtendedVideoTypes`.
                internal var ExtendedVideoTypes: Swift.String?
                /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/SubtitleCodecs`.
                internal var SubtitleCodecs: Swift.String?
                /// Optional filter by Path.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Path`.
                internal var Path: Swift.String?
                /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/MinOfficialRating`.
                internal var MinOfficialRating: Swift.String?
                /// Optional filter by items that are locked.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsLocked`.
                internal var IsLocked: Swift.Bool?
                /// Optional filter by items that are placeholders
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/IsPlaceHolder`.
                internal var IsPlaceHolder: Swift.Bool?
                /// Optional filter by items that have official ratings
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/HasOfficialRating`.
                internal var HasOfficialRating: Swift.Bool?
                /// Whether or not to hide items behind their boxsets.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/GroupItemsIntoCollections`.
                internal var GroupItemsIntoCollections: Swift.Bool?
                /// Optional filter by items that are 3D, or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/Is3D`.
                internal var Is3D: Swift.Bool?
                /// Optional filter by Series Status. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/SeriesStatus`.
                internal var SeriesStatus: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/NameStartsWithOrGreater`.
                internal var NameStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/ArtistStartsWithOrGreater`.
                internal var ArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/AlbumArtistStartsWithOrGreater`.
                internal var AlbumArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/NameStartsWith`.
                internal var NameStartsWith: Swift.String?
                /// Optional filter by items whose name is equally or lesser than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/query/NameLessThan`.
                internal var NameLessThan: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ArtistType: Artist or AlbumArtist
                ///   - MaxOfficialRating: Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///   - HasThemeSong: Optional filter by items with theme songs.
                ///   - HasThemeVideo: Optional filter by items with theme videos.
                ///   - HasSubtitles: Optional filter by items with subtitles.
                ///   - HasSpecialFeature: Optional filter by items with special features.
                ///   - HasTrailer: Optional filter by items with trailers.
                ///   - AdjacentTo: Optional. Return items that are siblings of a supplied item.
                ///   - MinIndexNumber: Optional filter by minimum index number.
                ///   - MinStartDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxStartDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinEndDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxEndDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinPlayers: Optional filter by minimum number of game players.
                ///   - MaxPlayers: Optional filter by maximum number of game players.
                ///   - ParentIndexNumber: Optional filter by parent index number.
                ///   - HasParentalRating: Optional filter by items that have or do not have a parental rating
                ///   - IsHD: Optional filter by items that are HD or not.
                ///   - IsUnaired: Optional filter by items that are unaired episodes or not.
                ///   - MinCommunityRating: Optional filter by minimum community rating.
                ///   - MinCriticRating: Optional filter by minimum critic rating.
                ///   - AiredDuringSeason: Gets all episodes that aired during a season, including specials.
                ///   - MinPremiereDate: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSaved: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSavedForUser: Optional. The minimum premiere date. Format = ISO
                ///   - MaxPremiereDate: Optional. The maximum premiere date. Format = ISO
                ///   - HasOverview: Optional filter by items that have an overview or not.
                ///   - HasImdbId: Optional filter by items that have an imdb id or not.
                ///   - HasTmdbId: Optional filter by items that have a tmdb id or not.
                ///   - HasTvdbId: Optional filter by items that have a tvdb id or not.
                ///   - ExcludeItemIds: Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///   - StartIndex: Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///   - Limit: Optional. The maximum number of records to return
                ///   - Recursive: When searching within folders, this determines whether or not the search will be recursive. true/false
                ///   - SearchTerm: Enter a search term to perform a search request
                ///   - SortOrder: Sort Order - Ascending,Descending
                ///   - ParentId: Specify this to localize the search to a specific item or folder. Omit to use the root
                ///   - Fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///   - ExcludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - IncludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - AnyProviderIdEquals: Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///   - Filters: Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///   - IsFavorite: Optional filter by items that are marked as favorite, or not.
                ///   - IsMovie: Optional filter for movies.
                ///   - IsSeries: Optional filter for series.
                ///   - IsFolder: Optional filter for folders.
                ///   - IsNews: Optional filter for news.
                ///   - IsKids: Optional filter for kids.
                ///   - IsSports: Optional filter for sports.
                ///   - IsNew: Optional filter for IsNew.
                ///   - IsPremiere: Optional filter for IsPremiere.
                ///   - IsNewOrPremiere: Optional filter for IsNewOrPremiere.
                ///   - IsRepeat: Optional filter for IsRepeat.
                ///   - ProjectToMedia: ProjectToMedia
                ///   - MediaTypes: Optional filter by MediaType. Allows multiple, comma delimited.
                ///   - ImageTypes: Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///   - SortBy: Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///   - IsPlayed: Optional filter by items that are played, or not.
                ///   - Genres: Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///   - OfficialRatings: Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///   - Tags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - ExcludeTags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - Years: Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///   - EnableImages: Optional, include image information in output
                ///   - EnableUserData: Optional, include user data
                ///   - ImageTypeLimit: Optional, the max number of images to return, per image type
                ///   - EnableImageTypes: Optional. The image types to include in the output.
                ///   - Person: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonIds: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonTypes: Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///   - Studios: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - StudioIds: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - Artists: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - ArtistIds: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - Albums: Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///   - Ids: Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///   - VideoTypes: Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///   - Containers: Optional filter by Container. Allows multiple, comma delimeted.
                ///   - AudioCodecs: Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///   - AudioLayouts: Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///   - VideoCodecs: Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///   - ExtendedVideoTypes: Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///   - SubtitleCodecs: Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///   - Path: Optional filter by Path.
                ///   - MinOfficialRating: Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///   - IsLocked: Optional filter by items that are locked.
                ///   - IsPlaceHolder: Optional filter by items that are placeholders
                ///   - HasOfficialRating: Optional filter by items that have official ratings
                ///   - GroupItemsIntoCollections: Whether or not to hide items behind their boxsets.
                ///   - Is3D: Optional filter by items that are 3D, or not.
                ///   - SeriesStatus: Optional filter by Series Status. Allows multiple, comma delimeted.
                ///   - NameStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - ArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - AlbumArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - NameStartsWith: Optional filter by items whose name is sorted equally than a given input string.
                ///   - NameLessThan: Optional filter by items whose name is equally or lesser than a given input string.
                internal init(
                    ArtistType: Swift.String? = nil,
                    MaxOfficialRating: Swift.String? = nil,
                    HasThemeSong: Swift.Bool? = nil,
                    HasThemeVideo: Swift.Bool? = nil,
                    HasSubtitles: Swift.Bool? = nil,
                    HasSpecialFeature: Swift.Bool? = nil,
                    HasTrailer: Swift.Bool? = nil,
                    AdjacentTo: Swift.String? = nil,
                    MinIndexNumber: Swift.Int32? = nil,
                    MinStartDate: Swift.String? = nil,
                    MaxStartDate: Swift.String? = nil,
                    MinEndDate: Swift.String? = nil,
                    MaxEndDate: Swift.String? = nil,
                    MinPlayers: Swift.Int32? = nil,
                    MaxPlayers: Swift.Int32? = nil,
                    ParentIndexNumber: Swift.Int32? = nil,
                    HasParentalRating: Swift.Bool? = nil,
                    IsHD: Swift.Bool? = nil,
                    IsUnaired: Swift.Bool? = nil,
                    MinCommunityRating: Swift.Double? = nil,
                    MinCriticRating: Swift.Double? = nil,
                    AiredDuringSeason: Swift.Int32? = nil,
                    MinPremiereDate: Swift.String? = nil,
                    MinDateLastSaved: Swift.String? = nil,
                    MinDateLastSavedForUser: Swift.String? = nil,
                    MaxPremiereDate: Swift.String? = nil,
                    HasOverview: Swift.Bool? = nil,
                    HasImdbId: Swift.Bool? = nil,
                    HasTmdbId: Swift.Bool? = nil,
                    HasTvdbId: Swift.Bool? = nil,
                    ExcludeItemIds: Swift.String? = nil,
                    StartIndex: Swift.Int32? = nil,
                    Limit: Swift.Int32? = nil,
                    Recursive: Swift.Bool? = nil,
                    SearchTerm: Swift.String? = nil,
                    SortOrder: Swift.String? = nil,
                    ParentId: Swift.String? = nil,
                    Fields: Swift.String? = nil,
                    ExcludeItemTypes: Swift.String? = nil,
                    IncludeItemTypes: Swift.String? = nil,
                    AnyProviderIdEquals: Swift.String? = nil,
                    Filters: Swift.String? = nil,
                    IsFavorite: Swift.Bool? = nil,
                    IsMovie: Swift.Bool? = nil,
                    IsSeries: Swift.Bool? = nil,
                    IsFolder: Swift.Bool? = nil,
                    IsNews: Swift.Bool? = nil,
                    IsKids: Swift.Bool? = nil,
                    IsSports: Swift.Bool? = nil,
                    IsNew: Swift.Bool? = nil,
                    IsPremiere: Swift.Bool? = nil,
                    IsNewOrPremiere: Swift.Bool? = nil,
                    IsRepeat: Swift.Bool? = nil,
                    ProjectToMedia: Swift.Bool? = nil,
                    MediaTypes: Swift.String? = nil,
                    ImageTypes: Swift.String? = nil,
                    SortBy: Swift.String? = nil,
                    IsPlayed: Swift.Bool? = nil,
                    Genres: Swift.String? = nil,
                    OfficialRatings: Swift.String? = nil,
                    Tags: Swift.String? = nil,
                    ExcludeTags: Swift.String? = nil,
                    Years: Swift.String? = nil,
                    EnableImages: Swift.Bool? = nil,
                    EnableUserData: Swift.Bool? = nil,
                    ImageTypeLimit: Swift.Int32? = nil,
                    EnableImageTypes: Swift.String? = nil,
                    Person: Swift.String? = nil,
                    PersonIds: Swift.String? = nil,
                    PersonTypes: Swift.String? = nil,
                    Studios: Swift.String? = nil,
                    StudioIds: Swift.String? = nil,
                    Artists: Swift.String? = nil,
                    ArtistIds: Swift.String? = nil,
                    Albums: Swift.String? = nil,
                    Ids: Swift.String? = nil,
                    VideoTypes: Swift.String? = nil,
                    Containers: Swift.String? = nil,
                    AudioCodecs: Swift.String? = nil,
                    AudioLayouts: Swift.String? = nil,
                    VideoCodecs: Swift.String? = nil,
                    ExtendedVideoTypes: Swift.String? = nil,
                    SubtitleCodecs: Swift.String? = nil,
                    Path: Swift.String? = nil,
                    MinOfficialRating: Swift.String? = nil,
                    IsLocked: Swift.Bool? = nil,
                    IsPlaceHolder: Swift.Bool? = nil,
                    HasOfficialRating: Swift.Bool? = nil,
                    GroupItemsIntoCollections: Swift.Bool? = nil,
                    Is3D: Swift.Bool? = nil,
                    SeriesStatus: Swift.String? = nil,
                    NameStartsWithOrGreater: Swift.String? = nil,
                    ArtistStartsWithOrGreater: Swift.String? = nil,
                    AlbumArtistStartsWithOrGreater: Swift.String? = nil,
                    NameStartsWith: Swift.String? = nil,
                    NameLessThan: Swift.String? = nil
                ) {
                    self.ArtistType = ArtistType
                    self.MaxOfficialRating = MaxOfficialRating
                    self.HasThemeSong = HasThemeSong
                    self.HasThemeVideo = HasThemeVideo
                    self.HasSubtitles = HasSubtitles
                    self.HasSpecialFeature = HasSpecialFeature
                    self.HasTrailer = HasTrailer
                    self.AdjacentTo = AdjacentTo
                    self.MinIndexNumber = MinIndexNumber
                    self.MinStartDate = MinStartDate
                    self.MaxStartDate = MaxStartDate
                    self.MinEndDate = MinEndDate
                    self.MaxEndDate = MaxEndDate
                    self.MinPlayers = MinPlayers
                    self.MaxPlayers = MaxPlayers
                    self.ParentIndexNumber = ParentIndexNumber
                    self.HasParentalRating = HasParentalRating
                    self.IsHD = IsHD
                    self.IsUnaired = IsUnaired
                    self.MinCommunityRating = MinCommunityRating
                    self.MinCriticRating = MinCriticRating
                    self.AiredDuringSeason = AiredDuringSeason
                    self.MinPremiereDate = MinPremiereDate
                    self.MinDateLastSaved = MinDateLastSaved
                    self.MinDateLastSavedForUser = MinDateLastSavedForUser
                    self.MaxPremiereDate = MaxPremiereDate
                    self.HasOverview = HasOverview
                    self.HasImdbId = HasImdbId
                    self.HasTmdbId = HasTmdbId
                    self.HasTvdbId = HasTvdbId
                    self.ExcludeItemIds = ExcludeItemIds
                    self.StartIndex = StartIndex
                    self.Limit = Limit
                    self.Recursive = Recursive
                    self.SearchTerm = SearchTerm
                    self.SortOrder = SortOrder
                    self.ParentId = ParentId
                    self.Fields = Fields
                    self.ExcludeItemTypes = ExcludeItemTypes
                    self.IncludeItemTypes = IncludeItemTypes
                    self.AnyProviderIdEquals = AnyProviderIdEquals
                    self.Filters = Filters
                    self.IsFavorite = IsFavorite
                    self.IsMovie = IsMovie
                    self.IsSeries = IsSeries
                    self.IsFolder = IsFolder
                    self.IsNews = IsNews
                    self.IsKids = IsKids
                    self.IsSports = IsSports
                    self.IsNew = IsNew
                    self.IsPremiere = IsPremiere
                    self.IsNewOrPremiere = IsNewOrPremiere
                    self.IsRepeat = IsRepeat
                    self.ProjectToMedia = ProjectToMedia
                    self.MediaTypes = MediaTypes
                    self.ImageTypes = ImageTypes
                    self.SortBy = SortBy
                    self.IsPlayed = IsPlayed
                    self.Genres = Genres
                    self.OfficialRatings = OfficialRatings
                    self.Tags = Tags
                    self.ExcludeTags = ExcludeTags
                    self.Years = Years
                    self.EnableImages = EnableImages
                    self.EnableUserData = EnableUserData
                    self.ImageTypeLimit = ImageTypeLimit
                    self.EnableImageTypes = EnableImageTypes
                    self.Person = Person
                    self.PersonIds = PersonIds
                    self.PersonTypes = PersonTypes
                    self.Studios = Studios
                    self.StudioIds = StudioIds
                    self.Artists = Artists
                    self.ArtistIds = ArtistIds
                    self.Albums = Albums
                    self.Ids = Ids
                    self.VideoTypes = VideoTypes
                    self.Containers = Containers
                    self.AudioCodecs = AudioCodecs
                    self.AudioLayouts = AudioLayouts
                    self.VideoCodecs = VideoCodecs
                    self.ExtendedVideoTypes = ExtendedVideoTypes
                    self.SubtitleCodecs = SubtitleCodecs
                    self.Path = Path
                    self.MinOfficialRating = MinOfficialRating
                    self.IsLocked = IsLocked
                    self.IsPlaceHolder = IsPlaceHolder
                    self.HasOfficialRating = HasOfficialRating
                    self.GroupItemsIntoCollections = GroupItemsIntoCollections
                    self.Is3D = Is3D
                    self.SeriesStatus = SeriesStatus
                    self.NameStartsWithOrGreater = NameStartsWithOrGreater
                    self.ArtistStartsWithOrGreater = ArtistStartsWithOrGreater
                    self.AlbumArtistStartsWithOrGreater = AlbumArtistStartsWithOrGreater
                    self.NameStartsWith = NameStartsWith
                    self.NameLessThan = NameLessThan
                }
            }
            internal var query: Operations.getUsersByUseridItems.Input.Query
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUsersByUseridItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUsersByUseridItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getUsersByUseridItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getUsersByUseridItems.Input.Path,
                query: Operations.getUsersByUseridItems.Input.Query = .init(),
                headers: Operations.getUsersByUseridItems.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResult_BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResult_BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Users/{UserId}/Items/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getUsersByUseridItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getUsersByUseridItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a QueryResult<BaseItemDto> object.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getUsersByUseridItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getUsersByUseridItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/get(getUsersByUseridItems)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets items based on a query.
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items/Resume`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)`.
    internal enum getUsersByUseridItemsResume {
        internal static let id: Swift.String = "getUsersByUseridItemsResume"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/path/UserId`.
                internal var UserId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - UserId: User Id
                internal init(UserId: Swift.String) {
                    self.UserId = UserId
                }
            }
            internal var path: Operations.getUsersByUseridItemsResume.Input.Path
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// Artist or AlbumArtist
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ArtistType`.
                internal var ArtistType: Swift.String?
                /// Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MaxOfficialRating`.
                internal var MaxOfficialRating: Swift.String?
                /// Optional filter by items with theme songs.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasThemeSong`.
                internal var HasThemeSong: Swift.Bool?
                /// Optional filter by items with theme videos.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasThemeVideo`.
                internal var HasThemeVideo: Swift.Bool?
                /// Optional filter by items with subtitles.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasSubtitles`.
                internal var HasSubtitles: Swift.Bool?
                /// Optional filter by items with special features.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasSpecialFeature`.
                internal var HasSpecialFeature: Swift.Bool?
                /// Optional filter by items with trailers.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasTrailer`.
                internal var HasTrailer: Swift.Bool?
                /// Optional. Return items that are siblings of a supplied item.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/AdjacentTo`.
                internal var AdjacentTo: Swift.String?
                /// Optional filter by minimum index number.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinIndexNumber`.
                internal var MinIndexNumber: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinStartDate`.
                internal var MinStartDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MaxStartDate`.
                internal var MaxStartDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinEndDate`.
                internal var MinEndDate: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MaxEndDate`.
                internal var MaxEndDate: Swift.String?
                /// Optional filter by minimum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinPlayers`.
                internal var MinPlayers: Swift.Int32?
                /// Optional filter by maximum number of game players.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MaxPlayers`.
                internal var MaxPlayers: Swift.Int32?
                /// Optional filter by parent index number.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ParentIndexNumber`.
                internal var ParentIndexNumber: Swift.Int32?
                /// Optional filter by items that have or do not have a parental rating
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasParentalRating`.
                internal var HasParentalRating: Swift.Bool?
                /// Optional filter by items that are HD or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsHD`.
                internal var IsHD: Swift.Bool?
                /// Optional filter by items that are unaired episodes or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsUnaired`.
                internal var IsUnaired: Swift.Bool?
                /// Optional filter by minimum community rating.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinCommunityRating`.
                internal var MinCommunityRating: Swift.Double?
                /// Optional filter by minimum critic rating.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinCriticRating`.
                internal var MinCriticRating: Swift.Double?
                /// Gets all episodes that aired during a season, including specials.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/AiredDuringSeason`.
                internal var AiredDuringSeason: Swift.Int32?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinPremiereDate`.
                internal var MinPremiereDate: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinDateLastSaved`.
                internal var MinDateLastSaved: Swift.String?
                /// Optional. The minimum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinDateLastSavedForUser`.
                internal var MinDateLastSavedForUser: Swift.String?
                /// Optional. The maximum premiere date. Format = ISO
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MaxPremiereDate`.
                internal var MaxPremiereDate: Swift.String?
                /// Optional filter by items that have an overview or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasOverview`.
                internal var HasOverview: Swift.Bool?
                /// Optional filter by items that have an imdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasImdbId`.
                internal var HasImdbId: Swift.Bool?
                /// Optional filter by items that have a tmdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasTmdbId`.
                internal var HasTmdbId: Swift.Bool?
                /// Optional filter by items that have a tvdb id or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasTvdbId`.
                internal var HasTvdbId: Swift.Bool?
                /// Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ExcludeItemIds`.
                internal var ExcludeItemIds: Swift.String?
                /// Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/StartIndex`.
                internal var StartIndex: Swift.Int32?
                /// Optional. The maximum number of records to return
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Limit`.
                internal var Limit: Swift.Int32?
                /// When searching within folders, this determines whether or not the search will be recursive. true/false
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Recursive`.
                internal var Recursive: Swift.Bool?
                /// Enter a search term to perform a search request
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/SearchTerm`.
                internal var SearchTerm: Swift.String?
                /// Sort Order - Ascending,Descending
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/SortOrder`.
                internal var SortOrder: Swift.String?
                /// Specify this to localize the search to a specific item or folder. Omit to use the root
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ParentId`.
                internal var ParentId: Swift.String?
                /// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Fields`.
                internal var Fields: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ExcludeItemTypes`.
                internal var ExcludeItemTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IncludeItemTypes`.
                internal var IncludeItemTypes: Swift.String?
                /// Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/AnyProviderIdEquals`.
                internal var AnyProviderIdEquals: Swift.String?
                /// Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Filters`.
                internal var Filters: Swift.String?
                /// Optional filter by items that are marked as favorite, or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsFavorite`.
                internal var IsFavorite: Swift.Bool?
                /// Optional filter for movies.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsMovie`.
                internal var IsMovie: Swift.Bool?
                /// Optional filter for series.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsSeries`.
                internal var IsSeries: Swift.Bool?
                /// Optional filter for folders.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsFolder`.
                internal var IsFolder: Swift.Bool?
                /// Optional filter for news.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsNews`.
                internal var IsNews: Swift.Bool?
                /// Optional filter for kids.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsKids`.
                internal var IsKids: Swift.Bool?
                /// Optional filter for sports.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsSports`.
                internal var IsSports: Swift.Bool?
                /// Optional filter for IsNew.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsNew`.
                internal var IsNew: Swift.Bool?
                /// Optional filter for IsPremiere.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsPremiere`.
                internal var IsPremiere: Swift.Bool?
                /// Optional filter for IsNewOrPremiere.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsNewOrPremiere`.
                internal var IsNewOrPremiere: Swift.Bool?
                /// Optional filter for IsRepeat.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsRepeat`.
                internal var IsRepeat: Swift.Bool?
                /// ProjectToMedia
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ProjectToMedia`.
                internal var ProjectToMedia: Swift.Bool?
                /// Optional filter by MediaType. Allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MediaTypes`.
                internal var MediaTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ImageTypes`.
                internal var ImageTypes: Swift.String?
                /// Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/SortBy`.
                internal var SortBy: Swift.String?
                /// Optional filter by items that are played, or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsPlayed`.
                internal var IsPlayed: Swift.Bool?
                /// Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Genres`.
                internal var Genres: Swift.String?
                /// Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/OfficialRatings`.
                internal var OfficialRatings: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Tags`.
                internal var Tags: Swift.String?
                /// Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ExcludeTags`.
                internal var ExcludeTags: Swift.String?
                /// Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Years`.
                internal var Years: Swift.String?
                /// Optional, include image information in output
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/EnableImages`.
                internal var EnableImages: Swift.Bool?
                /// Optional, include user data
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/EnableUserData`.
                internal var EnableUserData: Swift.Bool?
                /// Optional, the max number of images to return, per image type
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ImageTypeLimit`.
                internal var ImageTypeLimit: Swift.Int32?
                /// Optional. The image types to include in the output.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/EnableImageTypes`.
                internal var EnableImageTypes: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Person`.
                internal var Person: Swift.String?
                /// Optional. If specified, results will be filtered to include only those containing the specified person.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/PersonIds`.
                internal var PersonIds: Swift.String?
                /// Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/PersonTypes`.
                internal var PersonTypes: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Studios`.
                internal var Studios: Swift.String?
                /// Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/StudioIds`.
                internal var StudioIds: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Artists`.
                internal var Artists: Swift.String?
                /// Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ArtistIds`.
                internal var ArtistIds: Swift.String?
                /// Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Albums`.
                internal var Albums: Swift.String?
                /// Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Ids`.
                internal var Ids: Swift.String?
                /// Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/VideoTypes`.
                internal var VideoTypes: Swift.String?
                /// Optional filter by Container. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Containers`.
                internal var Containers: Swift.String?
                /// Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/AudioCodecs`.
                internal var AudioCodecs: Swift.String?
                /// Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/AudioLayouts`.
                internal var AudioLayouts: Swift.String?
                /// Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/VideoCodecs`.
                internal var VideoCodecs: Swift.String?
                /// Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ExtendedVideoTypes`.
                internal var ExtendedVideoTypes: Swift.String?
                /// Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/SubtitleCodecs`.
                internal var SubtitleCodecs: Swift.String?
                /// Optional filter by Path.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Path`.
                internal var Path: Swift.String?
                /// Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/MinOfficialRating`.
                internal var MinOfficialRating: Swift.String?
                /// Optional filter by items that are locked.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsLocked`.
                internal var IsLocked: Swift.Bool?
                /// Optional filter by items that are placeholders
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/IsPlaceHolder`.
                internal var IsPlaceHolder: Swift.Bool?
                /// Optional filter by items that have official ratings
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/HasOfficialRating`.
                internal var HasOfficialRating: Swift.Bool?
                /// Whether or not to hide items behind their boxsets.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/GroupItemsIntoCollections`.
                internal var GroupItemsIntoCollections: Swift.Bool?
                /// Optional filter by items that are 3D, or not.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/Is3D`.
                internal var Is3D: Swift.Bool?
                /// Optional filter by Series Status. Allows multiple, comma delimeted.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/SeriesStatus`.
                internal var SeriesStatus: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/NameStartsWithOrGreater`.
                internal var NameStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/ArtistStartsWithOrGreater`.
                internal var ArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally or greater than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/AlbumArtistStartsWithOrGreater`.
                internal var AlbumArtistStartsWithOrGreater: Swift.String?
                /// Optional filter by items whose name is sorted equally than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/NameStartsWith`.
                internal var NameStartsWith: Swift.String?
                /// Optional filter by items whose name is equally or lesser than a given input string.
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/query/NameLessThan`.
                internal var NameLessThan: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ArtistType: Artist or AlbumArtist
                ///   - MaxOfficialRating: Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
                ///   - HasThemeSong: Optional filter by items with theme songs.
                ///   - HasThemeVideo: Optional filter by items with theme videos.
                ///   - HasSubtitles: Optional filter by items with subtitles.
                ///   - HasSpecialFeature: Optional filter by items with special features.
                ///   - HasTrailer: Optional filter by items with trailers.
                ///   - AdjacentTo: Optional. Return items that are siblings of a supplied item.
                ///   - MinIndexNumber: Optional filter by minimum index number.
                ///   - MinStartDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxStartDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinEndDate: Optional. The minimum premiere date. Format = ISO
                ///   - MaxEndDate: Optional. The maximum premiere date. Format = ISO
                ///   - MinPlayers: Optional filter by minimum number of game players.
                ///   - MaxPlayers: Optional filter by maximum number of game players.
                ///   - ParentIndexNumber: Optional filter by parent index number.
                ///   - HasParentalRating: Optional filter by items that have or do not have a parental rating
                ///   - IsHD: Optional filter by items that are HD or not.
                ///   - IsUnaired: Optional filter by items that are unaired episodes or not.
                ///   - MinCommunityRating: Optional filter by minimum community rating.
                ///   - MinCriticRating: Optional filter by minimum critic rating.
                ///   - AiredDuringSeason: Gets all episodes that aired during a season, including specials.
                ///   - MinPremiereDate: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSaved: Optional. The minimum premiere date. Format = ISO
                ///   - MinDateLastSavedForUser: Optional. The minimum premiere date. Format = ISO
                ///   - MaxPremiereDate: Optional. The maximum premiere date. Format = ISO
                ///   - HasOverview: Optional filter by items that have an overview or not.
                ///   - HasImdbId: Optional filter by items that have an imdb id or not.
                ///   - HasTmdbId: Optional filter by items that have a tmdb id or not.
                ///   - HasTvdbId: Optional filter by items that have a tvdb id or not.
                ///   - ExcludeItemIds: Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted.
                ///   - StartIndex: Optional. The record index to start at. All items with a lower index will be dropped from the results.
                ///   - Limit: Optional. The maximum number of records to return
                ///   - Recursive: When searching within folders, this determines whether or not the search will be recursive. true/false
                ///   - SearchTerm: Enter a search term to perform a search request
                ///   - SortOrder: Sort Order - Ascending,Descending
                ///   - ParentId: Specify this to localize the search to a specific item or folder. Omit to use the root
                ///   - Fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
                ///   - ExcludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - IncludeItemTypes: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
                ///   - AnyProviderIdEquals: Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form 'prov.id', e.g. 'imdb.tt123456'. This allows multiple, comma delimeted value pairs.
                ///   - Filters: Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes
                ///   - IsFavorite: Optional filter by items that are marked as favorite, or not.
                ///   - IsMovie: Optional filter for movies.
                ///   - IsSeries: Optional filter for series.
                ///   - IsFolder: Optional filter for folders.
                ///   - IsNews: Optional filter for news.
                ///   - IsKids: Optional filter for kids.
                ///   - IsSports: Optional filter for sports.
                ///   - IsNew: Optional filter for IsNew.
                ///   - IsPremiere: Optional filter for IsPremiere.
                ///   - IsNewOrPremiere: Optional filter for IsNewOrPremiere.
                ///   - IsRepeat: Optional filter for IsRepeat.
                ///   - ProjectToMedia: ProjectToMedia
                ///   - MediaTypes: Optional filter by MediaType. Allows multiple, comma delimited.
                ///   - ImageTypes: Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
                ///   - SortBy: Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime
                ///   - IsPlayed: Optional filter by items that are played, or not.
                ///   - Genres: Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted.
                ///   - OfficialRatings: Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted.
                ///   - Tags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - ExcludeTags: Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted.
                ///   - Years: Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted.
                ///   - EnableImages: Optional, include image information in output
                ///   - EnableUserData: Optional, include user data
                ///   - ImageTypeLimit: Optional, the max number of images to return, per image type
                ///   - EnableImageTypes: Optional. The image types to include in the output.
                ///   - Person: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonIds: Optional. If specified, results will be filtered to include only those containing the specified person.
                ///   - PersonTypes: Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited
                ///   - Studios: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - StudioIds: Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted.
                ///   - Artists: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - ArtistIds: Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted.
                ///   - Albums: Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted.
                ///   - Ids: Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
                ///   - VideoTypes: Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted.
                ///   - Containers: Optional filter by Container. Allows multiple, comma delimeted.
                ///   - AudioCodecs: Optional filter by AudioCodec. Allows multiple, comma delimeted.
                ///   - AudioLayouts: Optional filter by AudioLayout. Allows multiple, comma delimeted.
                ///   - VideoCodecs: Optional filter by VideoCodec. Allows multiple, comma delimeted.
                ///   - ExtendedVideoTypes: Optional filter by ExtendedVideoType. Allows multiple, comma delimeted.
                ///   - SubtitleCodecs: Optional filter by SubtitleCodec. Allows multiple, comma delimeted.
                ///   - Path: Optional filter by Path.
                ///   - MinOfficialRating: Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
                ///   - IsLocked: Optional filter by items that are locked.
                ///   - IsPlaceHolder: Optional filter by items that are placeholders
                ///   - HasOfficialRating: Optional filter by items that have official ratings
                ///   - GroupItemsIntoCollections: Whether or not to hide items behind their boxsets.
                ///   - Is3D: Optional filter by items that are 3D, or not.
                ///   - SeriesStatus: Optional filter by Series Status. Allows multiple, comma delimeted.
                ///   - NameStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - ArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - AlbumArtistStartsWithOrGreater: Optional filter by items whose name is sorted equally or greater than a given input string.
                ///   - NameStartsWith: Optional filter by items whose name is sorted equally than a given input string.
                ///   - NameLessThan: Optional filter by items whose name is equally or lesser than a given input string.
                internal init(
                    ArtistType: Swift.String? = nil,
                    MaxOfficialRating: Swift.String? = nil,
                    HasThemeSong: Swift.Bool? = nil,
                    HasThemeVideo: Swift.Bool? = nil,
                    HasSubtitles: Swift.Bool? = nil,
                    HasSpecialFeature: Swift.Bool? = nil,
                    HasTrailer: Swift.Bool? = nil,
                    AdjacentTo: Swift.String? = nil,
                    MinIndexNumber: Swift.Int32? = nil,
                    MinStartDate: Swift.String? = nil,
                    MaxStartDate: Swift.String? = nil,
                    MinEndDate: Swift.String? = nil,
                    MaxEndDate: Swift.String? = nil,
                    MinPlayers: Swift.Int32? = nil,
                    MaxPlayers: Swift.Int32? = nil,
                    ParentIndexNumber: Swift.Int32? = nil,
                    HasParentalRating: Swift.Bool? = nil,
                    IsHD: Swift.Bool? = nil,
                    IsUnaired: Swift.Bool? = nil,
                    MinCommunityRating: Swift.Double? = nil,
                    MinCriticRating: Swift.Double? = nil,
                    AiredDuringSeason: Swift.Int32? = nil,
                    MinPremiereDate: Swift.String? = nil,
                    MinDateLastSaved: Swift.String? = nil,
                    MinDateLastSavedForUser: Swift.String? = nil,
                    MaxPremiereDate: Swift.String? = nil,
                    HasOverview: Swift.Bool? = nil,
                    HasImdbId: Swift.Bool? = nil,
                    HasTmdbId: Swift.Bool? = nil,
                    HasTvdbId: Swift.Bool? = nil,
                    ExcludeItemIds: Swift.String? = nil,
                    StartIndex: Swift.Int32? = nil,
                    Limit: Swift.Int32? = nil,
                    Recursive: Swift.Bool? = nil,
                    SearchTerm: Swift.String? = nil,
                    SortOrder: Swift.String? = nil,
                    ParentId: Swift.String? = nil,
                    Fields: Swift.String? = nil,
                    ExcludeItemTypes: Swift.String? = nil,
                    IncludeItemTypes: Swift.String? = nil,
                    AnyProviderIdEquals: Swift.String? = nil,
                    Filters: Swift.String? = nil,
                    IsFavorite: Swift.Bool? = nil,
                    IsMovie: Swift.Bool? = nil,
                    IsSeries: Swift.Bool? = nil,
                    IsFolder: Swift.Bool? = nil,
                    IsNews: Swift.Bool? = nil,
                    IsKids: Swift.Bool? = nil,
                    IsSports: Swift.Bool? = nil,
                    IsNew: Swift.Bool? = nil,
                    IsPremiere: Swift.Bool? = nil,
                    IsNewOrPremiere: Swift.Bool? = nil,
                    IsRepeat: Swift.Bool? = nil,
                    ProjectToMedia: Swift.Bool? = nil,
                    MediaTypes: Swift.String? = nil,
                    ImageTypes: Swift.String? = nil,
                    SortBy: Swift.String? = nil,
                    IsPlayed: Swift.Bool? = nil,
                    Genres: Swift.String? = nil,
                    OfficialRatings: Swift.String? = nil,
                    Tags: Swift.String? = nil,
                    ExcludeTags: Swift.String? = nil,
                    Years: Swift.String? = nil,
                    EnableImages: Swift.Bool? = nil,
                    EnableUserData: Swift.Bool? = nil,
                    ImageTypeLimit: Swift.Int32? = nil,
                    EnableImageTypes: Swift.String? = nil,
                    Person: Swift.String? = nil,
                    PersonIds: Swift.String? = nil,
                    PersonTypes: Swift.String? = nil,
                    Studios: Swift.String? = nil,
                    StudioIds: Swift.String? = nil,
                    Artists: Swift.String? = nil,
                    ArtistIds: Swift.String? = nil,
                    Albums: Swift.String? = nil,
                    Ids: Swift.String? = nil,
                    VideoTypes: Swift.String? = nil,
                    Containers: Swift.String? = nil,
                    AudioCodecs: Swift.String? = nil,
                    AudioLayouts: Swift.String? = nil,
                    VideoCodecs: Swift.String? = nil,
                    ExtendedVideoTypes: Swift.String? = nil,
                    SubtitleCodecs: Swift.String? = nil,
                    Path: Swift.String? = nil,
                    MinOfficialRating: Swift.String? = nil,
                    IsLocked: Swift.Bool? = nil,
                    IsPlaceHolder: Swift.Bool? = nil,
                    HasOfficialRating: Swift.Bool? = nil,
                    GroupItemsIntoCollections: Swift.Bool? = nil,
                    Is3D: Swift.Bool? = nil,
                    SeriesStatus: Swift.String? = nil,
                    NameStartsWithOrGreater: Swift.String? = nil,
                    ArtistStartsWithOrGreater: Swift.String? = nil,
                    AlbumArtistStartsWithOrGreater: Swift.String? = nil,
                    NameStartsWith: Swift.String? = nil,
                    NameLessThan: Swift.String? = nil
                ) {
                    self.ArtistType = ArtistType
                    self.MaxOfficialRating = MaxOfficialRating
                    self.HasThemeSong = HasThemeSong
                    self.HasThemeVideo = HasThemeVideo
                    self.HasSubtitles = HasSubtitles
                    self.HasSpecialFeature = HasSpecialFeature
                    self.HasTrailer = HasTrailer
                    self.AdjacentTo = AdjacentTo
                    self.MinIndexNumber = MinIndexNumber
                    self.MinStartDate = MinStartDate
                    self.MaxStartDate = MaxStartDate
                    self.MinEndDate = MinEndDate
                    self.MaxEndDate = MaxEndDate
                    self.MinPlayers = MinPlayers
                    self.MaxPlayers = MaxPlayers
                    self.ParentIndexNumber = ParentIndexNumber
                    self.HasParentalRating = HasParentalRating
                    self.IsHD = IsHD
                    self.IsUnaired = IsUnaired
                    self.MinCommunityRating = MinCommunityRating
                    self.MinCriticRating = MinCriticRating
                    self.AiredDuringSeason = AiredDuringSeason
                    self.MinPremiereDate = MinPremiereDate
                    self.MinDateLastSaved = MinDateLastSaved
                    self.MinDateLastSavedForUser = MinDateLastSavedForUser
                    self.MaxPremiereDate = MaxPremiereDate
                    self.HasOverview = HasOverview
                    self.HasImdbId = HasImdbId
                    self.HasTmdbId = HasTmdbId
                    self.HasTvdbId = HasTvdbId
                    self.ExcludeItemIds = ExcludeItemIds
                    self.StartIndex = StartIndex
                    self.Limit = Limit
                    self.Recursive = Recursive
                    self.SearchTerm = SearchTerm
                    self.SortOrder = SortOrder
                    self.ParentId = ParentId
                    self.Fields = Fields
                    self.ExcludeItemTypes = ExcludeItemTypes
                    self.IncludeItemTypes = IncludeItemTypes
                    self.AnyProviderIdEquals = AnyProviderIdEquals
                    self.Filters = Filters
                    self.IsFavorite = IsFavorite
                    self.IsMovie = IsMovie
                    self.IsSeries = IsSeries
                    self.IsFolder = IsFolder
                    self.IsNews = IsNews
                    self.IsKids = IsKids
                    self.IsSports = IsSports
                    self.IsNew = IsNew
                    self.IsPremiere = IsPremiere
                    self.IsNewOrPremiere = IsNewOrPremiere
                    self.IsRepeat = IsRepeat
                    self.ProjectToMedia = ProjectToMedia
                    self.MediaTypes = MediaTypes
                    self.ImageTypes = ImageTypes
                    self.SortBy = SortBy
                    self.IsPlayed = IsPlayed
                    self.Genres = Genres
                    self.OfficialRatings = OfficialRatings
                    self.Tags = Tags
                    self.ExcludeTags = ExcludeTags
                    self.Years = Years
                    self.EnableImages = EnableImages
                    self.EnableUserData = EnableUserData
                    self.ImageTypeLimit = ImageTypeLimit
                    self.EnableImageTypes = EnableImageTypes
                    self.Person = Person
                    self.PersonIds = PersonIds
                    self.PersonTypes = PersonTypes
                    self.Studios = Studios
                    self.StudioIds = StudioIds
                    self.Artists = Artists
                    self.ArtistIds = ArtistIds
                    self.Albums = Albums
                    self.Ids = Ids
                    self.VideoTypes = VideoTypes
                    self.Containers = Containers
                    self.AudioCodecs = AudioCodecs
                    self.AudioLayouts = AudioLayouts
                    self.VideoCodecs = VideoCodecs
                    self.ExtendedVideoTypes = ExtendedVideoTypes
                    self.SubtitleCodecs = SubtitleCodecs
                    self.Path = Path
                    self.MinOfficialRating = MinOfficialRating
                    self.IsLocked = IsLocked
                    self.IsPlaceHolder = IsPlaceHolder
                    self.HasOfficialRating = HasOfficialRating
                    self.GroupItemsIntoCollections = GroupItemsIntoCollections
                    self.Is3D = Is3D
                    self.SeriesStatus = SeriesStatus
                    self.NameStartsWithOrGreater = NameStartsWithOrGreater
                    self.ArtistStartsWithOrGreater = ArtistStartsWithOrGreater
                    self.AlbumArtistStartsWithOrGreater = AlbumArtistStartsWithOrGreater
                    self.NameStartsWith = NameStartsWith
                    self.NameLessThan = NameLessThan
                }
            }
            internal var query: Operations.getUsersByUseridItemsResume.Input.Query
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUsersByUseridItemsResume.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUsersByUseridItemsResume.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getUsersByUseridItemsResume.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getUsersByUseridItemsResume.Input.Path,
                query: Operations.getUsersByUseridItemsResume.Input.Query = .init(),
                headers: Operations.getUsersByUseridItemsResume.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.QueryResult_BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.QueryResult_BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Users/{UserId}/Items/Resume/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getUsersByUseridItemsResume.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getUsersByUseridItemsResume.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a QueryResult<BaseItemDto> object.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getUsersByUseridItemsResume.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getUsersByUseridItemsResume.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/Resume/get(getUsersByUseridItemsResume)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Gets an item from a user's library
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `GET /Users/{UserId}/Items/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)`.
    internal enum getUsersByUseridItemsById {
        internal static let id: Swift.String = "getUsersByUseridItemsById"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/path/UserId`.
                internal var UserId: Swift.String
                /// Item Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/path/Id`.
                internal var Id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - UserId: User Id
                ///   - Id: Item Id
                internal init(
                    UserId: Swift.String,
                    Id: Swift.String
                ) {
                    self.UserId = UserId
                    self.Id = Id
                }
            }
            internal var path: Operations.getUsersByUseridItemsById.Input.Path
            /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUsersByUseridItemsById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getUsersByUseridItemsById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getUsersByUseridItemsById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.getUsersByUseridItemsById.Input.Path,
                headers: Operations.getUsersByUseridItemsById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BaseItemDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.BaseItemDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Users/{UserId}/Items/{Id}/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getUsersByUseridItemsById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.getUsersByUseridItemsById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a BaseItemDto object.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getUsersByUseridItemsById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getUsersByUseridItemsById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/Items/{Id}/get(getUsersByUseridItemsById)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Marks an item as a favorite
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `POST /Users/{UserId}/FavoriteItems/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)`.
    internal enum postUsersByUseridFavoriteitemsById {
        internal static let id: Swift.String = "postUsersByUseridFavoriteitemsById"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/path/UserId`.
                internal var UserId: Swift.String
                /// Item Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/path/Id`.
                internal var Id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - UserId: User Id
                ///   - Id: Item Id
                internal init(
                    UserId: Swift.String,
                    Id: Swift.String
                ) {
                    self.UserId = UserId
                    self.Id = Id
                }
            }
            internal var path: Operations.postUsersByUseridFavoriteitemsById.Input.Path
            /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postUsersByUseridFavoriteitemsById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postUsersByUseridFavoriteitemsById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.postUsersByUseridFavoriteitemsById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.postUsersByUseridFavoriteitemsById.Input.Path,
                headers: Operations.postUsersByUseridFavoriteitemsById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserItemDataDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.UserItemDataDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/POST/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.postUsersByUseridFavoriteitemsById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.postUsersByUseridFavoriteitemsById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a UserItemDataDto object.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.postUsersByUseridFavoriteitemsById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.postUsersByUseridFavoriteitemsById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/post(postUsersByUseridFavoriteitemsById)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// Unmarks an item as a favorite
    ///
    /// Requires authentication as user
    ///
    /// - Remark: HTTP `DELETE /Users/{UserId}/FavoriteItems/{Id}`.
    /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)`.
    internal enum deleteUsersByUseridFavoriteitemsById {
        internal static let id: Swift.String = "deleteUsersByUseridFavoriteitemsById"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// User Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/path/UserId`.
                internal var UserId: Swift.String
                /// Item Id
                ///
                /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/path/Id`.
                internal var Id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - UserId: User Id
                ///   - Id: Item Id
                internal init(
                    UserId: Swift.String,
                    Id: Swift.String
                ) {
                    self.UserId = UserId
                    self.Id = Id
                }
            }
            internal var path: Operations.deleteUsersByUseridFavoriteitemsById.Input.Path
            /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteUsersByUseridFavoriteitemsById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteUsersByUseridFavoriteitemsById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.deleteUsersByUseridFavoriteitemsById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.deleteUsersByUseridFavoriteitemsById.Input.Path,
                headers: Operations.deleteUsersByUseridFavoriteitemsById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserItemDataDto)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.UserItemDataDto {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/Users/{UserId}/FavoriteItems/{Id}/DELETE/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.deleteUsersByUseridFavoriteitemsById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.deleteUsersByUseridFavoriteitemsById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Operation successful. Returning a UserItemDataDto object.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteUsersByUseridFavoriteitemsById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.deleteUsersByUseridFavoriteitemsById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses._400)
            /// Bad Request. Server cannot process request.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            internal static var badRequest: Self {
                .badRequest(.init())
            }
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses._400 {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses._401)
            /// Unauthorized. Client needs to authenticate.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            internal static var unauthorized: Self {
                .unauthorized(.init())
            }
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses._401 {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses._403)
            /// Forbidden. No permission for the reqested operation.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            internal static var forbidden: Self {
                .forbidden(.init())
            }
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses._403 {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses._404)
            /// Resource not found or unavailable.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            internal static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses._404 {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses._500)
            /// Server error.
            ///
            /// - Remark: Generated from `#/paths//Users/{UserId}/FavoriteItems/{Id}/delete(deleteUsersByUseridFavoriteitemsById)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            internal static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses._500 {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
}
